{"version":3,"file":"babylonjs.serializers.min.js","mappings":"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","sources":["webpack://SERIALIZERS/webpack/universalModuleDefinition","webpack://SERIALIZERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://SERIALIZERS/webpack/bootstrap","webpack://SERIALIZERS/webpack/runtime/define property getters","webpack://SERIALIZERS/webpack/runtime/global","webpack://SERIALIZERS/webpack/runtime/hasOwnProperty shorthand","webpack://SERIALIZERS/webpack/runtime/make namespace object","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFAnimation.ts","webpack://SERIALIZERS/../../../dev/serializers/src/OBJ/objSerializer.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/glTFFileExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFUtilities.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFData.ts","webpack://SERIALIZERS/../../../../node_modules/tslib/tslib.es6.mjs","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFMaterialExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFExporterExtension.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFSerializer.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_texture_transform.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_lights_punctual.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_clearcoat.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_iridescence.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_anisotropy.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_sheen.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_unlit.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_ior.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_specular.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_volume.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_dispersion.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_transmission.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_emissive_strength.ts","webpack://SERIALIZERS/../../../dev/serializers/src/stl/stlSerializer.ts","webpack://SERIALIZERS/../../../lts/serializers/src/legacy/legacy-glTF2Serializer.ts","webpack://SERIALIZERS/../../../lts/serializers/src/legacy/legacy-objSerializer.ts","webpack://SERIALIZERS/../../../lts/serializers/src/legacy/legacy-stlSerializer.ts","webpack://SERIALIZERS/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-serializers\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-serializers\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"SERIALIZERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { IAnimation, INode, IBufferView, IAccessor, IAnimationSampler, IAnimationChannel } from \"babylonjs-gltf2interface\";\r\nimport { AnimationSamplerInterpolation, AnimationChannelTargetPath, AccessorType, AccessorComponentType } from \"babylonjs-gltf2interface\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3, Quaternion } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport type { _BinaryWriter } from \"./glTFExporter\";\r\nimport { _GLTFUtilities } from \"./glTFUtilities\";\r\nimport type { IAnimationKey } from \"core/Animations/animationKey\";\r\nimport { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\n\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { Light } from \"core/Lights/light\";\r\n\r\n/**\r\n * @internal\r\n * Interface to store animation data.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationData {\r\n    /**\r\n     * Keyframe data.\r\n     */\r\n    inputs: number[];\r\n    /**\r\n     * Value data.\r\n     */\r\n    outputs: number[][];\r\n    /**\r\n     * Animation interpolation data.\r\n     */\r\n    samplerInterpolation: AnimationSamplerInterpolation;\r\n    /**\r\n     * Minimum keyframe value.\r\n     */\r\n    inputsMin: number;\r\n    /**\r\n     * Maximum keyframe value.\r\n     */\r\n    inputsMax: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationInfo {\r\n    /**\r\n     * The target channel for the animation\r\n     */\r\n    animationChannelTargetPath: AnimationChannelTargetPath;\r\n    /**\r\n     * The glTF accessor type for the data.\r\n     */\r\n    dataAccessorType: AccessorType.VEC3 | AccessorType.VEC4 | AccessorType.SCALAR;\r\n    /**\r\n     * Specifies if quaternions should be used.\r\n     */\r\n    useQuaternion: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Enum for handling in tangent and out tangent.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _TangentType {\r\n    /**\r\n     * Specifies that input tangents are used.\r\n     */\r\n    INTANGENT,\r\n    /**\r\n     * Specifies that output tangents are used.\r\n     */\r\n    OUTTANGENT,\r\n}\r\n\r\n/**\r\n * @internal\r\n * Utility class for generating glTF animation data from BabylonJS.\r\n */\r\nexport class _GLTFAnimation {\r\n    /**\r\n     * Determine if a node is transformable - ie has properties it should be part of animation of transformation.\r\n     * @param babylonNode the node to test\r\n     * @returns true if can be animated, false otherwise. False if the parameter is null or undefined.\r\n     */\r\n    private static _IsTransformable(babylonNode: Node): boolean {\r\n        return babylonNode && (babylonNode instanceof TransformNode || babylonNode instanceof Camera || babylonNode instanceof Light);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Creates glTF channel animation from BabylonJS animation.\r\n     * @param babylonTransformNode - BabylonJS mesh.\r\n     * @param animation - animation.\r\n     * @param animationChannelTargetPath - The target animation channel.\r\n     * @param useQuaternion - Specifies if quaternions are used.\r\n     * @returns nullable IAnimationData\r\n     */\r\n    public static _CreateNodeAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean,\r\n        animationSampleRate: number\r\n    ): Nullable<_IAnimationData> {\r\n        if (this._IsTransformable(babylonTransformNode)) {\r\n            const inputs: number[] = [];\r\n            const outputs: number[][] = [];\r\n            const keyFrames = animation.getKeys();\r\n            const minMaxKeyFrames = _GLTFAnimation._CalculateMinMaxKeyFrames(keyFrames);\r\n            const interpolationOrBake = _GLTFAnimation._DeduceInterpolation(keyFrames, animationChannelTargetPath, useQuaternion);\r\n\r\n            const interpolation = interpolationOrBake.interpolationType;\r\n            const shouldBakeAnimation = interpolationOrBake.shouldBakeAnimation;\r\n\r\n            if (shouldBakeAnimation) {\r\n                _GLTFAnimation._CreateBakedAnimation(\r\n                    babylonTransformNode,\r\n                    animation,\r\n                    animationChannelTargetPath,\r\n                    minMaxKeyFrames.min,\r\n                    minMaxKeyFrames.max,\r\n                    animation.framePerSecond,\r\n                    animationSampleRate,\r\n                    inputs,\r\n                    outputs,\r\n                    minMaxKeyFrames,\r\n                    useQuaternion\r\n                );\r\n            } else {\r\n                if (interpolation === AnimationSamplerInterpolation.LINEAR || interpolation === AnimationSamplerInterpolation.STEP) {\r\n                    _GLTFAnimation._CreateLinearOrStepAnimation(babylonTransformNode, animation, animationChannelTargetPath, inputs, outputs, useQuaternion);\r\n                } else if (interpolation === AnimationSamplerInterpolation.CUBICSPLINE) {\r\n                    _GLTFAnimation._CreateCubicSplineAnimation(babylonTransformNode, animation, animationChannelTargetPath, inputs, outputs, useQuaternion);\r\n                } else {\r\n                    _GLTFAnimation._CreateBakedAnimation(\r\n                        babylonTransformNode,\r\n                        animation,\r\n                        animationChannelTargetPath,\r\n                        minMaxKeyFrames.min,\r\n                        minMaxKeyFrames.max,\r\n                        animation.framePerSecond,\r\n                        animationSampleRate,\r\n                        inputs,\r\n                        outputs,\r\n                        minMaxKeyFrames,\r\n                        useQuaternion\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (inputs.length && outputs.length) {\r\n                const result: _IAnimationData = {\r\n                    inputs: inputs,\r\n                    outputs: outputs,\r\n                    samplerInterpolation: interpolation,\r\n                    inputsMin: shouldBakeAnimation ? minMaxKeyFrames.min : Tools.FloatRound(minMaxKeyFrames.min / animation.framePerSecond),\r\n                    inputsMax: shouldBakeAnimation ? minMaxKeyFrames.max : Tools.FloatRound(minMaxKeyFrames.max / animation.framePerSecond),\r\n                };\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static _DeduceAnimationInfo(animation: Animation): Nullable<_IAnimationInfo> {\r\n        let animationChannelTargetPath: Nullable<AnimationChannelTargetPath> = null;\r\n        let dataAccessorType = AccessorType.VEC3;\r\n        let useQuaternion: boolean = false;\r\n        const property = animation.targetProperty.split(\".\");\r\n        switch (property[0]) {\r\n            case \"scaling\": {\r\n                animationChannelTargetPath = AnimationChannelTargetPath.SCALE;\r\n                break;\r\n            }\r\n            case \"position\": {\r\n                animationChannelTargetPath = AnimationChannelTargetPath.TRANSLATION;\r\n                break;\r\n            }\r\n            case \"rotation\": {\r\n                dataAccessorType = AccessorType.VEC4;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.ROTATION;\r\n                break;\r\n            }\r\n            case \"rotationQuaternion\": {\r\n                dataAccessorType = AccessorType.VEC4;\r\n                useQuaternion = true;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.ROTATION;\r\n                break;\r\n            }\r\n            case \"influence\": {\r\n                dataAccessorType = AccessorType.SCALAR;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.WEIGHTS;\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Error(`Unsupported animatable property ${property[0]}`);\r\n            }\r\n        }\r\n        if (animationChannelTargetPath) {\r\n            return { animationChannelTargetPath: animationChannelTargetPath, dataAccessorType: dataAccessorType, useQuaternion: useQuaternion };\r\n        } else {\r\n            Tools.Error(\"animation channel target path and data accessor type could be deduced\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Create node animations from the transform node animations\r\n     * @param babylonNode\r\n     * @param runtimeGLTFAnimation\r\n     * @param idleGLTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param binaryWriter\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateNodeAnimationFromNodeAnimations(\r\n        babylonNode: Node,\r\n        runtimeGLTFAnimation: IAnimation,\r\n        idleGLTFAnimations: IAnimation[],\r\n        nodeMap: { [key: number]: number },\r\n        nodes: INode[],\r\n        binaryWriter: _BinaryWriter,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (_GLTFAnimation._IsTransformable(babylonNode)) {\r\n            if (babylonNode.animations) {\r\n                for (const animation of babylonNode.animations) {\r\n                    if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                        continue;\r\n                    }\r\n                    const animationInfo = _GLTFAnimation._DeduceAnimationInfo(animation);\r\n                    if (animationInfo) {\r\n                        glTFAnimation = {\r\n                            name: animation.name,\r\n                            samplers: [],\r\n                            channels: [],\r\n                        };\r\n                        _GLTFAnimation._AddAnimation(\r\n                            `${animation.name}`,\r\n                            animation.hasRunningRuntimeAnimations ? runtimeGLTFAnimation : glTFAnimation,\r\n                            babylonNode,\r\n                            animation,\r\n                            animationInfo.dataAccessorType,\r\n                            animationInfo.animationChannelTargetPath,\r\n                            nodeMap,\r\n                            binaryWriter,\r\n                            bufferViews,\r\n                            accessors,\r\n                            animationInfo.useQuaternion,\r\n                            animationSampleRate\r\n                        );\r\n                        if (glTFAnimation.samplers.length && glTFAnimation.channels.length) {\r\n                            idleGLTFAnimations.push(glTFAnimation);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Create individual morph animations from the mesh's morph target animation tracks\r\n     * @param babylonNode\r\n     * @param runtimeGLTFAnimation\r\n     * @param idleGLTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param binaryWriter\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateMorphTargetAnimationFromMorphTargetAnimations(\r\n        babylonNode: Node,\r\n        runtimeGLTFAnimation: IAnimation,\r\n        idleGLTFAnimations: IAnimation[],\r\n        nodeMap: { [key: number]: number },\r\n        nodes: INode[],\r\n        binaryWriter: _BinaryWriter,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (babylonNode instanceof Mesh) {\r\n            const morphTargetManager = babylonNode.morphTargetManager;\r\n            if (morphTargetManager) {\r\n                for (let i = 0; i < morphTargetManager.numTargets; ++i) {\r\n                    const morphTarget = morphTargetManager.getTarget(i);\r\n                    for (const animation of morphTarget.animations) {\r\n                        if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                            continue;\r\n                        }\r\n                        const combinedAnimation = new Animation(\r\n                            `${animation.name}`,\r\n                            \"influence\",\r\n                            animation.framePerSecond,\r\n                            animation.dataType,\r\n                            animation.loopMode,\r\n                            animation.enableBlending\r\n                        );\r\n                        const combinedAnimationKeys: IAnimationKey[] = [];\r\n                        const animationKeys = animation.getKeys();\r\n\r\n                        for (let j = 0; j < animationKeys.length; ++j) {\r\n                            const animationKey = animationKeys[j];\r\n                            for (let k = 0; k < morphTargetManager.numTargets; ++k) {\r\n                                if (k == i) {\r\n                                    combinedAnimationKeys.push(animationKey);\r\n                                } else {\r\n                                    combinedAnimationKeys.push({ frame: animationKey.frame, value: 0 });\r\n                                }\r\n                            }\r\n                        }\r\n                        combinedAnimation.setKeys(combinedAnimationKeys);\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(combinedAnimation);\r\n                        if (animationInfo) {\r\n                            glTFAnimation = {\r\n                                name: combinedAnimation.name,\r\n                                samplers: [],\r\n                                channels: [],\r\n                            };\r\n                            _GLTFAnimation._AddAnimation(\r\n                                animation.name,\r\n                                animation.hasRunningRuntimeAnimations ? runtimeGLTFAnimation : glTFAnimation,\r\n                                babylonNode,\r\n                                combinedAnimation,\r\n                                animationInfo.dataAccessorType,\r\n                                animationInfo.animationChannelTargetPath,\r\n                                nodeMap,\r\n                                binaryWriter,\r\n                                bufferViews,\r\n                                accessors,\r\n                                animationInfo.useQuaternion,\r\n                                animationSampleRate,\r\n                                morphTargetManager.numTargets\r\n                            );\r\n                            if (glTFAnimation.samplers.length && glTFAnimation.channels.length) {\r\n                                idleGLTFAnimations.push(glTFAnimation);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Create node and morph animations from the animation groups\r\n     * @param babylonScene\r\n     * @param glTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param binaryWriter\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateNodeAndMorphAnimationFromAnimationGroups(\r\n        babylonScene: Scene,\r\n        glTFAnimations: IAnimation[],\r\n        nodeMap: { [key: number]: number },\r\n        binaryWriter: _BinaryWriter,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (babylonScene.animationGroups) {\r\n            const animationGroups = babylonScene.animationGroups;\r\n            for (const animationGroup of animationGroups) {\r\n                const morphAnimations: Map<Mesh, Map<MorphTarget, Animation>> = new Map();\r\n                const sampleAnimations: Map<Mesh, Animation> = new Map();\r\n                const morphAnimationMeshes: Set<Mesh> = new Set();\r\n                const animationGroupFrameDiff = animationGroup.to - animationGroup.from;\r\n                glTFAnimation = {\r\n                    name: animationGroup.name,\r\n                    channels: [],\r\n                    samplers: [],\r\n                };\r\n                for (let i = 0; i < animationGroup.targetedAnimations.length; ++i) {\r\n                    const targetAnimation = animationGroup.targetedAnimations[i];\r\n                    const target = targetAnimation.target;\r\n                    const animation = targetAnimation.animation;\r\n                    if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                        continue;\r\n                    }\r\n                    if (this._IsTransformable(target) || (target.length === 1 && this._IsTransformable(target[0]))) {\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(targetAnimation.animation);\r\n                        if (animationInfo) {\r\n                            const babylonTransformNode = this._IsTransformable(target) ? target : this._IsTransformable(target[0]) ? target[0] : null;\r\n                            if (babylonTransformNode) {\r\n                                _GLTFAnimation._AddAnimation(\r\n                                    `${animation.name}`,\r\n                                    glTFAnimation,\r\n                                    babylonTransformNode,\r\n                                    animation,\r\n                                    animationInfo.dataAccessorType,\r\n                                    animationInfo.animationChannelTargetPath,\r\n                                    nodeMap,\r\n                                    binaryWriter,\r\n                                    bufferViews,\r\n                                    accessors,\r\n                                    animationInfo.useQuaternion,\r\n                                    animationSampleRate\r\n                                );\r\n                            }\r\n                        }\r\n                    } else if (target instanceof MorphTarget || (target.length === 1 && target[0] instanceof MorphTarget)) {\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(targetAnimation.animation);\r\n                        if (animationInfo) {\r\n                            const babylonMorphTarget = target instanceof MorphTarget ? (target as MorphTarget) : (target[0] as MorphTarget);\r\n                            if (babylonMorphTarget) {\r\n                                const babylonMorphTargetManager = babylonScene.morphTargetManagers.find((morphTargetManager) => {\r\n                                    for (let j = 0; j < morphTargetManager.numTargets; ++j) {\r\n                                        if (morphTargetManager.getTarget(j) === babylonMorphTarget) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                    return false;\r\n                                });\r\n                                if (babylonMorphTargetManager) {\r\n                                    const babylonMesh = babylonScene.meshes.find((mesh) => {\r\n                                        return (mesh as Mesh).morphTargetManager === babylonMorphTargetManager;\r\n                                    }) as Mesh;\r\n                                    if (babylonMesh) {\r\n                                        if (!morphAnimations.has(babylonMesh)) {\r\n                                            morphAnimations.set(babylonMesh, new Map());\r\n                                        }\r\n                                        morphAnimations.get(babylonMesh)?.set(babylonMorphTarget, animation);\r\n                                        morphAnimationMeshes.add(babylonMesh);\r\n                                        sampleAnimations.set(babylonMesh, animation);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // this is the place for the KHR_animation_pointer.\r\n                    }\r\n                }\r\n                morphAnimationMeshes.forEach((mesh) => {\r\n                    const morphTargetManager = mesh.morphTargetManager!;\r\n                    let combinedAnimationGroup: Nullable<Animation> = null;\r\n                    const animationKeys: IAnimationKey[] = [];\r\n                    const sampleAnimation = sampleAnimations.get(mesh)!;\r\n                    const sampleAnimationKeys = sampleAnimation.getKeys();\r\n                    const numAnimationKeys = sampleAnimationKeys.length;\r\n                    /*\r\n                        Due to how glTF expects morph target animation data to be formatted, we need to rearrange the individual morph target animation tracks,\r\n                        such that we have a single animation, where a given keyframe input value has successive output values for each morph target belonging to the manager.\r\n                        See: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\r\n\r\n                        We do this via constructing a new Animation track, and interleaving the frames of each morph target animation track in the current Animation Group\r\n                        We reuse the Babylon Animation data structure for ease of handling export of cubic spline animation keys, and to reuse the\r\n                        existing _GLTFAnimation.AddAnimation codepath with minimal modification, however the constructed Babylon Animation is NOT intended for use in-engine.\r\n                    */\r\n                    for (let i = 0; i < numAnimationKeys; ++i) {\r\n                        for (let j = 0; j < morphTargetManager.numTargets; ++j) {\r\n                            const morphTarget = morphTargetManager.getTarget(j);\r\n                            const animationsByMorphTarget = morphAnimations.get(mesh);\r\n                            if (animationsByMorphTarget) {\r\n                                const morphTargetAnimation = animationsByMorphTarget.get(morphTarget);\r\n                                if (morphTargetAnimation) {\r\n                                    if (!combinedAnimationGroup) {\r\n                                        combinedAnimationGroup = new Animation(\r\n                                            `${animationGroup.name}_${mesh.name}_MorphWeightAnimation`,\r\n                                            \"influence\",\r\n                                            morphTargetAnimation.framePerSecond,\r\n                                            Animation.ANIMATIONTYPE_FLOAT,\r\n                                            morphTargetAnimation.loopMode,\r\n                                            morphTargetAnimation.enableBlending\r\n                                        );\r\n                                    }\r\n                                    animationKeys.push(morphTargetAnimation.getKeys()[i]);\r\n                                } else {\r\n                                    animationKeys.push({\r\n                                        frame: animationGroup.from + (animationGroupFrameDiff / numAnimationKeys) * i,\r\n                                        value: morphTarget.influence,\r\n                                        inTangent: sampleAnimationKeys[0].inTangent ? 0 : undefined,\r\n                                        outTangent: sampleAnimationKeys[0].outTangent ? 0 : undefined,\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    combinedAnimationGroup!.setKeys(animationKeys);\r\n                    const animationInfo = _GLTFAnimation._DeduceAnimationInfo(combinedAnimationGroup!);\r\n                    if (animationInfo) {\r\n                        _GLTFAnimation._AddAnimation(\r\n                            `${animationGroup.name}_${mesh.name}_MorphWeightAnimation`,\r\n                            glTFAnimation,\r\n                            mesh,\r\n                            combinedAnimationGroup!,\r\n                            animationInfo.dataAccessorType,\r\n                            animationInfo.animationChannelTargetPath,\r\n                            nodeMap,\r\n                            binaryWriter,\r\n                            bufferViews,\r\n                            accessors,\r\n                            animationInfo.useQuaternion,\r\n                            animationSampleRate,\r\n                            morphTargetManager?.numTargets\r\n                        );\r\n                    }\r\n                });\r\n                if (glTFAnimation.channels.length && glTFAnimation.samplers.length) {\r\n                    glTFAnimations.push(glTFAnimation);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _AddAnimation(\r\n        name: string,\r\n        glTFAnimation: IAnimation,\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        dataAccessorType: AccessorType,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        nodeMap: { [key: number]: number },\r\n        binaryWriter: _BinaryWriter,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        useQuaternion: boolean,\r\n        animationSampleRate: number,\r\n        morphAnimationChannels?: number\r\n    ) {\r\n        const animationData = _GLTFAnimation._CreateNodeAnimation(babylonTransformNode, animation, animationChannelTargetPath, useQuaternion, animationSampleRate);\r\n        let bufferView: IBufferView;\r\n        let accessor: IAccessor;\r\n        let keyframeAccessorIndex: number;\r\n        let dataAccessorIndex: number;\r\n        let outputLength: number;\r\n        let animationSampler: IAnimationSampler;\r\n        let animationChannel: IAnimationChannel;\r\n\r\n        if (animationData) {\r\n            /*\r\n             * Now that we have the glTF converted morph target animation data,\r\n             * we can remove redundant input data so that we have n input frames,\r\n             * and morphAnimationChannels * n output frames\r\n             */\r\n            if (morphAnimationChannels) {\r\n                let index = 0;\r\n                let currentInput: number = 0;\r\n                const newInputs: number[] = [];\r\n                while (animationData.inputs.length > 0) {\r\n                    currentInput = animationData.inputs.shift()!;\r\n                    if (index % morphAnimationChannels == 0) {\r\n                        newInputs.push(currentInput);\r\n                    }\r\n                    index++;\r\n                }\r\n                animationData.inputs = newInputs;\r\n            }\r\n\r\n            const nodeIndex = nodeMap[babylonTransformNode.uniqueId];\r\n\r\n            // Creates buffer view and accessor for key frames.\r\n            let byteLength = animationData.inputs.length * 4;\r\n            bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, undefined, `${name}  keyframe data view`);\r\n            bufferViews.push(bufferView);\r\n            animationData.inputs.forEach(function (input) {\r\n                binaryWriter.setFloat32(input);\r\n            });\r\n\r\n            accessor = _GLTFUtilities._CreateAccessor(\r\n                bufferViews.length - 1,\r\n                `${name}  keyframes`,\r\n                AccessorType.SCALAR,\r\n                AccessorComponentType.FLOAT,\r\n                animationData.inputs.length,\r\n                null,\r\n                [animationData.inputsMin],\r\n                [animationData.inputsMax]\r\n            );\r\n            accessors.push(accessor);\r\n            keyframeAccessorIndex = accessors.length - 1;\r\n\r\n            // create bufferview and accessor for keyed values.\r\n            outputLength = animationData.outputs.length;\r\n            byteLength = _GLTFUtilities._GetDataAccessorElementCount(dataAccessorType) * 4 * animationData.outputs.length;\r\n\r\n            // check for in and out tangents\r\n            bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, undefined, `${name}  data view`);\r\n            bufferViews.push(bufferView);\r\n\r\n            animationData.outputs.forEach(function (output) {\r\n                output.forEach(function (entry) {\r\n                    binaryWriter.setFloat32(entry);\r\n                });\r\n            });\r\n\r\n            accessor = _GLTFUtilities._CreateAccessor(bufferViews.length - 1, `${name}  data`, dataAccessorType, AccessorComponentType.FLOAT, outputLength, null, null, null);\r\n            accessors.push(accessor);\r\n            dataAccessorIndex = accessors.length - 1;\r\n\r\n            // create sampler\r\n            animationSampler = {\r\n                interpolation: animationData.samplerInterpolation,\r\n                input: keyframeAccessorIndex,\r\n                output: dataAccessorIndex,\r\n            };\r\n            glTFAnimation.samplers.push(animationSampler);\r\n\r\n            // create channel\r\n            animationChannel = {\r\n                sampler: glTFAnimation.samplers.length - 1,\r\n                target: {\r\n                    node: nodeIndex,\r\n                    path: animationChannelTargetPath,\r\n                },\r\n            };\r\n            glTFAnimation.channels.push(animationChannel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a baked animation\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation corresponding to the BabylonJS mesh\r\n     * @param animationChannelTargetPath animation target channel\r\n     * @param minFrame minimum animation frame\r\n     * @param maxFrame maximum animation frame\r\n     * @param fps frames per second of the animation\r\n     * @param sampleRate\r\n     * @param inputs input key frames of the animation\r\n     * @param outputs output key frame data of the animation\r\n     * @param minMaxFrames\r\n     * @param minMaxFrames.min\r\n     * @param minMaxFrames.max\r\n     * @param useQuaternion specifies if quaternions should be used\r\n     */\r\n    private static _CreateBakedAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        minFrame: number,\r\n        maxFrame: number,\r\n        fps: number,\r\n        sampleRate: number,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        minMaxFrames: { min: number; max: number },\r\n        useQuaternion: boolean\r\n    ) {\r\n        let value: number | Vector3 | Quaternion;\r\n        const quaternionCache: Quaternion = Quaternion.Identity();\r\n        let previousTime: Nullable<number> = null;\r\n        let time: number;\r\n        let maxUsedFrame: Nullable<number> = null;\r\n        let currKeyFrame: Nullable<IAnimationKey> = null;\r\n        let nextKeyFrame: Nullable<IAnimationKey> = null;\r\n        let prevKeyFrame: Nullable<IAnimationKey> = null;\r\n        let endFrame: Nullable<number> = null;\r\n        minMaxFrames.min = Tools.FloatRound(minFrame / fps);\r\n\r\n        const keyFrames = animation.getKeys();\r\n\r\n        for (let i = 0, length = keyFrames.length; i < length; ++i) {\r\n            endFrame = null;\r\n            currKeyFrame = keyFrames[i];\r\n\r\n            if (i + 1 < length) {\r\n                nextKeyFrame = keyFrames[i + 1];\r\n                if ((currKeyFrame.value.equals && currKeyFrame.value.equals(nextKeyFrame.value)) || currKeyFrame.value === nextKeyFrame.value) {\r\n                    if (i === 0) {\r\n                        // set the first frame to itself\r\n                        endFrame = currKeyFrame.frame;\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    endFrame = nextKeyFrame.frame;\r\n                }\r\n            } else {\r\n                // at the last key frame\r\n                prevKeyFrame = keyFrames[i - 1];\r\n                if ((currKeyFrame.value.equals && currKeyFrame.value.equals(prevKeyFrame.value)) || currKeyFrame.value === prevKeyFrame.value) {\r\n                    continue;\r\n                } else {\r\n                    endFrame = maxFrame;\r\n                }\r\n            }\r\n            if (endFrame) {\r\n                for (let f = currKeyFrame.frame; f <= endFrame; f += sampleRate) {\r\n                    time = Tools.FloatRound(f / fps);\r\n                    if (time === previousTime) {\r\n                        continue;\r\n                    }\r\n                    previousTime = time;\r\n                    maxUsedFrame = time;\r\n                    const state = {\r\n                        key: 0,\r\n                        repeatCount: 0,\r\n                        loopMode: animation.loopMode,\r\n                    };\r\n                    value = animation._interpolate(f, state);\r\n\r\n                    _GLTFAnimation._SetInterpolatedValue(babylonTransformNode, value, time, animation, animationChannelTargetPath, quaternionCache, inputs, outputs, useQuaternion);\r\n                }\r\n            }\r\n        }\r\n        if (maxUsedFrame) {\r\n            minMaxFrames.max = maxUsedFrame;\r\n        }\r\n    }\r\n\r\n    private static _ConvertFactorToVector3OrQuaternion(\r\n        factor: number,\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean\r\n    ): Vector3 | Quaternion {\r\n        const basePositionRotationOrScale = _GLTFAnimation._GetBasePositionRotationOrScale(babylonTransformNode, animationChannelTargetPath, useQuaternion);\r\n        // handles single component x, y, z or w component animation by using a base property and animating over a component.\r\n        const property = animation.targetProperty.split(\".\");\r\n        const componentName = property ? property[1] : \"\"; // x, y, z, or w component\r\n        const value = useQuaternion ? Quaternion.FromArray(basePositionRotationOrScale).normalize() : Vector3.FromArray(basePositionRotationOrScale);\r\n\r\n        switch (componentName) {\r\n            case \"x\":\r\n            case \"y\":\r\n            case \"z\": {\r\n                value[componentName] = factor;\r\n                break;\r\n            }\r\n            case \"w\": {\r\n                (value as Quaternion).w = factor;\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Error(`glTFAnimation: Unsupported component name \"${componentName}\"!`);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private static _SetInterpolatedValue(\r\n        babylonTransformNode: Node,\r\n        value: number | Vector3 | Quaternion,\r\n        time: number,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        quaternionCache: Quaternion,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        let cacheValue: Vector3 | Quaternion | number;\r\n        inputs.push(time);\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n            outputs.push([value as number]);\r\n            return;\r\n        }\r\n\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_FLOAT) {\r\n            value = this._ConvertFactorToVector3OrQuaternion(value as number, babylonTransformNode, animation, animationChannelTargetPath, useQuaternion);\r\n        }\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n            if (useQuaternion) {\r\n                quaternionCache = value as Quaternion;\r\n            } else {\r\n                cacheValue = value as Vector3;\r\n                Quaternion.RotationYawPitchRollToRef(cacheValue.y, cacheValue.x, cacheValue.z, quaternionCache);\r\n            }\r\n            outputs.push(quaternionCache.asArray());\r\n        } else {\r\n            // scaling and position animation\r\n            cacheValue = value as Vector3;\r\n            outputs.push(cacheValue.asArray());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates linear animation from the animation key frames\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param inputs Array to store the key frame times\r\n     * @param outputs Array to store the key frame data\r\n     * @param useQuaternion Specifies if quaternions are used in the animation\r\n     */\r\n    private static _CreateLinearOrStepAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        for (const keyFrame of animation.getKeys()) {\r\n            inputs.push(keyFrame.frame / animation.framePerSecond); // keyframes in seconds.\r\n            _GLTFAnimation._AddKeyframeValue(keyFrame, animation, outputs, animationChannelTargetPath, babylonTransformNode, useQuaternion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates cubic spline animation from the animation key frames\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param inputs Array to store the key frame times\r\n     * @param outputs Array to store the key frame data\r\n     * @param useQuaternion Specifies if quaternions are used in the animation\r\n     */\r\n    private static _CreateCubicSplineAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        animation.getKeys().forEach(function (keyFrame) {\r\n            inputs.push(keyFrame.frame / animation.framePerSecond); // keyframes in seconds.\r\n            _GLTFAnimation._AddSplineTangent(_TangentType.INTANGENT, outputs, animationChannelTargetPath, AnimationSamplerInterpolation.CUBICSPLINE, keyFrame, useQuaternion);\r\n            _GLTFAnimation._AddKeyframeValue(keyFrame, animation, outputs, animationChannelTargetPath, babylonTransformNode, useQuaternion);\r\n\r\n            _GLTFAnimation._AddSplineTangent(_TangentType.OUTTANGENT, outputs, animationChannelTargetPath, AnimationSamplerInterpolation.CUBICSPLINE, keyFrame, useQuaternion);\r\n        });\r\n    }\r\n\r\n    private static _GetBasePositionRotationOrScale(babylonTransformNode: Node, animationChannelTargetPath: AnimationChannelTargetPath, useQuaternion: boolean) {\r\n        let basePositionRotationOrScale: number[];\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n            if (useQuaternion) {\r\n                const q = (babylonTransformNode as TransformNode).rotationQuaternion;\r\n                basePositionRotationOrScale = (q ?? Quaternion.Identity()).asArray();\r\n            } else {\r\n                const r: Vector3 = (babylonTransformNode as TransformNode).rotation;\r\n                basePositionRotationOrScale = (r ?? Vector3.Zero()).asArray();\r\n            }\r\n        } else if (animationChannelTargetPath === AnimationChannelTargetPath.TRANSLATION) {\r\n            const p: Vector3 = (babylonTransformNode as TransformNode).position;\r\n            basePositionRotationOrScale = (p ?? Vector3.Zero()).asArray();\r\n        } else {\r\n            // scale\r\n            const s: Vector3 = (babylonTransformNode as TransformNode).scaling;\r\n            basePositionRotationOrScale = (s ?? Vector3.One()).asArray();\r\n        }\r\n        return basePositionRotationOrScale;\r\n    }\r\n\r\n    /**\r\n     * Adds a key frame value\r\n     * @param keyFrame\r\n     * @param animation\r\n     * @param outputs\r\n     * @param animationChannelTargetPath\r\n     * @param babylonTransformNode\r\n     * @param useQuaternion\r\n     */\r\n    private static _AddKeyframeValue(\r\n        keyFrame: IAnimationKey,\r\n        animation: Animation,\r\n        outputs: number[][],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        babylonTransformNode: Node,\r\n        useQuaternion: boolean\r\n    ) {\r\n        let newPositionRotationOrScale: Nullable<Vector3 | Quaternion | number>;\r\n        const animationType = animation.dataType;\r\n        if (animationType === Animation.ANIMATIONTYPE_VECTOR3) {\r\n            let value = keyFrame.value.asArray();\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                const array = Vector3.FromArray(value);\r\n                const rotationQuaternion = Quaternion.RotationYawPitchRoll(array.y, array.x, array.z);\r\n                value = rotationQuaternion.asArray();\r\n            }\r\n            outputs.push(value); // scale  vector.\r\n        } else if (animationType === Animation.ANIMATIONTYPE_FLOAT) {\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n                outputs.push([keyFrame.value]);\r\n            } else {\r\n                // handles single component x, y, z or w component animation by using a base property and animating over a component.\r\n                newPositionRotationOrScale = this._ConvertFactorToVector3OrQuaternion(\r\n                    keyFrame.value as number,\r\n                    babylonTransformNode,\r\n                    animation,\r\n                    animationChannelTargetPath,\r\n                    useQuaternion\r\n                );\r\n                if (newPositionRotationOrScale) {\r\n                    if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                        const posRotScale = useQuaternion\r\n                            ? (newPositionRotationOrScale as Quaternion)\r\n                            : Quaternion.RotationYawPitchRoll(newPositionRotationOrScale.y, newPositionRotationOrScale.x, newPositionRotationOrScale.z).normalize();\r\n                        outputs.push(posRotScale.asArray());\r\n                    }\r\n                    outputs.push(newPositionRotationOrScale.asArray());\r\n                }\r\n            }\r\n        } else if (animationType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            outputs.push((keyFrame.value as Quaternion).normalize().asArray());\r\n        } else {\r\n            Tools.Error(\"glTFAnimation: Unsupported key frame values for animation!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Determine the interpolation based on the key frames\r\n     * @param keyFrames\r\n     * @param animationChannelTargetPath\r\n     * @param useQuaternion\r\n     */\r\n    private static _DeduceInterpolation(\r\n        keyFrames: IAnimationKey[],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean\r\n    ): { interpolationType: AnimationSamplerInterpolation; shouldBakeAnimation: boolean } {\r\n        let interpolationType: AnimationSamplerInterpolation | undefined;\r\n        let shouldBakeAnimation = false;\r\n        let key: IAnimationKey;\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION && !useQuaternion) {\r\n            return { interpolationType: AnimationSamplerInterpolation.LINEAR, shouldBakeAnimation: true };\r\n        }\r\n\r\n        for (let i = 0, length = keyFrames.length; i < length; ++i) {\r\n            key = keyFrames[i];\r\n            if (key.inTangent || key.outTangent) {\r\n                if (interpolationType) {\r\n                    if (interpolationType !== AnimationSamplerInterpolation.CUBICSPLINE) {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                        shouldBakeAnimation = true;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    interpolationType = AnimationSamplerInterpolation.CUBICSPLINE;\r\n                }\r\n            } else {\r\n                if (interpolationType) {\r\n                    if (\r\n                        interpolationType === AnimationSamplerInterpolation.CUBICSPLINE ||\r\n                        (key.interpolation && key.interpolation === AnimationKeyInterpolation.STEP && interpolationType !== AnimationSamplerInterpolation.STEP)\r\n                    ) {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                        shouldBakeAnimation = true;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (key.interpolation && key.interpolation === AnimationKeyInterpolation.STEP) {\r\n                        interpolationType = AnimationSamplerInterpolation.STEP;\r\n                    } else {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!interpolationType) {\r\n            interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n        }\r\n\r\n        return { interpolationType: interpolationType, shouldBakeAnimation: shouldBakeAnimation };\r\n    }\r\n\r\n    /**\r\n     * Adds an input tangent or output tangent to the output data\r\n     * If an input tangent or output tangent is missing, it uses the zero vector or zero quaternion\r\n     * @param tangentType Specifies which type of tangent to handle (inTangent or outTangent)\r\n     * @param outputs The animation data by keyframe\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param interpolation The interpolation type\r\n     * @param keyFrame The key frame with the animation data\r\n     * @param useQuaternion Specifies if quaternions are used\r\n     */\r\n    private static _AddSplineTangent(\r\n        tangentType: _TangentType,\r\n        outputs: number[][],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        interpolation: AnimationSamplerInterpolation,\r\n        keyFrame: IAnimationKey,\r\n        useQuaternion: boolean\r\n    ) {\r\n        let tangent: number[];\r\n        const tangentValue: Vector3 | Quaternion | number = tangentType === _TangentType.INTANGENT ? keyFrame.inTangent : keyFrame.outTangent;\r\n        if (interpolation === AnimationSamplerInterpolation.CUBICSPLINE) {\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                if (tangentValue) {\r\n                    if (useQuaternion) {\r\n                        tangent = (tangentValue as Quaternion).asArray();\r\n                    } else {\r\n                        const array = tangentValue as Vector3;\r\n                        tangent = Quaternion.RotationYawPitchRoll(array.y, array.x, array.z).asArray();\r\n                    }\r\n                } else {\r\n                    tangent = [0, 0, 0, 0];\r\n                }\r\n            } else if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n                if (tangentValue) {\r\n                    tangent = [tangentValue as number];\r\n                } else {\r\n                    tangent = [0];\r\n                }\r\n            } else {\r\n                if (tangentValue) {\r\n                    tangent = (tangentValue as Vector3).asArray();\r\n                } else {\r\n                    tangent = [0, 0, 0];\r\n                }\r\n            }\r\n\r\n            outputs.push(tangent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the minimum and maximum key frames' frame values\r\n     * @param keyFrames animation key frames\r\n     * @returns the minimum and maximum key frame value\r\n     */\r\n    private static _CalculateMinMaxKeyFrames(keyFrames: IAnimationKey[]): { min: number; max: number } {\r\n        let min: number = Infinity;\r\n        let max: number = -Infinity;\r\n        keyFrames.forEach(function (keyFrame) {\r\n            min = Math.min(min, keyFrame.frame);\r\n            max = Math.max(max, keyFrame.frame);\r\n        });\r\n\r\n        return { min: min, max: max };\r\n    }\r\n}\r\n","import type { Nullable } from \"core/types\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\n/**\r\n * Class for generating OBJ data from a Babylon scene.\r\n */\r\nexport class OBJExport {\r\n    /**\r\n     * Exports the geometry of a Mesh array in .OBJ file format (text)\r\n     * @param meshes defines the list of meshes to serialize\r\n     * @param materials defines if materials should be exported\r\n     * @param matlibname defines the name of the associated mtl file\r\n     * @param globalposition defines if the exported positions are globals or local to the exported mesh\r\n     * @returns the OBJ content\r\n     */\r\n    public static OBJ(meshes: Mesh[], materials?: boolean, matlibname?: string, globalposition?: boolean): string {\r\n        const output: string[] = [];\r\n        let v = 1;\r\n        // keep track of uv index in case mixed meshes are passed in\r\n        let textureV = 1;\r\n\r\n        if (materials) {\r\n            if (!matlibname) {\r\n                matlibname = \"mat\";\r\n            }\r\n            output.push(\"mtllib \" + matlibname + \".mtl\");\r\n        }\r\n        for (let j = 0; j < meshes.length; j++) {\r\n            const objectName = meshes[j].name || `mesh${j}}`;\r\n            output.push(`o ${objectName}`);\r\n\r\n            //Uses the position of the item in the scene, to the file (this back to normal in the end)\r\n            let inverseTransform: Nullable<Matrix> = null;\r\n            if (globalposition) {\r\n                const transform = meshes[j].computeWorldMatrix(true);\r\n                inverseTransform = new Matrix();\r\n                transform.invertToRef(inverseTransform);\r\n\r\n                meshes[j].bakeTransformIntoVertices(transform);\r\n            }\r\n\r\n            //TODO: submeshes (groups)\r\n            //TODO: smoothing groups (s 1, s off);\r\n            if (materials) {\r\n                const mat = meshes[j].material;\r\n\r\n                if (mat) {\r\n                    output.push(\"usemtl \" + mat.id);\r\n                }\r\n            }\r\n            const g: Nullable<Geometry> = meshes[j].geometry;\r\n\r\n            if (!g) {\r\n                Tools.Warn(\"No geometry is present on the mesh\");\r\n                continue;\r\n            }\r\n\r\n            const trunkVerts = g.getVerticesData(\"position\");\r\n            const trunkNormals = g.getVerticesData(\"normal\");\r\n            const trunkUV = g.getVerticesData(\"uv\");\r\n            const trunkFaces = g.getIndices();\r\n            let currentV = 0;\r\n            let currentTextureV = 0;\r\n\r\n            if (!trunkVerts || !trunkFaces) {\r\n                Tools.Warn(\"There are no position vertices or indices on the mesh!\");\r\n                continue;\r\n            }\r\n\r\n            const useRightHandedSystem = meshes[0].getScene().useRightHandedSystem;\r\n            const handednessSign = useRightHandedSystem ? 1 : -1;\r\n\r\n            for (let i = 0; i < trunkVerts.length; i += 3) {\r\n                output.push(\"v \" + trunkVerts[i] * handednessSign + \" \" + trunkVerts[i + 1] + \" \" + trunkVerts[i + 2]);\r\n                currentV++;\r\n            }\r\n\r\n            if (trunkNormals != null) {\r\n                for (let i = 0; i < trunkNormals.length; i += 3) {\r\n                    output.push(\"vn \" + trunkNormals[i] * handednessSign + \" \" + trunkNormals[i + 1] + \" \" + trunkNormals[i + 2]);\r\n                }\r\n            }\r\n            if (trunkUV != null) {\r\n                for (let i = 0; i < trunkUV.length; i += 2) {\r\n                    output.push(\"vt \" + trunkUV[i] + \" \" + trunkUV[i + 1]);\r\n                    currentTextureV++;\r\n                }\r\n            }\r\n\r\n            const blanks: string[] = [\"\", \"\", \"\"];\r\n            const [offset1, offset2] = useRightHandedSystem ? [2, 1] : [1, 2];\r\n\r\n            for (let i = 0; i < trunkFaces.length; i += 3) {\r\n                const indices = [String(trunkFaces[i] + v), String(trunkFaces[i + offset1] + v), String(trunkFaces[i + offset2] + v)];\r\n                const textureIndices = [String(trunkFaces[i] + textureV), String(trunkFaces[i + offset1] + textureV), String(trunkFaces[i + offset2] + textureV)];\r\n\r\n                const facePositions = indices;\r\n                const faceUVs = trunkUV != null ? textureIndices : blanks;\r\n                const faceNormals = trunkNormals != null ? indices : blanks;\r\n\r\n                output.push(\r\n                    \"f \" +\r\n                        facePositions[0] +\r\n                        \"/\" +\r\n                        faceUVs[0] +\r\n                        \"/\" +\r\n                        faceNormals[0] +\r\n                        \" \" +\r\n                        facePositions[1] +\r\n                        \"/\" +\r\n                        faceUVs[1] +\r\n                        \"/\" +\r\n                        faceNormals[1] +\r\n                        \" \" +\r\n                        facePositions[2] +\r\n                        \"/\" +\r\n                        faceUVs[2] +\r\n                        \"/\" +\r\n                        faceNormals[2]\r\n                );\r\n            }\r\n            //back de previous matrix, to not change the original mesh in the scene\r\n            if (globalposition && inverseTransform) {\r\n                meshes[j].bakeTransformIntoVertices(inverseTransform);\r\n            }\r\n            v += currentV;\r\n            textureV += currentTextureV;\r\n        }\r\n        const text: string = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Exports the material(s) of a mesh in .MTL file format (text)\r\n     * @param mesh defines the mesh to extract the material from\r\n     * @returns the mtl content\r\n     */\r\n    //TODO: Export the materials of mesh array\r\n    public static MTL(mesh: Mesh): string {\r\n        const output = [];\r\n        const m = <StandardMaterial>mesh.material;\r\n        output.push(\"newmtl mat1\");\r\n        output.push(\"  Ns \" + m.specularPower.toFixed(4));\r\n        output.push(\"  Ni 1.5000\");\r\n        output.push(\"  d \" + m.alpha.toFixed(4));\r\n        output.push(\"  Tr 0.0000\");\r\n        output.push(\"  Tf 1.0000 1.0000 1.0000\");\r\n        output.push(\"  illum 2\");\r\n        output.push(\"  Ka \" + m.ambientColor.r.toFixed(4) + \" \" + m.ambientColor.g.toFixed(4) + \" \" + m.ambientColor.b.toFixed(4));\r\n        output.push(\"  Kd \" + m.diffuseColor.r.toFixed(4) + \" \" + m.diffuseColor.g.toFixed(4) + \" \" + m.diffuseColor.b.toFixed(4));\r\n        output.push(\"  Ks \" + m.specularColor.r.toFixed(4) + \" \" + m.specularColor.g.toFixed(4) + \" \" + m.specularColor.b.toFixed(4));\r\n        output.push(\"  Ke \" + m.emissiveColor.r.toFixed(4) + \" \" + m.emissiveColor.g.toFixed(4) + \" \" + m.emissiveColor.b.toFixed(4));\r\n\r\n        //TODO: uv scale, offset, wrap\r\n        //TODO: UV mirrored in Blender? second UV channel? lightMap? reflection textures?\r\n        const uvscale = \"\";\r\n\r\n        if (m.ambientTexture) {\r\n            output.push(\"  map_Ka \" + uvscale + m.ambientTexture.name);\r\n        }\r\n\r\n        if (m.diffuseTexture) {\r\n            output.push(\"  map_Kd \" + uvscale + m.diffuseTexture.name);\r\n            //TODO: alpha testing, opacity in diffuse texture alpha channel (diffuseTexture.hasAlpha -> map_d)\r\n        }\r\n\r\n        if (m.specularTexture) {\r\n            output.push(\"  map_Ks \" + uvscale + m.specularTexture.name);\r\n            /* TODO: glossiness = specular highlight component is in alpha channel of specularTexture. (???)\r\n            if (m.useGlossinessFromSpecularMapAlpha)  {\r\n                output.push(\"  map_Ns \"+uvscale + m.specularTexture.name);\r\n            }\r\n            */\r\n        }\r\n\r\n        /* TODO: emissive texture not in .MAT format (???)\r\n        if (m.emissiveTexture) {\r\n            output.push(\"  map_d \"+uvscale+m.emissiveTexture.name);\r\n        }\r\n        */\r\n\r\n        if (m.bumpTexture) {\r\n            output.push(\"  map_bump -imfchan z \" + uvscale + m.bumpTexture.name);\r\n        }\r\n\r\n        if (m.opacityTexture) {\r\n            output.push(\"  map_d \" + uvscale + m.opacityTexture.name);\r\n        }\r\n\r\n        const text = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n}\r\n","/** @internal */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var __IGLTFExporterExtension = 0; // I am here to allow dts to be created\r\n\r\n/**\r\n * Interface for extending the exporter\r\n * @internal\r\n */\r\nexport interface IGLTFExporterExtension {\r\n    /**\r\n     * The name of this extension\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * Defines whether this extension is enabled\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines whether this extension is required\r\n     */\r\n    required: boolean;\r\n}\r\n","import type { IBufferView, AccessorComponentType, IAccessor } from \"babylonjs-gltf2interface\";\r\nimport { AccessorType } from \"babylonjs-gltf2interface\";\r\n\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport type { Vector4 } from \"core/Maths/math.vector\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class _GLTFUtilities {\r\n    /**\r\n     * Creates a buffer view based on the supplied arguments\r\n     * @param bufferIndex index value of the specified buffer\r\n     * @param byteOffset byte offset value\r\n     * @param byteLength byte length of the bufferView\r\n     * @param byteStride byte distance between conequential elements\r\n     * @param name name of the buffer view\r\n     * @returns bufferView for glTF\r\n     */\r\n    public static _CreateBufferView(bufferIndex: number, byteOffset: number, byteLength: number, byteStride?: number, name?: string): IBufferView {\r\n        const bufferview: IBufferView = { buffer: bufferIndex, byteLength: byteLength };\r\n        if (byteOffset) {\r\n            bufferview.byteOffset = byteOffset;\r\n        }\r\n        if (name) {\r\n            bufferview.name = name;\r\n        }\r\n        if (byteStride) {\r\n            bufferview.byteStride = byteStride;\r\n        }\r\n\r\n        return bufferview;\r\n    }\r\n\r\n    /**\r\n     * Creates an accessor based on the supplied arguments\r\n     * @param bufferviewIndex The index of the bufferview referenced by this accessor\r\n     * @param name The name of the accessor\r\n     * @param type The type of the accessor\r\n     * @param componentType The datatype of components in the attribute\r\n     * @param count The number of attributes referenced by this accessor\r\n     * @param byteOffset The offset relative to the start of the bufferView in bytes\r\n     * @param min Minimum value of each component in this attribute\r\n     * @param max Maximum value of each component in this attribute\r\n     * @returns accessor for glTF\r\n     */\r\n    public static _CreateAccessor(\r\n        bufferviewIndex: number,\r\n        name: string,\r\n        type: AccessorType,\r\n        componentType: AccessorComponentType,\r\n        count: number,\r\n        byteOffset: Nullable<number>,\r\n        min: Nullable<number[]>,\r\n        max: Nullable<number[]>\r\n    ): IAccessor {\r\n        const accessor: IAccessor = { name: name, bufferView: bufferviewIndex, componentType: componentType, count: count, type: type };\r\n\r\n        if (min != null) {\r\n            accessor.min = min;\r\n        }\r\n        if (max != null) {\r\n            accessor.max = max;\r\n        }\r\n        if (byteOffset != null) {\r\n            accessor.byteOffset = byteOffset;\r\n        }\r\n\r\n        return accessor;\r\n    }\r\n\r\n    /**\r\n     * Calculates the minimum and maximum values of an array of position floats\r\n     * @param positions Positions array of a mesh\r\n     * @param vertexStart Starting vertex offset to calculate min and max values\r\n     * @param vertexCount Number of vertices to check for min and max values\r\n     * @returns min number array and max number array\r\n     */\r\n    public static _CalculateMinMaxPositions(positions: FloatArray, vertexStart: number, vertexCount: number): { min: number[]; max: number[] } {\r\n        const min = [Infinity, Infinity, Infinity];\r\n        const max = [-Infinity, -Infinity, -Infinity];\r\n        const positionStrideSize = 3;\r\n        let indexOffset: number;\r\n        let position: Vector3;\r\n        let vector: number[];\r\n\r\n        if (vertexCount) {\r\n            for (let i = vertexStart, length = vertexStart + vertexCount; i < length; ++i) {\r\n                indexOffset = positionStrideSize * i;\r\n\r\n                position = Vector3.FromArray(positions, indexOffset);\r\n                vector = position.asArray();\r\n\r\n                for (let j = 0; j < positionStrideSize; ++j) {\r\n                    const num = vector[j];\r\n                    if (num < min[j]) {\r\n                        min[j] = num;\r\n                    }\r\n                    if (num > max[j]) {\r\n                        max[j] = num;\r\n                    }\r\n                    ++indexOffset;\r\n                }\r\n            }\r\n        }\r\n        return { min, max };\r\n    }\r\n\r\n    public static _NormalizeTangentFromRef(tangent: Vector4) {\r\n        const length = Math.sqrt(tangent.x * tangent.x + tangent.y * tangent.y + tangent.z * tangent.z);\r\n        if (length > 0) {\r\n            tangent.x /= length;\r\n            tangent.y /= length;\r\n            tangent.z /= length;\r\n        }\r\n    }\r\n\r\n    public static _GetDataAccessorElementCount(accessorType: AccessorType) {\r\n        switch (accessorType) {\r\n            case AccessorType.MAT2:\r\n                return 4;\r\n            case AccessorType.MAT3:\r\n                return 9;\r\n            case AccessorType.MAT4:\r\n                return 16;\r\n            case AccessorType.SCALAR:\r\n                return 1;\r\n            case AccessorType.VEC2:\r\n                return 2;\r\n            case AccessorType.VEC3:\r\n                return 3;\r\n            case AccessorType.VEC4:\r\n                return 4;\r\n        }\r\n    }\r\n}\r\n","import { ImageMimeType } from \"babylonjs-gltf2interface\";\r\n\r\n/**\r\n * Class for holding and downloading glTF file data\r\n */\r\nexport class GLTFData {\r\n    /**\r\n     * Object which contains the file name as the key and its data as the value\r\n     */\r\n    glTFFiles: { [fileName: string]: string | Blob };\r\n\r\n    /**\r\n     * Initializes the glTF file object\r\n     */\r\n    public constructor() {\r\n        this.glTFFiles = {};\r\n    }\r\n\r\n    /**\r\n     * Downloads the glTF data as files based on their names and data\r\n     */\r\n    public downloadFiles(): void {\r\n        /**\r\n         * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n         * @param str Source string\r\n         * @param suffix Suffix to search for in the source string\r\n         * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n         */\r\n        function endsWith(str: string, suffix: string): boolean {\r\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n        }\r\n\r\n        for (const key in this.glTFFiles) {\r\n            const link = document.createElement(\"a\");\r\n            document.body.appendChild(link);\r\n            link.setAttribute(\"type\", \"hidden\");\r\n            link.download = key;\r\n            const blob = this.glTFFiles[key];\r\n            let mimeType;\r\n\r\n            if (endsWith(key, \".glb\")) {\r\n                mimeType = { type: \"model/gltf-binary\" };\r\n            } else if (endsWith(key, \".bin\")) {\r\n                mimeType = { type: \"application/octet-stream\" };\r\n            } else if (endsWith(key, \".gltf\")) {\r\n                mimeType = { type: \"model/gltf+json\" };\r\n            } else if (endsWith(key, \".jpeg\") || endsWith(key, \".jpg\")) {\r\n                mimeType = { type: ImageMimeType.JPEG };\r\n            } else if (endsWith(key, \".png\")) {\r\n                mimeType = { type: ImageMimeType.PNG };\r\n            }\r\n\r\n            link.href = window.URL.createObjectURL(new Blob([blob], mimeType));\r\n            link.click();\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","import type { ITextureInfo, IMaterial, IMaterialPbrMetallicRoughness, IMaterialOcclusionTextureInfo, ISampler, IMaterialExtension } from \"babylonjs-gltf2interface\";\r\nimport { ImageMimeType, MaterialAlphaMode, TextureMagFilter, TextureMinFilter, TextureWrapMode } from \"babylonjs-gltf2interface\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { TextureTools } from \"core/Misc/textureTools\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\r\n\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { _Exporter } from \"./glTFExporter\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { DumpTools } from \"core/Misc/dumpTools\";\r\n\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\n/**\r\n * Interface for storing specular glossiness factors\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ninterface _IPBRSpecularGlossiness {\r\n    /**\r\n     * Represents the linear diffuse factors of the material\r\n     */\r\n    diffuseColor: Color3;\r\n    /**\r\n     * Represents the linear specular factors of the material\r\n     */\r\n    specularColor: Color3;\r\n    /**\r\n     * Represents the smoothness of the material\r\n     */\r\n    glossiness: number;\r\n}\r\n\r\n/**\r\n * Interface for storing metallic roughness factors\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ninterface _IPBRMetallicRoughness {\r\n    /**\r\n     * Represents the albedo color of the material\r\n     */\r\n    baseColor: Color3;\r\n    /**\r\n     * Represents the metalness of the material\r\n     */\r\n    metallic: Nullable<number>;\r\n    /**\r\n     * Represents the roughness of the material\r\n     */\r\n    roughness: Nullable<number>;\r\n    /**\r\n     * The metallic roughness texture data\r\n     */\r\n    metallicRoughnessTextureData?: Nullable<ArrayBuffer>;\r\n    /**\r\n     * The base color texture data\r\n     */\r\n    baseColorTextureData?: Nullable<ArrayBuffer>;\r\n}\r\n\r\nfunction getFileExtensionFromMimeType(mimeType: ImageMimeType): string {\r\n    switch (mimeType) {\r\n        case ImageMimeType.JPEG:\r\n            return \".jpg\";\r\n        case ImageMimeType.PNG:\r\n            return \".png\";\r\n        case ImageMimeType.WEBP:\r\n            return \".webp\";\r\n        case ImageMimeType.AVIF:\r\n            return \".avif\";\r\n    }\r\n}\r\n\r\n/**\r\n * Utility methods for working with glTF material conversion properties.  This class should only be used internally\r\n * @internal\r\n */\r\nexport class _GLTFMaterialExporter {\r\n    /**\r\n     * Represents the dielectric specular values for R, G and B\r\n     */\r\n    private static readonly _DielectricSpecular: Color3 = new Color3(0.04, 0.04, 0.04);\r\n\r\n    /**\r\n     * Allows the maximum specular power to be defined for material calculations\r\n     */\r\n    private static readonly _MaxSpecularPower = 1024;\r\n\r\n    /**\r\n     * Mapping to store textures\r\n     */\r\n    private _textureMap: { [textureId: string]: ITextureInfo } = {};\r\n\r\n    // Mapping of internal textures to images to avoid exporting duplicate images.\r\n    private _internalTextureToImage: { [uniqueId: number]: { [mimeType: string]: Promise<number> } } = {};\r\n\r\n    /**\r\n     * Numeric tolerance value\r\n     */\r\n    private static readonly _Epsilon = 1e-6;\r\n\r\n    /**\r\n     * Reference to the glTF Exporter\r\n     */\r\n    private _exporter: _Exporter;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._textureMap = {};\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /**\r\n     * Specifies if two colors are approximately equal in value\r\n     * @param color1 first color to compare to\r\n     * @param color2 second color to compare to\r\n     * @param epsilon threshold value\r\n     * @returns boolean specifying if the colors are approximately equal in value\r\n     */\r\n    private static _FuzzyEquals(color1: Color3, color2: Color3, epsilon: number): boolean {\r\n        return Scalar.WithinEpsilon(color1.r, color2.r, epsilon) && Scalar.WithinEpsilon(color1.g, color2.g, epsilon) && Scalar.WithinEpsilon(color1.b, color2.b, epsilon);\r\n    }\r\n\r\n    /**\r\n     * Gets the materials from a Babylon scene and converts them to glTF materials\r\n     * @param exportMaterials\r\n     * @param mimeType texture mime type\r\n     * @param hasTextureCoords specifies if texture coordinates are present on the material\r\n     * @returns promise that resolves after all materials have been converted\r\n     */\r\n    public _convertMaterialsToGLTFAsync(exportMaterials: Set<Material>, mimeType: ImageMimeType, hasTextureCoords: boolean) {\r\n        const promises: Promise<IMaterial>[] = [];\r\n        exportMaterials.forEach((material) => {\r\n            if (material.getClassName() === \"StandardMaterial\") {\r\n                promises.push(this._convertStandardMaterialAsync(material as StandardMaterial, mimeType, hasTextureCoords));\r\n            } else if (material.getClassName().indexOf(\"PBR\") !== -1) {\r\n                promises.push(this._convertPBRMaterialAsync(material as PBRMaterial, mimeType, hasTextureCoords));\r\n            } else {\r\n                Tools.Warn(`Unsupported material type: ${material.name}`);\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {\r\n            /* do nothing */\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the glTF material without the texture parameters\r\n     * @param originalMaterial original glTF material\r\n     * @returns glTF material without texture parameters\r\n     */\r\n    public _stripTexturesFromMaterial(originalMaterial: IMaterial): IMaterial {\r\n        const newMaterial: IMaterial = {};\r\n        if (originalMaterial) {\r\n            newMaterial.name = originalMaterial.name;\r\n            newMaterial.doubleSided = originalMaterial.doubleSided;\r\n            newMaterial.alphaMode = originalMaterial.alphaMode;\r\n            newMaterial.alphaCutoff = originalMaterial.alphaCutoff;\r\n            newMaterial.emissiveFactor = originalMaterial.emissiveFactor;\r\n            const originalPBRMetallicRoughness = originalMaterial.pbrMetallicRoughness;\r\n            if (originalPBRMetallicRoughness) {\r\n                newMaterial.pbrMetallicRoughness = {};\r\n                newMaterial.pbrMetallicRoughness.baseColorFactor = originalPBRMetallicRoughness.baseColorFactor;\r\n                newMaterial.pbrMetallicRoughness.metallicFactor = originalPBRMetallicRoughness.metallicFactor;\r\n                newMaterial.pbrMetallicRoughness.roughnessFactor = originalPBRMetallicRoughness.roughnessFactor;\r\n            }\r\n        }\r\n        return newMaterial;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material has any texture parameters present\r\n     * @param material glTF Material\r\n     * @returns boolean specifying if texture parameters are present\r\n     */\r\n    public _hasTexturesPresent(material: IMaterial): boolean {\r\n        if (material.emissiveTexture || material.normalTexture || material.occlusionTexture) {\r\n            return true;\r\n        }\r\n        const pbrMat = material.pbrMetallicRoughness;\r\n        if (pbrMat) {\r\n            if (pbrMat.baseColorTexture || pbrMat.metallicRoughnessTexture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (material.extensions) {\r\n            for (const extension in material.extensions) {\r\n                const extensionObject = material.extensions[extension];\r\n                if (extensionObject as IMaterialExtension) {\r\n                    return extensionObject.hasTextures?.();\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _getTextureInfo(babylonTexture: Nullable<BaseTexture>): Nullable<ITextureInfo> {\r\n        if (babylonTexture) {\r\n            const textureUid = babylonTexture.uid;\r\n            if (textureUid in this._textureMap) {\r\n                return this._textureMap[textureUid];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Converts a Babylon StandardMaterial to a glTF Metallic Roughness Material\r\n     * @param babylonStandardMaterial\r\n     * @returns glTF Metallic Roughness Material representation\r\n     */\r\n    public _convertToGLTFPBRMetallicRoughness(babylonStandardMaterial: StandardMaterial): IMaterialPbrMetallicRoughness {\r\n        // Defines a cubic bezier curve where x is specular power and y is roughness\r\n        const P0 = new Vector2(0, 1);\r\n        const P1 = new Vector2(0, 0.1);\r\n        const P2 = new Vector2(0, 0.1);\r\n        const P3 = new Vector2(1300, 0.1);\r\n\r\n        /**\r\n         * Given the control points, solve for x based on a given t for a cubic bezier curve\r\n         * @param t a value between 0 and 1\r\n         * @param p0 first control point\r\n         * @param p1 second control point\r\n         * @param p2 third control point\r\n         * @param p3 fourth control point\r\n         * @returns number result of cubic bezier curve at the specified t\r\n         */\r\n        function cubicBezierCurve(t: number, p0: number, p1: number, p2: number, p3: number): number {\r\n            return (1 - t) * (1 - t) * (1 - t) * p0 + 3 * (1 - t) * (1 - t) * t * p1 + 3 * (1 - t) * t * t * p2 + t * t * t * p3;\r\n        }\r\n\r\n        /**\r\n         * Evaluates a specified specular power value to determine the appropriate roughness value,\r\n         * based on a pre-defined cubic bezier curve with specular on the abscissa axis (x-axis)\r\n         * and roughness on the ordinant axis (y-axis)\r\n         * @param specularPower specular power of standard material\r\n         * @returns Number representing the roughness value\r\n         */\r\n        function solveForRoughness(specularPower: number): number {\r\n            // Given P0.x = 0, P1.x = 0, P2.x = 0\r\n            //   x = t * t * t * P3.x\r\n            //   t = (x / P3.x)^(1/3)\r\n            const t = Math.pow(specularPower / P3.x, 0.333333);\r\n            return cubicBezierCurve(t, P0.y, P1.y, P2.y, P3.y);\r\n        }\r\n\r\n        const diffuse = babylonStandardMaterial.diffuseColor.toLinearSpace(babylonStandardMaterial.getScene().getEngine().useExactSrgbConversions).scale(0.5);\r\n        const opacity = babylonStandardMaterial.alpha;\r\n        const specularPower = Scalar.Clamp(babylonStandardMaterial.specularPower, 0, _GLTFMaterialExporter._MaxSpecularPower);\r\n\r\n        const roughness = solveForRoughness(specularPower);\r\n\r\n        const glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness = {\r\n            baseColorFactor: [diffuse.r, diffuse.g, diffuse.b, opacity],\r\n            metallicFactor: 0,\r\n            roughnessFactor: roughness,\r\n        };\r\n\r\n        return glTFPbrMetallicRoughness;\r\n    }\r\n\r\n    /**\r\n     * Computes the metallic factor\r\n     * @param diffuse diffused value\r\n     * @param specular specular value\r\n     * @param oneMinusSpecularStrength one minus the specular strength\r\n     * @returns metallic value\r\n     */\r\n    public static _SolveMetallic(diffuse: number, specular: number, oneMinusSpecularStrength: number): number {\r\n        if (specular < this._DielectricSpecular.r) {\r\n            this._DielectricSpecular;\r\n            return 0;\r\n        }\r\n\r\n        const a = this._DielectricSpecular.r;\r\n        const b = (diffuse * oneMinusSpecularStrength) / (1.0 - this._DielectricSpecular.r) + specular - 2.0 * this._DielectricSpecular.r;\r\n        const c = this._DielectricSpecular.r - specular;\r\n        const D = b * b - 4.0 * a * c;\r\n        return Scalar.Clamp((-b + Math.sqrt(D)) / (2.0 * a), 0, 1);\r\n    }\r\n\r\n    /**\r\n     * Sets the glTF alpha mode to a glTF material from the Babylon Material\r\n     * @param glTFMaterial glTF material\r\n     * @param babylonMaterial Babylon material\r\n     */\r\n    private static _SetAlphaMode(glTFMaterial: IMaterial, babylonMaterial: Material & { alphaCutOff: number }): void {\r\n        if (babylonMaterial.needAlphaBlending()) {\r\n            glTFMaterial.alphaMode = MaterialAlphaMode.BLEND;\r\n        } else if (babylonMaterial.needAlphaTesting()) {\r\n            glTFMaterial.alphaMode = MaterialAlphaMode.MASK;\r\n            glTFMaterial.alphaCutoff = babylonMaterial.alphaCutOff;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts a Babylon Standard Material to a glTF Material\r\n     * @param babylonStandardMaterial BJS Standard Material\r\n     * @param mimeType mime type to use for the textures\r\n     * @param hasTextureCoords specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns promise, resolved with the material\r\n     */\r\n    public _convertStandardMaterialAsync(babylonStandardMaterial: StandardMaterial, mimeType: ImageMimeType, hasTextureCoords: boolean): Promise<IMaterial> {\r\n        const materialMap = this._exporter._materialMap;\r\n        const materials = this._exporter._materials;\r\n        const promises = [];\r\n        const pbrMetallicRoughness = this._convertToGLTFPBRMetallicRoughness(babylonStandardMaterial);\r\n\r\n        const material: IMaterial = { name: babylonStandardMaterial.name };\r\n        if (babylonStandardMaterial.backFaceCulling != null && !babylonStandardMaterial.backFaceCulling) {\r\n            if (!babylonStandardMaterial.twoSidedLighting) {\r\n                Tools.Warn(babylonStandardMaterial.name + \": Back-face culling disabled and two-sided lighting disabled is not supported in glTF.\");\r\n            }\r\n            material.doubleSided = true;\r\n        }\r\n        if (hasTextureCoords) {\r\n            if (babylonStandardMaterial.diffuseTexture) {\r\n                promises.push(\r\n                    this._exportTextureAsync(babylonStandardMaterial.diffuseTexture, mimeType).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            pbrMetallicRoughness.baseColorTexture = textureInfo;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n            const bumpTexture = babylonStandardMaterial.bumpTexture;\r\n            if (bumpTexture) {\r\n                promises.push(\r\n                    this._exportTextureAsync(bumpTexture, mimeType).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            material.normalTexture = textureInfo;\r\n                            if (bumpTexture.level !== 1) {\r\n                                material.normalTexture.scale = bumpTexture.level;\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n            if (babylonStandardMaterial.emissiveTexture) {\r\n                material.emissiveFactor = [1.0, 1.0, 1.0];\r\n\r\n                promises.push(\r\n                    this._exportTextureAsync(babylonStandardMaterial.emissiveTexture, mimeType).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            material.emissiveTexture = textureInfo;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n            if (babylonStandardMaterial.ambientTexture) {\r\n                promises.push(\r\n                    this._exportTextureAsync(babylonStandardMaterial.ambientTexture, mimeType).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            const occlusionTexture: IMaterialOcclusionTextureInfo = {\r\n                                index: textureInfo.index,\r\n                            };\r\n                            material.occlusionTexture = occlusionTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        if (babylonStandardMaterial.alpha < 1.0 || babylonStandardMaterial.opacityTexture) {\r\n            if (babylonStandardMaterial.alphaMode === Constants.ALPHA_COMBINE) {\r\n                material.alphaMode = MaterialAlphaMode.BLEND;\r\n            } else {\r\n                Tools.Warn(babylonStandardMaterial.name + \": glTF 2.0 does not support alpha mode: \" + babylonStandardMaterial.alphaMode.toString());\r\n            }\r\n        }\r\n        if (babylonStandardMaterial.emissiveColor && !_GLTFMaterialExporter._FuzzyEquals(babylonStandardMaterial.emissiveColor, Color3.Black(), _GLTFMaterialExporter._Epsilon)) {\r\n            material.emissiveFactor = babylonStandardMaterial.emissiveColor.asArray();\r\n        }\r\n\r\n        material.pbrMetallicRoughness = pbrMetallicRoughness;\r\n        _GLTFMaterialExporter._SetAlphaMode(material, babylonStandardMaterial);\r\n\r\n        materials.push(material);\r\n        materialMap[babylonStandardMaterial.uniqueId] = materials.length - 1;\r\n\r\n        return this._finishMaterial(promises, material, babylonStandardMaterial, mimeType);\r\n    }\r\n\r\n    private _finishMaterial<T>(promises: Promise<T>[], glTFMaterial: IMaterial, babylonMaterial: Material, mimeType: ImageMimeType) {\r\n        return Promise.all(promises).then(() => {\r\n            const textures = this._exporter._extensionsPostExportMaterialAdditionalTextures(\"exportMaterial\", glTFMaterial, babylonMaterial);\r\n            let tasks: Nullable<Promise<Nullable<ITextureInfo>>[]> = null;\r\n\r\n            for (const texture of textures) {\r\n                if (!tasks) {\r\n                    tasks = [];\r\n                }\r\n                tasks.push(this._exportTextureAsync(texture, mimeType));\r\n            }\r\n\r\n            if (!tasks) {\r\n                tasks = [Promise.resolve(null)];\r\n            }\r\n\r\n            return Promise.all(tasks).then(() => {\r\n                const extensionWork = this._exporter._extensionsPostExportMaterialAsync(\"exportMaterial\", glTFMaterial, babylonMaterial);\r\n                if (!extensionWork) {\r\n                    return glTFMaterial;\r\n                }\r\n                return extensionWork.then(() => glTFMaterial);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts an image typed array buffer to a base64 image\r\n     * @param buffer typed array buffer\r\n     * @param width width of the image\r\n     * @param height height of the image\r\n     * @param mimeType mimetype of the image\r\n     * @returns base64 image string\r\n     */\r\n    private async _getImageDataAsync(buffer: Uint8Array | Float32Array, width: number, height: number, mimeType: ImageMimeType): Promise<ArrayBuffer> {\r\n        const textureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n\r\n        const hostingScene = this._exporter._babylonScene;\r\n        const engine = hostingScene.getEngine();\r\n\r\n        // Create a temporary texture with the texture buffer data\r\n        const tempTexture = engine.createRawTexture(buffer, width, height, Constants.TEXTUREFORMAT_RGBA, false, true, Texture.NEAREST_SAMPLINGMODE, null, textureType);\r\n\r\n        await TextureTools.ApplyPostProcess(\"pass\", tempTexture, hostingScene, textureType, Constants.TEXTURE_NEAREST_SAMPLINGMODE, Constants.TEXTUREFORMAT_RGBA);\r\n\r\n        const data = await engine._readTexturePixels(tempTexture, width, height);\r\n\r\n        return (await DumpTools.DumpDataAsync(width, height, data, mimeType, undefined, true, true)) as ArrayBuffer;\r\n    }\r\n\r\n    /**\r\n     * Generates a white texture based on the specified width and height\r\n     * @param width width of the texture in pixels\r\n     * @param height height of the texture in pixels\r\n     * @param scene babylonjs scene\r\n     * @returns white texture\r\n     */\r\n    private _createWhiteTexture(width: number, height: number, scene: Scene): Texture {\r\n        const data = new Uint8Array(width * height * 4);\r\n\r\n        for (let i = 0; i < data.length; i = i + 4) {\r\n            data[i] = data[i + 1] = data[i + 2] = data[i + 3] = 0xff;\r\n        }\r\n\r\n        const rawTexture = RawTexture.CreateRGBATexture(data, width, height, scene);\r\n\r\n        return rawTexture;\r\n    }\r\n\r\n    /**\r\n     * Resizes the two source textures to the same dimensions.  If a texture is null, a default white texture is generated.  If both textures are null, returns null\r\n     * @param texture1 first texture to resize\r\n     * @param texture2 second texture to resize\r\n     * @param scene babylonjs scene\r\n     * @returns resized textures or null\r\n     */\r\n    private _resizeTexturesToSameDimensions(texture1: Nullable<BaseTexture>, texture2: Nullable<BaseTexture>, scene: Scene): { texture1: BaseTexture; texture2: BaseTexture } {\r\n        const texture1Size = texture1 ? texture1.getSize() : { width: 0, height: 0 };\r\n        const texture2Size = texture2 ? texture2.getSize() : { width: 0, height: 0 };\r\n        let resizedTexture1: BaseTexture;\r\n        let resizedTexture2: BaseTexture;\r\n\r\n        if (texture1Size.width < texture2Size.width) {\r\n            if (texture1 && texture1 instanceof Texture) {\r\n                resizedTexture1 = TextureTools.CreateResizedCopy(texture1, texture2Size.width, texture2Size.height, true);\r\n            } else {\r\n                resizedTexture1 = this._createWhiteTexture(texture2Size.width, texture2Size.height, scene);\r\n            }\r\n            resizedTexture2 = texture2!;\r\n        } else if (texture1Size.width > texture2Size.width) {\r\n            if (texture2 && texture2 instanceof Texture) {\r\n                resizedTexture2 = TextureTools.CreateResizedCopy(texture2, texture1Size.width, texture1Size.height, true);\r\n            } else {\r\n                resizedTexture2 = this._createWhiteTexture(texture1Size.width, texture1Size.height, scene);\r\n            }\r\n            resizedTexture1 = texture1!;\r\n        } else {\r\n            resizedTexture1 = texture1!;\r\n            resizedTexture2 = texture2!;\r\n        }\r\n\r\n        return {\r\n            texture1: resizedTexture1!,\r\n            texture2: resizedTexture2!,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts an array of pixels to a Float32Array\r\n     * Throws an error if the pixel format is not supported\r\n     * @param pixels - array buffer containing pixel values\r\n     * @returns Float32 of pixels\r\n     */\r\n    private _convertPixelArrayToFloat32(pixels: ArrayBufferView): Float32Array {\r\n        if (pixels instanceof Uint8Array) {\r\n            const length = pixels.length;\r\n            const buffer = new Float32Array(pixels.length);\r\n            for (let i = 0; i < length; ++i) {\r\n                buffer[i] = pixels[i] / 255;\r\n            }\r\n            return buffer;\r\n        } else if (pixels instanceof Float32Array) {\r\n            return pixels;\r\n        } else {\r\n            throw new Error(\"Unsupported pixel format!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert Specular Glossiness Textures to Metallic Roughness\r\n     * See link below for info on the material conversions from PBR Metallic/Roughness and Specular/Glossiness\r\n     * @link https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/examples/convert-between-workflows-bjs/js/babylon.pbrUtilities.js\r\n     * @param diffuseTexture texture used to store diffuse information\r\n     * @param specularGlossinessTexture texture used to store specular and glossiness information\r\n     * @param factors specular glossiness material factors\r\n     * @param mimeType the mime type to use for the texture\r\n     * @returns pbr metallic roughness interface or null\r\n     */\r\n    private async _convertSpecularGlossinessTexturesToMetallicRoughnessAsync(\r\n        diffuseTexture: Nullable<BaseTexture>,\r\n        specularGlossinessTexture: Nullable<BaseTexture>,\r\n        factors: _IPBRSpecularGlossiness,\r\n        mimeType: ImageMimeType\r\n    ): Promise<_IPBRMetallicRoughness> {\r\n        const promises = new Array<Promise<void>>();\r\n        if (!(diffuseTexture || specularGlossinessTexture)) {\r\n            return Promise.reject(\"_ConvertSpecularGlosinessTexturesToMetallicRoughness: diffuse and specular glossiness textures are not defined!\");\r\n        }\r\n\r\n        const scene: Nullable<Scene> = diffuseTexture ? diffuseTexture.getScene() : specularGlossinessTexture ? specularGlossinessTexture.getScene() : null;\r\n        if (scene) {\r\n            const resizedTextures = this._resizeTexturesToSameDimensions(diffuseTexture, specularGlossinessTexture, scene);\r\n\r\n            const diffuseSize = resizedTextures.texture1?.getSize();\r\n\r\n            let diffuseBuffer: Float32Array;\r\n            let specularGlossinessBuffer: Float32Array;\r\n\r\n            const width = diffuseSize.width;\r\n            const height = diffuseSize.height;\r\n\r\n            const diffusePixels = await resizedTextures.texture1.readPixels();\r\n            const specularPixels = await resizedTextures.texture2.readPixels();\r\n\r\n            if (diffusePixels) {\r\n                diffuseBuffer = this._convertPixelArrayToFloat32(diffusePixels);\r\n            } else {\r\n                return Promise.reject(\"Failed to retrieve pixels from diffuse texture!\");\r\n            }\r\n            if (specularPixels) {\r\n                specularGlossinessBuffer = this._convertPixelArrayToFloat32(specularPixels);\r\n            } else {\r\n                return Promise.reject(\"Failed to retrieve pixels from specular glossiness texture!\");\r\n            }\r\n\r\n            const byteLength = specularGlossinessBuffer.byteLength;\r\n\r\n            const metallicRoughnessBuffer = new Uint8Array(byteLength);\r\n            const baseColorBuffer = new Uint8Array(byteLength);\r\n\r\n            const strideSize = 4;\r\n            const maxBaseColor = Color3.Black();\r\n            let maxMetallic = 0;\r\n            let maxRoughness = 0;\r\n\r\n            for (let h = 0; h < height; ++h) {\r\n                for (let w = 0; w < width; ++w) {\r\n                    const offset = (width * h + w) * strideSize;\r\n\r\n                    const diffuseColor = new Color3(diffuseBuffer[offset], diffuseBuffer[offset + 1], diffuseBuffer[offset + 2])\r\n                        .toLinearSpace(scene.getEngine().useExactSrgbConversions)\r\n                        .multiply(factors.diffuseColor);\r\n                    const specularColor = new Color3(specularGlossinessBuffer[offset], specularGlossinessBuffer[offset + 1], specularGlossinessBuffer[offset + 2])\r\n                        .toLinearSpace(scene.getEngine().useExactSrgbConversions)\r\n                        .multiply(factors.specularColor);\r\n                    const glossiness = specularGlossinessBuffer[offset + 3] * factors.glossiness;\r\n\r\n                    const specularGlossiness: _IPBRSpecularGlossiness = {\r\n                        diffuseColor: diffuseColor,\r\n                        specularColor: specularColor,\r\n                        glossiness: glossiness,\r\n                    };\r\n\r\n                    const metallicRoughness = this._convertSpecularGlossinessToMetallicRoughness(specularGlossiness);\r\n                    maxBaseColor.r = Math.max(maxBaseColor.r, metallicRoughness.baseColor.r);\r\n                    maxBaseColor.g = Math.max(maxBaseColor.g, metallicRoughness.baseColor.g);\r\n                    maxBaseColor.b = Math.max(maxBaseColor.b, metallicRoughness.baseColor.b);\r\n                    maxMetallic = Math.max(maxMetallic, metallicRoughness.metallic!);\r\n                    maxRoughness = Math.max(maxRoughness, metallicRoughness.roughness!);\r\n\r\n                    baseColorBuffer[offset] = metallicRoughness.baseColor.r * 255;\r\n                    baseColorBuffer[offset + 1] = metallicRoughness.baseColor.g * 255;\r\n                    baseColorBuffer[offset + 2] = metallicRoughness.baseColor.b * 255;\r\n                    baseColorBuffer[offset + 3] = resizedTextures.texture1.hasAlpha ? diffuseBuffer[offset + 3] * 255 : 255;\r\n\r\n                    metallicRoughnessBuffer[offset] = 0;\r\n                    metallicRoughnessBuffer[offset + 1] = metallicRoughness.roughness! * 255;\r\n                    metallicRoughnessBuffer[offset + 2] = metallicRoughness.metallic! * 255;\r\n                    metallicRoughnessBuffer[offset + 3] = 255;\r\n                }\r\n            }\r\n\r\n            // Retrieves the metallic roughness factors from the maximum texture values.\r\n            const metallicRoughnessFactors: _IPBRMetallicRoughness = {\r\n                baseColor: maxBaseColor,\r\n                metallic: maxMetallic,\r\n                roughness: maxRoughness,\r\n            };\r\n\r\n            let writeOutMetallicRoughnessTexture = false;\r\n            let writeOutBaseColorTexture = false;\r\n\r\n            for (let h = 0; h < height; ++h) {\r\n                for (let w = 0; w < width; ++w) {\r\n                    const destinationOffset = (width * h + w) * strideSize;\r\n\r\n                    baseColorBuffer[destinationOffset] /= metallicRoughnessFactors.baseColor.r > _GLTFMaterialExporter._Epsilon ? metallicRoughnessFactors.baseColor.r : 1;\r\n                    baseColorBuffer[destinationOffset + 1] /= metallicRoughnessFactors.baseColor.g > _GLTFMaterialExporter._Epsilon ? metallicRoughnessFactors.baseColor.g : 1;\r\n                    baseColorBuffer[destinationOffset + 2] /= metallicRoughnessFactors.baseColor.b > _GLTFMaterialExporter._Epsilon ? metallicRoughnessFactors.baseColor.b : 1;\r\n\r\n                    const linearBaseColorPixel = Color3.FromInts(\r\n                        baseColorBuffer[destinationOffset],\r\n                        baseColorBuffer[destinationOffset + 1],\r\n                        baseColorBuffer[destinationOffset + 2]\r\n                    );\r\n                    const sRGBBaseColorPixel = linearBaseColorPixel.toGammaSpace(scene.getEngine().useExactSrgbConversions);\r\n                    baseColorBuffer[destinationOffset] = sRGBBaseColorPixel.r * 255;\r\n                    baseColorBuffer[destinationOffset + 1] = sRGBBaseColorPixel.g * 255;\r\n                    baseColorBuffer[destinationOffset + 2] = sRGBBaseColorPixel.b * 255;\r\n\r\n                    if (!_GLTFMaterialExporter._FuzzyEquals(sRGBBaseColorPixel, Color3.White(), _GLTFMaterialExporter._Epsilon)) {\r\n                        writeOutBaseColorTexture = true;\r\n                    }\r\n\r\n                    metallicRoughnessBuffer[destinationOffset + 1] /=\r\n                        metallicRoughnessFactors.roughness! > _GLTFMaterialExporter._Epsilon ? metallicRoughnessFactors.roughness! : 1;\r\n                    metallicRoughnessBuffer[destinationOffset + 2] /= metallicRoughnessFactors.metallic! > _GLTFMaterialExporter._Epsilon ? metallicRoughnessFactors.metallic! : 1;\r\n\r\n                    const metallicRoughnessPixel = Color3.FromInts(255, metallicRoughnessBuffer[destinationOffset + 1], metallicRoughnessBuffer[destinationOffset + 2]);\r\n\r\n                    if (!_GLTFMaterialExporter._FuzzyEquals(metallicRoughnessPixel, Color3.White(), _GLTFMaterialExporter._Epsilon)) {\r\n                        writeOutMetallicRoughnessTexture = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (writeOutMetallicRoughnessTexture) {\r\n                promises.push(\r\n                    this._getImageDataAsync(metallicRoughnessBuffer, width, height, mimeType).then((data) => {\r\n                        metallicRoughnessFactors.metallicRoughnessTextureData = data;\r\n                    })\r\n                );\r\n            }\r\n            if (writeOutBaseColorTexture) {\r\n                promises.push(\r\n                    this._getImageDataAsync(baseColorBuffer, width, height, mimeType).then((data) => {\r\n                        metallicRoughnessFactors.baseColorTextureData = data;\r\n                    })\r\n                );\r\n            }\r\n\r\n            return Promise.all(promises).then(() => {\r\n                return metallicRoughnessFactors;\r\n            });\r\n        } else {\r\n            return Promise.reject(\"_ConvertSpecularGlossinessTexturesToMetallicRoughness: Scene from textures is missing!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts specular glossiness material properties to metallic roughness\r\n     * @param specularGlossiness interface with specular glossiness material properties\r\n     * @returns interface with metallic roughness material properties\r\n     */\r\n    private _convertSpecularGlossinessToMetallicRoughness(specularGlossiness: _IPBRSpecularGlossiness): _IPBRMetallicRoughness {\r\n        const diffusePerceivedBrightness = this._getPerceivedBrightness(specularGlossiness.diffuseColor);\r\n        const specularPerceivedBrightness = this._getPerceivedBrightness(specularGlossiness.specularColor);\r\n        const oneMinusSpecularStrength = 1 - this._getMaxComponent(specularGlossiness.specularColor);\r\n        const metallic = _GLTFMaterialExporter._SolveMetallic(diffusePerceivedBrightness, specularPerceivedBrightness, oneMinusSpecularStrength);\r\n        const baseColorFromDiffuse = specularGlossiness.diffuseColor.scale(\r\n            oneMinusSpecularStrength / (1.0 - _GLTFMaterialExporter._DielectricSpecular.r) / Math.max(1 - metallic, _GLTFMaterialExporter._Epsilon)\r\n        );\r\n        const baseColorFromSpecular = specularGlossiness.specularColor\r\n            .subtract(_GLTFMaterialExporter._DielectricSpecular.scale(1 - metallic))\r\n            .scale(1 / Math.max(metallic, _GLTFMaterialExporter._Epsilon));\r\n        let baseColor = Color3.Lerp(baseColorFromDiffuse, baseColorFromSpecular, metallic * metallic);\r\n        baseColor = baseColor.clampToRef(0, 1, baseColor);\r\n\r\n        const metallicRoughness: _IPBRMetallicRoughness = {\r\n            baseColor: baseColor,\r\n            metallic: metallic,\r\n            roughness: 1 - specularGlossiness.glossiness,\r\n        };\r\n\r\n        return metallicRoughness;\r\n    }\r\n\r\n    /**\r\n     * Calculates the surface reflectance, independent of lighting conditions\r\n     * @param color Color source to calculate brightness from\r\n     * @returns number representing the perceived brightness, or zero if color is undefined\r\n     */\r\n    private _getPerceivedBrightness(color: Color3): number {\r\n        if (color) {\r\n            return Math.sqrt(0.299 * color.r * color.r + 0.587 * color.g * color.g + 0.114 * color.b * color.b);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum color component value\r\n     * @param color\r\n     * @returns maximum color component value, or zero if color is null or undefined\r\n     */\r\n    private _getMaxComponent(color: Color3): number {\r\n        if (color) {\r\n            return Math.max(color.r, Math.max(color.g, color.b));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Convert a PBRMaterial (Metallic/Roughness) to Metallic Roughness factors\r\n     * @param babylonPBRMaterial BJS PBR Metallic Roughness Material\r\n     * @param mimeType mime type to use for the textures\r\n     * @param glTFPbrMetallicRoughness glTF PBR Metallic Roughness interface\r\n     * @param hasTextureCoords specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns glTF PBR Metallic Roughness factors\r\n     */\r\n    private _convertMetalRoughFactorsToMetallicRoughnessAsync(\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        mimeType: ImageMimeType,\r\n        glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        hasTextureCoords: boolean\r\n    ): Promise<_IPBRMetallicRoughness> {\r\n        const promises = [];\r\n        const baseColor = babylonPBRMaterial._albedoColor;\r\n        const metallic = babylonPBRMaterial._metallic;\r\n        const roughness = babylonPBRMaterial._roughness;\r\n        const metallicRoughness: _IPBRMetallicRoughness = {\r\n            baseColor: baseColor,\r\n            metallic: metallic,\r\n            roughness: roughness,\r\n        };\r\n\r\n        if (hasTextureCoords) {\r\n            const albedoTexture = babylonPBRMaterial._albedoTexture;\r\n            if (albedoTexture) {\r\n                promises.push(\r\n                    this._exportTextureAsync(babylonPBRMaterial._albedoTexture!, mimeType).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFPbrMetallicRoughness.baseColorTexture = glTFTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n            const metallicTexture = babylonPBRMaterial._metallicTexture;\r\n            if (metallicTexture) {\r\n                promises.push(\r\n                    this._exportTextureAsync(metallicTexture, mimeType).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFPbrMetallicRoughness.metallicRoughnessTexture = glTFTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        return Promise.all(promises).then(() => {\r\n            return metallicRoughness;\r\n        });\r\n    }\r\n\r\n    private _getTextureSampler(texture: Nullable<BaseTexture>): ISampler {\r\n        const sampler: ISampler = {};\r\n        if (!texture || !(texture instanceof Texture)) {\r\n            return sampler;\r\n        }\r\n\r\n        const wrapS = this._getGLTFTextureWrapMode(texture.wrapU);\r\n        if (wrapS !== TextureWrapMode.REPEAT) {\r\n            sampler.wrapS = wrapS;\r\n        }\r\n\r\n        const wrapT = this._getGLTFTextureWrapMode(texture.wrapV);\r\n        if (wrapT !== TextureWrapMode.REPEAT) {\r\n            sampler.wrapT = wrapT;\r\n        }\r\n\r\n        switch (texture.samplingMode) {\r\n            case Texture.LINEAR_LINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_LINEAR_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_LINEAR_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return sampler;\r\n    }\r\n\r\n    private _getGLTFTextureWrapMode(wrapMode: number): TextureWrapMode {\r\n        switch (wrapMode) {\r\n            case Texture.WRAP_ADDRESSMODE: {\r\n                return TextureWrapMode.REPEAT;\r\n            }\r\n            case Texture.CLAMP_ADDRESSMODE: {\r\n                return TextureWrapMode.CLAMP_TO_EDGE;\r\n            }\r\n            case Texture.MIRROR_ADDRESSMODE: {\r\n                return TextureWrapMode.MIRRORED_REPEAT;\r\n            }\r\n            default: {\r\n                Tools.Error(`Unsupported Texture Wrap Mode ${wrapMode}!`);\r\n                return TextureWrapMode.REPEAT;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert a PBRMaterial (Specular/Glossiness) to Metallic Roughness factors\r\n     * @param babylonPBRMaterial BJS PBR Metallic Roughness Material\r\n     * @param mimeType mime type to use for the textures\r\n     * @param pbrMetallicRoughness glTF PBR Metallic Roughness interface\r\n     * @param hasTextureCoords specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns glTF PBR Metallic Roughness factors\r\n     */\r\n    private _convertSpecGlossFactorsToMetallicRoughnessAsync(\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        mimeType: ImageMimeType,\r\n        pbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        hasTextureCoords: boolean\r\n    ): Promise<_IPBRMetallicRoughness> {\r\n        return Promise.resolve().then(() => {\r\n            const specGloss: _IPBRSpecularGlossiness = {\r\n                diffuseColor: babylonPBRMaterial._albedoColor,\r\n                specularColor: babylonPBRMaterial._reflectivityColor,\r\n                glossiness: babylonPBRMaterial._microSurface,\r\n            };\r\n            const albedoTexture = babylonPBRMaterial._albedoTexture;\r\n            const reflectivityTexture = babylonPBRMaterial._reflectivityTexture;\r\n            const useMicrosurfaceFromReflectivityMapAlpha = babylonPBRMaterial._useMicroSurfaceFromReflectivityMapAlpha;\r\n            if (reflectivityTexture && !useMicrosurfaceFromReflectivityMapAlpha) {\r\n                return Promise.reject(\"_ConvertPBRMaterial: Glossiness values not included in the reflectivity texture are currently not supported\");\r\n            }\r\n            if ((albedoTexture || reflectivityTexture) && hasTextureCoords) {\r\n                const samplerIndex = this._exportTextureSampler(albedoTexture || reflectivityTexture);\r\n                return this._convertSpecularGlossinessTexturesToMetallicRoughnessAsync(albedoTexture, reflectivityTexture, specGloss, mimeType).then((metallicRoughnessFactors) => {\r\n                    const textures = this._exporter._textures;\r\n                    if (metallicRoughnessFactors.baseColorTextureData) {\r\n                        const imageIndex = this._exportImage(`baseColor${textures.length}`, mimeType, metallicRoughnessFactors.baseColorTextureData);\r\n                        pbrMetallicRoughness.baseColorTexture = this._exportTextureInfo(imageIndex, samplerIndex, albedoTexture?.coordinatesIndex);\r\n                    }\r\n                    if (metallicRoughnessFactors.metallicRoughnessTextureData) {\r\n                        const imageIndex = this._exportImage(`metallicRoughness${textures.length}`, mimeType, metallicRoughnessFactors.metallicRoughnessTextureData);\r\n                        pbrMetallicRoughness.metallicRoughnessTexture = this._exportTextureInfo(imageIndex, samplerIndex, reflectivityTexture?.coordinatesIndex);\r\n                    }\r\n\r\n                    return metallicRoughnessFactors;\r\n                });\r\n            } else {\r\n                return this._convertSpecularGlossinessToMetallicRoughness(specGloss);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts a Babylon PBR Base Material to a glTF Material\r\n     * @param babylonPBRMaterial BJS PBR Base Material\r\n     * @param mimeType mime type to use for the textures\r\n     * @param hasTextureCoords specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns async glTF Material representation\r\n     */\r\n    public _convertPBRMaterialAsync(babylonPBRMaterial: PBRBaseMaterial, mimeType: ImageMimeType, hasTextureCoords: boolean): Promise<IMaterial> {\r\n        const glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness = {};\r\n        const glTFMaterial: IMaterial = {\r\n            name: babylonPBRMaterial.name,\r\n        };\r\n        const useMetallicRoughness = babylonPBRMaterial.isMetallicWorkflow();\r\n\r\n        if (useMetallicRoughness) {\r\n            const albedoColor = babylonPBRMaterial._albedoColor;\r\n            const alpha = babylonPBRMaterial.alpha;\r\n            if (albedoColor) {\r\n                glTFPbrMetallicRoughness.baseColorFactor = [albedoColor.r, albedoColor.g, albedoColor.b, alpha];\r\n            }\r\n            return this._convertMetalRoughFactorsToMetallicRoughnessAsync(babylonPBRMaterial, mimeType, glTFPbrMetallicRoughness, hasTextureCoords).then((metallicRoughness) => {\r\n                return this._setMetallicRoughnessPbrMaterial(metallicRoughness, babylonPBRMaterial, glTFMaterial, glTFPbrMetallicRoughness, mimeType, hasTextureCoords);\r\n            });\r\n        } else {\r\n            return this._convertSpecGlossFactorsToMetallicRoughnessAsync(babylonPBRMaterial, mimeType, glTFPbrMetallicRoughness, hasTextureCoords).then((metallicRoughness) => {\r\n                return this._setMetallicRoughnessPbrMaterial(metallicRoughness, babylonPBRMaterial, glTFMaterial, glTFPbrMetallicRoughness, mimeType, hasTextureCoords);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _setMetallicRoughnessPbrMaterial(\r\n        metallicRoughness: Nullable<_IPBRMetallicRoughness>,\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        glTFMaterial: IMaterial,\r\n        glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        mimeType: ImageMimeType,\r\n        hasTextureCoords: boolean\r\n    ): Promise<IMaterial> {\r\n        const materialMap = this._exporter._materialMap;\r\n        const materials = this._exporter._materials;\r\n        const promises = [];\r\n        if (metallicRoughness) {\r\n            _GLTFMaterialExporter._SetAlphaMode(glTFMaterial, babylonPBRMaterial as PBRMaterial);\r\n            if (\r\n                !(\r\n                    _GLTFMaterialExporter._FuzzyEquals(metallicRoughness.baseColor, Color3.White(), _GLTFMaterialExporter._Epsilon) &&\r\n                    babylonPBRMaterial.alpha >= _GLTFMaterialExporter._Epsilon\r\n                )\r\n            ) {\r\n                glTFPbrMetallicRoughness.baseColorFactor = [metallicRoughness.baseColor.r, metallicRoughness.baseColor.g, metallicRoughness.baseColor.b, babylonPBRMaterial.alpha];\r\n            }\r\n\r\n            if (metallicRoughness.metallic != null && metallicRoughness.metallic !== 1) {\r\n                glTFPbrMetallicRoughness.metallicFactor = metallicRoughness.metallic;\r\n            }\r\n            if (metallicRoughness.roughness != null && metallicRoughness.roughness !== 1) {\r\n                glTFPbrMetallicRoughness.roughnessFactor = metallicRoughness.roughness;\r\n            }\r\n\r\n            if (babylonPBRMaterial.backFaceCulling != null && !babylonPBRMaterial.backFaceCulling) {\r\n                if (!babylonPBRMaterial._twoSidedLighting) {\r\n                    Tools.Warn(babylonPBRMaterial.name + \": Back-face culling disabled and two-sided lighting disabled is not supported in glTF.\");\r\n                }\r\n                glTFMaterial.doubleSided = true;\r\n            }\r\n\r\n            if (hasTextureCoords) {\r\n                const bumpTexture = babylonPBRMaterial._bumpTexture;\r\n                if (bumpTexture) {\r\n                    const promise = this._exportTextureAsync(bumpTexture, mimeType).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFMaterial.normalTexture = glTFTexture;\r\n                            if (bumpTexture.level !== 1) {\r\n                                glTFMaterial.normalTexture.scale = bumpTexture.level;\r\n                            }\r\n                        }\r\n                    });\r\n                    promises.push(promise);\r\n                }\r\n                const ambientTexture = babylonPBRMaterial._ambientTexture;\r\n                if (ambientTexture) {\r\n                    const promise = this._exportTextureAsync(ambientTexture, mimeType).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            const occlusionTexture: IMaterialOcclusionTextureInfo = {\r\n                                index: glTFTexture.index,\r\n                                texCoord: glTFTexture.texCoord,\r\n                                extensions: glTFTexture.extensions,\r\n                            };\r\n\r\n                            glTFMaterial.occlusionTexture = occlusionTexture;\r\n                            const ambientTextureStrength = babylonPBRMaterial._ambientTextureStrength;\r\n                            if (ambientTextureStrength) {\r\n                                occlusionTexture.strength = ambientTextureStrength;\r\n                            }\r\n                        }\r\n                    });\r\n                    promises.push(promise);\r\n                }\r\n                const emissiveTexture = babylonPBRMaterial._emissiveTexture;\r\n                if (emissiveTexture) {\r\n                    const promise = this._exportTextureAsync(emissiveTexture, mimeType).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFMaterial.emissiveTexture = glTFTexture;\r\n                        }\r\n                    });\r\n                    promises.push(promise);\r\n                }\r\n            }\r\n            const emissiveColor = babylonPBRMaterial._emissiveColor;\r\n            if (!_GLTFMaterialExporter._FuzzyEquals(emissiveColor, Color3.Black(), _GLTFMaterialExporter._Epsilon)) {\r\n                glTFMaterial.emissiveFactor = emissiveColor.asArray();\r\n            }\r\n\r\n            glTFMaterial.pbrMetallicRoughness = glTFPbrMetallicRoughness;\r\n            materials.push(glTFMaterial);\r\n            materialMap[babylonPBRMaterial.uniqueId] = materials.length - 1;\r\n        }\r\n\r\n        return this._finishMaterial(promises, glTFMaterial, babylonPBRMaterial, mimeType);\r\n    }\r\n\r\n    private _getPixelsFromTexture(babylonTexture: BaseTexture): Promise<Nullable<Uint8Array | Float32Array>> {\r\n        const pixels =\r\n            babylonTexture.textureType === Constants.TEXTURETYPE_UNSIGNED_INT\r\n                ? (babylonTexture.readPixels() as Promise<Uint8Array>)\r\n                : (babylonTexture.readPixels() as Promise<Float32Array>);\r\n        return pixels;\r\n    }\r\n\r\n    /**\r\n     * Extracts a texture from a Babylon texture into file data and glTF data\r\n     * @param babylonTexture Babylon texture to extract\r\n     * @param mimeType Mime Type of the babylonTexture\r\n     * @returns glTF texture info, or null if the texture format is not supported\r\n     */\r\n    public _exportTextureAsync(babylonTexture: BaseTexture, mimeType: ImageMimeType): Promise<Nullable<ITextureInfo>> {\r\n        const extensionPromise = this._exporter._extensionsPreExportTextureAsync(\"exporter\", babylonTexture as Texture, mimeType);\r\n        if (!extensionPromise) {\r\n            return this._exportTextureInfoAsync(babylonTexture, mimeType);\r\n        }\r\n\r\n        return extensionPromise.then((texture) => {\r\n            if (!texture) {\r\n                return this._exportTextureInfoAsync(babylonTexture, mimeType);\r\n            }\r\n            return this._exportTextureInfoAsync(texture, mimeType);\r\n        });\r\n    }\r\n\r\n    public async _exportTextureInfoAsync(babylonTexture: BaseTexture, mimeType: ImageMimeType): Promise<Nullable<ITextureInfo>> {\r\n        const textureUid = babylonTexture.uid;\r\n        if (!(textureUid in this._textureMap)) {\r\n            const pixels = await this._getPixelsFromTexture(babylonTexture);\r\n            if (!pixels) {\r\n                return null;\r\n            }\r\n\r\n            const samplerIndex = this._exportTextureSampler(babylonTexture);\r\n\r\n            // Preserve texture mime type if defined\r\n            const textureMimeType = (babylonTexture as Texture).mimeType;\r\n            if (textureMimeType) {\r\n                switch (textureMimeType) {\r\n                    case \"image/jpeg\":\r\n                    case \"image/png\":\r\n                    case \"image/webp\":\r\n                        mimeType = textureMimeType as ImageMimeType;\r\n                        break;\r\n                    default:\r\n                        Tools.Warn(`Unsupported media type: ${textureMimeType}`);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            const internalTextureToImage = this._internalTextureToImage;\r\n            const internalTextureUniqueId = babylonTexture.getInternalTexture()!.uniqueId;\r\n            internalTextureToImage[internalTextureUniqueId] ||= {};\r\n            let imageIndexPromise = internalTextureToImage[internalTextureUniqueId][mimeType];\r\n            if (imageIndexPromise === undefined) {\r\n                const size = babylonTexture.getSize();\r\n                imageIndexPromise = (async () => {\r\n                    const data = await this._getImageDataAsync(pixels, size.width, size.height, mimeType);\r\n                    return this._exportImage(babylonTexture.name, mimeType, data);\r\n                })();\r\n                internalTextureToImage[internalTextureUniqueId][mimeType] = imageIndexPromise;\r\n            }\r\n\r\n            const textureInfo = this._exportTextureInfo(await imageIndexPromise, samplerIndex, babylonTexture.coordinatesIndex);\r\n            this._textureMap[textureUid] = textureInfo;\r\n            this._exporter._extensionsPostExportTextures(\"exporter\", this._textureMap[textureUid], babylonTexture);\r\n        }\r\n\r\n        return this._textureMap[textureUid];\r\n    }\r\n\r\n    private _exportImage(name: string, mimeType: ImageMimeType, data: ArrayBuffer): number {\r\n        const imageData = this._exporter._imageData;\r\n\r\n        const baseName = name.replace(/\\.\\/|\\/|\\.\\\\|\\\\/g, \"_\");\r\n        const extension = getFileExtensionFromMimeType(mimeType);\r\n        let fileName = baseName + extension;\r\n        if (fileName in imageData) {\r\n            fileName = `${baseName}_${Tools.RandomId()}${extension}`;\r\n        }\r\n\r\n        imageData[fileName] = {\r\n            data: data,\r\n            mimeType: mimeType,\r\n        };\r\n\r\n        const images = this._exporter._images;\r\n        images.push({\r\n            name: name,\r\n            uri: fileName,\r\n        });\r\n\r\n        return images.length - 1;\r\n    }\r\n\r\n    private _exportTextureInfo(imageIndex: number, samplerIndex: number, coordinatesIndex?: number): ITextureInfo {\r\n        const textures = this._exporter._textures;\r\n        let textureIndex = textures.findIndex((t) => t.sampler == samplerIndex && t.source === imageIndex);\r\n        if (textureIndex === -1) {\r\n            textureIndex = textures.length;\r\n            textures.push({\r\n                source: imageIndex,\r\n                sampler: samplerIndex,\r\n            });\r\n        }\r\n\r\n        const textureInfo: ITextureInfo = { index: textureIndex };\r\n        if (coordinatesIndex) {\r\n            textureInfo.texCoord = coordinatesIndex;\r\n        }\r\n        return textureInfo;\r\n    }\r\n\r\n    private _exportTextureSampler(texture: Nullable<BaseTexture>): number {\r\n        const sampler = this._getTextureSampler(texture);\r\n\r\n        // if a pre-existing sampler with identical parameters exists, then reuse the previous sampler\r\n        const samplers = this._exporter._samplers;\r\n        const samplerIndex = samplers.findIndex(\r\n            (s) => s.minFilter === sampler.minFilter && s.magFilter === sampler.magFilter && s.wrapS === sampler.wrapS && s.wrapT === sampler.wrapT\r\n        );\r\n        if (samplerIndex !== -1) {\r\n            return samplerIndex;\r\n        }\r\n\r\n        samplers.push(sampler);\r\n        return samplers.length - 1;\r\n    }\r\n}\r\n","import type {\r\n    IBufferView,\r\n    IAccessor,\r\n    INode,\r\n    IScene,\r\n    IMesh,\r\n    IMaterial,\r\n    ITexture,\r\n    IImage,\r\n    ISampler,\r\n    IAnimation,\r\n    IMeshPrimitive,\r\n    IBuffer,\r\n    IGLTF,\r\n    ITextureInfo,\r\n    ISkin,\r\n    ICamera,\r\n} from \"babylonjs-gltf2interface\";\r\nimport { AccessorType, ImageMimeType, MeshPrimitiveMode, AccessorComponentType, CameraType } from \"babylonjs-gltf2interface\";\r\n\r\nimport type { FloatArray, IndicesArray, Nullable } from \"core/types\";\r\nimport { Matrix, TmpVectors, Vector2, Vector3, Vector4, Quaternion } from \"core/Maths/math.vector\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Node } from \"core/node\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { LinesMesh } from \"core/Meshes/linesMesh\";\r\nimport { InstancedMesh } from \"core/Meshes/instancedMesh\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { IGLTFExporterExtensionV2 } from \"./glTFExporterExtension\";\r\nimport { _GLTFMaterialExporter } from \"./glTFMaterialExporter\";\r\nimport type { IExportOptions } from \"./glTFSerializer\";\r\nimport { _GLTFUtilities } from \"./glTFUtilities\";\r\nimport { GLTFData } from \"./glTFData\";\r\nimport { _GLTFAnimation } from \"./glTFAnimation\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\n\r\n// Matrix that converts handedness on the X-axis.\r\nconst convertHandednessMatrix = Matrix.Compose(new Vector3(-1, 1, 1), Quaternion.Identity(), Vector3.Zero());\r\n\r\n// 180 degrees rotation in Y.\r\nconst rotation180Y = new Quaternion(0, 1, 0, 0);\r\n\r\nfunction isNoopNode(node: Node, useRightHandedSystem: boolean): boolean {\r\n    if (!(node instanceof TransformNode)) {\r\n        return false;\r\n    }\r\n\r\n    // Transform\r\n    if (useRightHandedSystem) {\r\n        const matrix = node.getWorldMatrix();\r\n        if (!matrix.isIdentity()) {\r\n            return false;\r\n        }\r\n    } else {\r\n        const matrix = node.getWorldMatrix().multiplyToRef(convertHandednessMatrix, TmpVectors.Matrix[0]);\r\n        if (!matrix.isIdentity()) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Geometry\r\n    if ((node instanceof Mesh && node.geometry) || (node instanceof InstancedMesh && node.sourceMesh.geometry)) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction convertNodeHandedness(node: INode): void {\r\n    const translation = Vector3.FromArrayToRef(node.translation || [0, 0, 0], 0, TmpVectors.Vector3[0]);\r\n    const rotation = Quaternion.FromArrayToRef(node.rotation || [0, 0, 0, 1], 0, TmpVectors.Quaternion[0]);\r\n    const scale = Vector3.FromArrayToRef(node.scale || [1, 1, 1], 0, TmpVectors.Vector3[1]);\r\n    const matrix = Matrix.ComposeToRef(scale, rotation, translation, TmpVectors.Matrix[0]).multiplyToRef(convertHandednessMatrix, TmpVectors.Matrix[0]);\r\n\r\n    matrix.decompose(scale, rotation, translation);\r\n\r\n    if (translation.equalsToFloats(0, 0, 0)) {\r\n        delete node.translation;\r\n    } else {\r\n        node.translation = translation.asArray();\r\n    }\r\n\r\n    if (Quaternion.IsIdentity(rotation)) {\r\n        delete node.rotation;\r\n    } else {\r\n        node.rotation = rotation.asArray();\r\n    }\r\n\r\n    if (scale.equalsToFloats(1, 1, 1)) {\r\n        delete node.scale;\r\n    } else {\r\n        node.scale = scale.asArray();\r\n    }\r\n}\r\n\r\n/**\r\n * Utility interface for storing vertex attribute data\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ninterface _IVertexAttributeData {\r\n    /**\r\n     * Specifies the Babylon Vertex Buffer Type (Position, Normal, Color, etc.)\r\n     */\r\n    kind: string;\r\n\r\n    /**\r\n     * Specifies the glTF Accessor Type (VEC2, VEC3, etc.)\r\n     */\r\n    accessorType: AccessorType;\r\n\r\n    /**\r\n     * Specifies the glTF Accessor Component Type (BYTE, UNSIGNED_BYTE, FLOAT, SHORT, INT, etc..)\r\n     */\r\n    accessorComponentType: AccessorComponentType;\r\n\r\n    /**\r\n     * Specifies the BufferView index for the vertex attribute data\r\n     */\r\n    bufferViewIndex?: number;\r\n\r\n    byteStride?: number;\r\n}\r\n/**\r\n * Converts Babylon Scene into glTF 2.0.\r\n * @internal\r\n */\r\nexport class _Exporter {\r\n    /**\r\n     * Stores the glTF to export\r\n     */\r\n    public _glTF: IGLTF;\r\n    /**\r\n     * Stores all generated buffer views, which represents views into the main glTF buffer data\r\n     */\r\n    public _bufferViews: IBufferView[];\r\n    /**\r\n     * Stores all the generated accessors, which is used for accessing the data within the buffer views in glTF\r\n     */\r\n    public _accessors: IAccessor[];\r\n    /**\r\n     * Stores all the generated nodes, which contains transform and/or mesh information per node\r\n     */\r\n    public _nodes: INode[];\r\n    /**\r\n     * Stores all the generated glTF scenes, which stores multiple node hierarchies\r\n     */\r\n    private _scenes: IScene[];\r\n    /**\r\n     * Stores all the generated glTF cameras\r\n     */\r\n    private _cameras: ICamera[];\r\n    /**\r\n     * Stores all the generated mesh information, each containing a set of primitives to render in glTF\r\n     */\r\n    private _meshes: IMesh[];\r\n    /**\r\n     * Stores all the generated material information, which represents the appearance of each primitive\r\n     */\r\n    public _materials: IMaterial[];\r\n\r\n    public _materialMap: { [materialID: number]: number };\r\n    /**\r\n     * Stores all the generated texture information, which is referenced by glTF materials\r\n     */\r\n    public _textures: ITexture[];\r\n    /**\r\n     * Stores all the generated image information, which is referenced by glTF textures\r\n     */\r\n    public _images: IImage[];\r\n\r\n    /**\r\n     * Stores all the texture samplers\r\n     */\r\n    public _samplers: ISampler[];\r\n    /**\r\n     * Stores all the generated glTF skins\r\n     */\r\n    public _skins: ISkin[];\r\n    /**\r\n     * Stores all the generated animation samplers, which is referenced by glTF animations\r\n     */\r\n    /**\r\n     * Stores the animations for glTF models\r\n     */\r\n    private _animations: IAnimation[];\r\n    /**\r\n     * Stores the total amount of bytes stored in the glTF buffer\r\n     */\r\n    private _totalByteLength: number;\r\n    /**\r\n     * Stores a reference to the Babylon scene containing the source geometry and material information\r\n     */\r\n    public _babylonScene: Scene;\r\n    /**\r\n     * Stores a map of the image data, where the key is the file name and the value\r\n     * is the image data\r\n     */\r\n    public _imageData: { [fileName: string]: { data: ArrayBuffer; mimeType: ImageMimeType } };\r\n\r\n    private _orderedImageData: Array<{ data: ArrayBuffer; mimeType: ImageMimeType }>;\r\n\r\n    /**\r\n     * Stores a map of the unique id of a node to its index in the node array\r\n     */\r\n    private _nodeMap: { [key: number]: number };\r\n\r\n    /**\r\n     * Baked animation sample rate\r\n     */\r\n    private _animationSampleRate: number;\r\n\r\n    private _options: IExportOptions;\r\n\r\n    private _localEngine: Engine;\r\n\r\n    public _glTFMaterialExporter: _GLTFMaterialExporter;\r\n\r\n    private _extensions: { [name: string]: IGLTFExporterExtensionV2 } = {};\r\n\r\n    private static _ExtensionNames = new Array<string>();\r\n    private static _ExtensionFactories: { [name: string]: (exporter: _Exporter) => IGLTFExporterExtensionV2 } = {};\r\n\r\n    private _applyExtension<T>(\r\n        node: Nullable<T>,\r\n        extensions: IGLTFExporterExtensionV2[],\r\n        index: number,\r\n        actionAsync: (extension: IGLTFExporterExtensionV2, node: Nullable<T>) => Promise<Nullable<T>> | undefined\r\n    ): Promise<Nullable<T>> {\r\n        if (index >= extensions.length) {\r\n            return Promise.resolve(node);\r\n        }\r\n\r\n        const currentPromise = actionAsync(extensions[index], node);\r\n\r\n        if (!currentPromise) {\r\n            return this._applyExtension(node, extensions, index + 1, actionAsync);\r\n        }\r\n\r\n        return currentPromise.then((newNode) => this._applyExtension(newNode, extensions, index + 1, actionAsync));\r\n    }\r\n\r\n    private _applyExtensions<T>(\r\n        node: Nullable<T>,\r\n        actionAsync: (extension: IGLTFExporterExtensionV2, node: Nullable<T>) => Promise<Nullable<T>> | undefined\r\n    ): Promise<Nullable<T>> {\r\n        const extensions: IGLTFExporterExtensionV2[] = [];\r\n        for (const name of _Exporter._ExtensionNames) {\r\n            extensions.push(this._extensions[name]);\r\n        }\r\n\r\n        return this._applyExtension(node, extensions, 0, actionAsync);\r\n    }\r\n\r\n    public _extensionsPreExportTextureAsync(context: string, babylonTexture: Nullable<Texture>, mimeType: ImageMimeType): Promise<Nullable<BaseTexture>> {\r\n        return this._applyExtensions(babylonTexture, (extension, node) => extension.preExportTextureAsync && extension.preExportTextureAsync(context, node, mimeType));\r\n    }\r\n\r\n    public _extensionsPostExportMeshPrimitiveAsync(\r\n        context: string,\r\n        meshPrimitive: IMeshPrimitive,\r\n        babylonSubMesh: SubMesh,\r\n        binaryWriter: _BinaryWriter\r\n    ): Promise<Nullable<IMeshPrimitive>> {\r\n        return this._applyExtensions(\r\n            meshPrimitive,\r\n            (extension, node) => extension.postExportMeshPrimitiveAsync && extension.postExportMeshPrimitiveAsync(context, node, babylonSubMesh, binaryWriter)\r\n        );\r\n    }\r\n\r\n    public _extensionsPostExportNodeAsync(\r\n        context: string,\r\n        node: Nullable<INode>,\r\n        babylonNode: Node,\r\n        nodeMap: { [key: number]: number },\r\n        binaryWriter: _BinaryWriter\r\n    ): Promise<Nullable<INode>> {\r\n        return this._applyExtensions(node, (extension, node) => extension.postExportNodeAsync && extension.postExportNodeAsync(context, node, babylonNode, nodeMap, binaryWriter));\r\n    }\r\n\r\n    public _extensionsPostExportMaterialAsync(context: string, material: Nullable<IMaterial>, babylonMaterial: Material): Promise<Nullable<IMaterial>> {\r\n        return this._applyExtensions(material, (extension, node) => extension.postExportMaterialAsync && extension.postExportMaterialAsync(context, node, babylonMaterial));\r\n    }\r\n\r\n    public _extensionsPostExportMaterialAdditionalTextures(context: string, material: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const output: BaseTexture[] = [];\r\n\r\n        for (const name of _Exporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.postExportMaterialAdditionalTextures) {\r\n                output.push(...extension.postExportMaterialAdditionalTextures(context, material, babylonMaterial));\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    public _extensionsPostExportTextures(context: string, textureInfo: ITextureInfo, babylonTexture: BaseTexture): void {\r\n        for (const name of _Exporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.postExportTexture) {\r\n                extension.postExportTexture(context, textureInfo, babylonTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _forEachExtensions(action: (extension: IGLTFExporterExtensionV2) => void): void {\r\n        for (const name of _Exporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n            if (extension.enabled) {\r\n                action(extension);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _extensionsOnExporting(): void {\r\n        this._forEachExtensions((extension) => {\r\n            if (extension.wasUsed) {\r\n                if (this._glTF.extensionsUsed == null) {\r\n                    this._glTF.extensionsUsed = [];\r\n                }\r\n\r\n                if (this._glTF.extensionsUsed.indexOf(extension.name) === -1) {\r\n                    this._glTF.extensionsUsed.push(extension.name);\r\n                }\r\n\r\n                if (extension.required) {\r\n                    if (this._glTF.extensionsRequired == null) {\r\n                        this._glTF.extensionsRequired = [];\r\n                    }\r\n                    if (this._glTF.extensionsRequired.indexOf(extension.name) === -1) {\r\n                        this._glTF.extensionsRequired.push(extension.name);\r\n                    }\r\n                }\r\n\r\n                if (this._glTF.extensions == null) {\r\n                    this._glTF.extensions = {};\r\n                }\r\n\r\n                if (extension.onExporting) {\r\n                    extension.onExporting();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load glTF serializer extensions\r\n     */\r\n    private _loadExtensions(): void {\r\n        for (const name of _Exporter._ExtensionNames) {\r\n            const extension = _Exporter._ExtensionFactories[name](this);\r\n            this._extensions[name] = extension;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a glTF Exporter instance, which can accept optional exporter options\r\n     * @param babylonScene Babylon scene object\r\n     * @param options Options to modify the behavior of the exporter\r\n     */\r\n    public constructor(babylonScene?: Nullable<Scene>, options?: IExportOptions) {\r\n        this._glTF = {\r\n            asset: { generator: `Babylon.js v${Engine.Version}`, version: \"2.0\" },\r\n        };\r\n        babylonScene = babylonScene || EngineStore.LastCreatedScene;\r\n        if (!babylonScene) {\r\n            return;\r\n        }\r\n        this._babylonScene = babylonScene;\r\n        this._bufferViews = [];\r\n        this._accessors = [];\r\n        this._meshes = [];\r\n        this._scenes = [];\r\n        this._cameras = [];\r\n        this._nodes = [];\r\n        this._images = [];\r\n        this._materials = [];\r\n        this._materialMap = [];\r\n        this._textures = [];\r\n        this._samplers = [];\r\n        this._skins = [];\r\n        this._animations = [];\r\n        this._imageData = {};\r\n        this._orderedImageData = [];\r\n        this._options = options || {};\r\n        this._animationSampleRate = this._options.animationSampleRate || 1 / 60;\r\n\r\n        this._glTFMaterialExporter = new _GLTFMaterialExporter(this);\r\n        this._loadExtensions();\r\n    }\r\n\r\n    public dispose() {\r\n        for (const extensionKey in this._extensions) {\r\n            const extension = this._extensions[extensionKey];\r\n\r\n            extension.dispose();\r\n        }\r\n    }\r\n\r\n    public get options() {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * Registers a glTF exporter extension\r\n     * @param name Name of the extension to export\r\n     * @param factory The factory function that creates the exporter extension\r\n     */\r\n    public static RegisterExtension(name: string, factory: (exporter: _Exporter) => IGLTFExporterExtensionV2): void {\r\n        if (_Exporter.UnregisterExtension(name)) {\r\n            Tools.Warn(`Extension with the name ${name} already exists`);\r\n        }\r\n\r\n        _Exporter._ExtensionFactories[name] = factory;\r\n        _Exporter._ExtensionNames.push(name);\r\n    }\r\n\r\n    /**\r\n     * Un-registers an exporter extension\r\n     * @param name The name fo the exporter extension\r\n     * @returns A boolean indicating whether the extension has been un-registered\r\n     */\r\n    public static UnregisterExtension(name: string): boolean {\r\n        if (!_Exporter._ExtensionFactories[name]) {\r\n            return false;\r\n        }\r\n        delete _Exporter._ExtensionFactories[name];\r\n\r\n        const index = _Exporter._ExtensionNames.indexOf(name);\r\n        if (index !== -1) {\r\n            _Exporter._ExtensionNames.splice(index, 1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _reorderIndicesBasedOnPrimitiveMode(submesh: SubMesh, primitiveMode: number, babylonIndices: IndicesArray, byteOffset: number, binaryWriter: _BinaryWriter) {\r\n        switch (primitiveMode) {\r\n            case Material.TriangleFillMode: {\r\n                if (!byteOffset) {\r\n                    byteOffset = 0;\r\n                }\r\n                for (let i = submesh.indexStart, length = submesh.indexStart + submesh.indexCount; i < length; i = i + 3) {\r\n                    const index = byteOffset + i * 4;\r\n                    // swap the second and third indices\r\n                    const secondIndex = binaryWriter.getUInt32(index + 4);\r\n                    const thirdIndex = binaryWriter.getUInt32(index + 8);\r\n                    binaryWriter.setUInt32(thirdIndex, index + 4);\r\n                    binaryWriter.setUInt32(secondIndex, index + 8);\r\n                }\r\n                break;\r\n            }\r\n            case Material.TriangleFanDrawMode: {\r\n                for (let i = submesh.indexStart + submesh.indexCount - 1, start = submesh.indexStart; i >= start; --i) {\r\n                    binaryWriter.setUInt32(babylonIndices[i], byteOffset);\r\n                    byteOffset += 4;\r\n                }\r\n                break;\r\n            }\r\n            case Material.TriangleStripDrawMode: {\r\n                if (submesh.indexCount >= 3) {\r\n                    binaryWriter.setUInt32(babylonIndices[submesh.indexStart + 2], byteOffset + 4);\r\n                    binaryWriter.setUInt32(babylonIndices[submesh.indexStart + 1], byteOffset + 8);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorders the vertex attribute data based on the primitive mode.  This is necessary when indices are not available and the winding order is\r\n     * clock-wise during export to glTF\r\n     * @param submesh BabylonJS submesh\r\n     * @param primitiveMode Primitive mode of the mesh\r\n     * @param vertexBufferKind The type of vertex attribute\r\n     * @param meshAttributeArray The vertex attribute data\r\n     * @param byteOffset The offset to the binary data\r\n     * @param binaryWriter The binary data for the glTF file\r\n     */\r\n    private _reorderVertexAttributeDataBasedOnPrimitiveMode(\r\n        submesh: SubMesh,\r\n        primitiveMode: number,\r\n        vertexBufferKind: string,\r\n        meshAttributeArray: FloatArray,\r\n        byteOffset: number,\r\n        binaryWriter: _BinaryWriter\r\n    ): void {\r\n        switch (primitiveMode) {\r\n            case Material.TriangleFillMode: {\r\n                this._reorderTriangleFillMode(submesh, vertexBufferKind, meshAttributeArray, byteOffset, binaryWriter);\r\n                break;\r\n            }\r\n            case Material.TriangleStripDrawMode: {\r\n                this._reorderTriangleStripDrawMode(submesh, vertexBufferKind, meshAttributeArray, byteOffset, binaryWriter);\r\n                break;\r\n            }\r\n            case Material.TriangleFanDrawMode: {\r\n                this._reorderTriangleFanMode(submesh, vertexBufferKind, meshAttributeArray, byteOffset, binaryWriter);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorders the vertex attributes in the correct triangle mode order .  This is necessary when indices are not available and the winding order is\r\n     * clock-wise during export to glTF\r\n     * @param submesh BabylonJS submesh\r\n     * @param vertexBufferKind The type of vertex attribute\r\n     * @param meshAttributeArray The vertex attribute data\r\n     * @param byteOffset The offset to the binary data\r\n     * @param binaryWriter The binary data for the glTF file\r\n     */\r\n    private _reorderTriangleFillMode(submesh: SubMesh, vertexBufferKind: string, meshAttributeArray: FloatArray, byteOffset: number, binaryWriter: _BinaryWriter) {\r\n        const vertexBuffer = this._getVertexBufferFromMesh(vertexBufferKind, submesh.getMesh() as Mesh);\r\n        if (vertexBuffer) {\r\n            const stride = vertexBuffer.byteStride / VertexBuffer.GetTypeByteLength(vertexBuffer.type);\r\n            if (submesh.verticesCount % 3 !== 0) {\r\n                Tools.Error(\"The submesh vertices for the triangle fill mode is not divisible by 3!\");\r\n            } else {\r\n                const vertexData: Vector2[] | Vector3[] | Vector4[] = [];\r\n                let index = 0;\r\n                switch (vertexBufferKind) {\r\n                    case VertexBuffer.PositionKind:\r\n                    case VertexBuffer.NormalKind: {\r\n                        for (let x = submesh.verticesStart; x < submesh.verticesStart + submesh.verticesCount; x = x + 3) {\r\n                            index = x * stride;\r\n                            (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index));\r\n                            (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + 2 * stride));\r\n                            (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + stride));\r\n                        }\r\n                        break;\r\n                    }\r\n                    case VertexBuffer.TangentKind: {\r\n                        for (let x = submesh.verticesStart; x < submesh.verticesStart + submesh.verticesCount; x = x + 3) {\r\n                            index = x * stride;\r\n                            (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index));\r\n                            (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index + 2 * stride));\r\n                            (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index + stride));\r\n                        }\r\n                        break;\r\n                    }\r\n                    case VertexBuffer.ColorKind: {\r\n                        const size = vertexBuffer.getSize();\r\n                        for (let x = submesh.verticesStart; x < submesh.verticesStart + submesh.verticesCount; x = x + size) {\r\n                            index = x * stride;\r\n                            if (size === 4) {\r\n                                (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index));\r\n                                (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index + 2 * stride));\r\n                                (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index + stride));\r\n                            } else {\r\n                                (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index));\r\n                                (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + 2 * stride));\r\n                                (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + stride));\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case VertexBuffer.UVKind:\r\n                    case VertexBuffer.UV2Kind: {\r\n                        for (let x = submesh.verticesStart; x < submesh.verticesStart + submesh.verticesCount; x = x + 3) {\r\n                            index = x * stride;\r\n                            (vertexData as Vector2[]).push(Vector2.FromArray(meshAttributeArray, index));\r\n                            (vertexData as Vector2[]).push(Vector2.FromArray(meshAttributeArray, index + 2 * stride));\r\n                            (vertexData as Vector2[]).push(Vector2.FromArray(meshAttributeArray, index + stride));\r\n                        }\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        Tools.Error(`Unsupported Vertex Buffer type: ${vertexBufferKind}`);\r\n                    }\r\n                }\r\n                this._writeVertexAttributeData(vertexData, byteOffset, vertexBufferKind, binaryWriter);\r\n            }\r\n        } else {\r\n            Tools.Warn(`reorderTriangleFillMode: Vertex Buffer Kind ${vertexBufferKind} not present!`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorders the vertex attributes in the correct triangle strip order.  This is necessary when indices are not available and the winding order is\r\n     * clock-wise during export to glTF\r\n     * @param submesh BabylonJS submesh\r\n     * @param vertexBufferKind The type of vertex attribute\r\n     * @param meshAttributeArray The vertex attribute data\r\n     * @param byteOffset The offset to the binary data\r\n     * @param binaryWriter The binary data for the glTF file\r\n     */\r\n    private _reorderTriangleStripDrawMode(submesh: SubMesh, vertexBufferKind: string, meshAttributeArray: FloatArray, byteOffset: number, binaryWriter: _BinaryWriter) {\r\n        const vertexBuffer = this._getVertexBufferFromMesh(vertexBufferKind, submesh.getMesh() as Mesh);\r\n        if (vertexBuffer) {\r\n            const stride = vertexBuffer.byteStride / VertexBuffer.GetTypeByteLength(vertexBuffer.type);\r\n\r\n            const vertexData: Vector2[] | Vector3[] | Vector4[] = [];\r\n            let index = 0;\r\n            switch (vertexBufferKind) {\r\n                case VertexBuffer.PositionKind:\r\n                case VertexBuffer.NormalKind: {\r\n                    index = submesh.verticesStart;\r\n                    (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + 2 * stride));\r\n                    (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index + stride));\r\n                    break;\r\n                }\r\n                case VertexBuffer.TangentKind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                case VertexBuffer.ColorKind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        vertexBuffer.getSize() === 4\r\n                            ? (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index))\r\n                            : (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                case VertexBuffer.UVKind:\r\n                case VertexBuffer.UV2Kind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector2[]).push(Vector2.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    Tools.Error(`Unsupported Vertex Buffer type: ${vertexBufferKind}`);\r\n                }\r\n            }\r\n            this._writeVertexAttributeData(vertexData, byteOffset + 12, vertexBufferKind, binaryWriter);\r\n        } else {\r\n            Tools.Warn(`reorderTriangleStripDrawMode: Vertex buffer kind ${vertexBufferKind} not present!`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reorders the vertex attributes in the correct triangle fan order.  This is necessary when indices are not available and the winding order is\r\n     * clock-wise during export to glTF\r\n     * @param submesh BabylonJS submesh\r\n     * @param vertexBufferKind The type of vertex attribute\r\n     * @param meshAttributeArray The vertex attribute data\r\n     * @param byteOffset The offset to the binary data\r\n     * @param binaryWriter The binary data for the glTF file\r\n     */\r\n    private _reorderTriangleFanMode(submesh: SubMesh, vertexBufferKind: string, meshAttributeArray: FloatArray, byteOffset: number, binaryWriter: _BinaryWriter) {\r\n        const vertexBuffer = this._getVertexBufferFromMesh(vertexBufferKind, submesh.getMesh() as Mesh);\r\n        if (vertexBuffer) {\r\n            const stride = vertexBuffer.byteStride / VertexBuffer.GetTypeByteLength(vertexBuffer.type);\r\n\r\n            const vertexData: Vector2[] | Vector3[] | Vector4[] = [];\r\n            let index = 0;\r\n            switch (vertexBufferKind) {\r\n                case VertexBuffer.PositionKind:\r\n                case VertexBuffer.NormalKind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                case VertexBuffer.TangentKind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                case VertexBuffer.ColorKind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index));\r\n                        vertexBuffer.getSize() === 4\r\n                            ? (vertexData as Vector4[]).push(Vector4.FromArray(meshAttributeArray, index))\r\n                            : (vertexData as Vector3[]).push(Vector3.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                case VertexBuffer.UVKind:\r\n                case VertexBuffer.UV2Kind: {\r\n                    for (let x = submesh.verticesStart + submesh.verticesCount - 1; x >= submesh.verticesStart; --x) {\r\n                        index = x * stride;\r\n                        (vertexData as Vector2[]).push(Vector2.FromArray(meshAttributeArray, index));\r\n                    }\r\n                    break;\r\n                }\r\n                default: {\r\n                    Tools.Error(`Unsupported Vertex Buffer type: ${vertexBufferKind}`);\r\n                }\r\n            }\r\n            this._writeVertexAttributeData(vertexData, byteOffset, vertexBufferKind, binaryWriter);\r\n        } else {\r\n            Tools.Warn(`reorderTriangleFanMode: Vertex buffer kind ${vertexBufferKind} not present!`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes the vertex attribute data to binary\r\n     * @param vertices The vertices to write to the binary writer\r\n     * @param byteOffset The offset into the binary writer to overwrite binary data\r\n     * @param vertexAttributeKind The vertex attribute type\r\n     * @param binaryWriter The writer containing the binary data\r\n     */\r\n    private _writeVertexAttributeData(vertices: Vector2[] | Vector3[] | Vector4[], byteOffset: number, vertexAttributeKind: string, binaryWriter: _BinaryWriter) {\r\n        for (const vertex of vertices) {\r\n            if (vertexAttributeKind === VertexBuffer.NormalKind) {\r\n                vertex.normalize();\r\n            } else if (vertexAttributeKind === VertexBuffer.TangentKind && vertex instanceof Vector4) {\r\n                _GLTFUtilities._NormalizeTangentFromRef(vertex);\r\n            }\r\n\r\n            for (const component of vertex.asArray()) {\r\n                binaryWriter.setFloat32(component, byteOffset);\r\n                byteOffset += 4;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes mesh attribute data to a data buffer\r\n     * Returns the bytelength of the data\r\n     * @param vertexBufferKind Indicates what kind of vertex data is being passed in\r\n     * @param attributeComponentKind\r\n     * @param meshAttributeArray Array containing the attribute data\r\n     * @param stride Specifies the space between data\r\n     * @param binaryWriter The buffer to write the binary data to\r\n     * @param babylonTransformNode\r\n     */\r\n    public _writeAttributeData(\r\n        vertexBufferKind: string,\r\n        attributeComponentKind: AccessorComponentType,\r\n        meshAttributeArray: FloatArray,\r\n        stride: number,\r\n        binaryWriter: _BinaryWriter,\r\n        babylonTransformNode: TransformNode\r\n    ) {\r\n        let vertexAttributes: number[][] = [];\r\n        let index: number;\r\n\r\n        switch (vertexBufferKind) {\r\n            case VertexBuffer.PositionKind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector3.FromArray(meshAttributeArray, index);\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.NormalKind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector3.FromArray(meshAttributeArray, index);\r\n                    vertexAttributes.push(vertexData.normalize().asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.TangentKind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector4.FromArray(meshAttributeArray, index);\r\n                    _GLTFUtilities._NormalizeTangentFromRef(vertexData);\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.ColorKind: {\r\n                const meshMaterial = (babylonTransformNode as Mesh).material;\r\n                const convertToLinear = meshMaterial ? meshMaterial.getClassName() === \"StandardMaterial\" : true;\r\n                const vertexData: Color3 | Color4 = stride === 3 ? new Color3() : new Color4();\r\n                const useExactSrgbConversions = this._babylonScene.getEngine().useExactSrgbConversions;\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    if (stride === 3) {\r\n                        Color3.FromArrayToRef(meshAttributeArray, index, vertexData as Color3);\r\n                        if (convertToLinear) {\r\n                            (vertexData as Color3).toLinearSpaceToRef(vertexData as Color3, useExactSrgbConversions);\r\n                        }\r\n                    } else {\r\n                        Color4.FromArrayToRef(meshAttributeArray, index, vertexData as Color4);\r\n                        if (convertToLinear) {\r\n                            (vertexData as Color4).toLinearSpaceToRef(vertexData as Color4, useExactSrgbConversions);\r\n                        }\r\n                    }\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.UVKind:\r\n            case VertexBuffer.UV2Kind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector2.FromArray(meshAttributeArray, index);\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesIndicesKind:\r\n            case VertexBuffer.MatricesIndicesExtraKind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector4.FromArray(meshAttributeArray, index);\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesWeightsKind:\r\n            case VertexBuffer.MatricesWeightsExtraKind: {\r\n                for (let k = 0, length = meshAttributeArray.length / stride; k < length; ++k) {\r\n                    index = k * stride;\r\n                    const vertexData = Vector4.FromArray(meshAttributeArray, index);\r\n                    vertexAttributes.push(vertexData.asArray());\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Warn(\"Unsupported Vertex Buffer Type: \" + vertexBufferKind);\r\n                vertexAttributes = [];\r\n            }\r\n        }\r\n\r\n        let writeBinaryFunc;\r\n        switch (attributeComponentKind) {\r\n            case AccessorComponentType.UNSIGNED_BYTE: {\r\n                writeBinaryFunc = binaryWriter.setUInt8.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.UNSIGNED_SHORT: {\r\n                writeBinaryFunc = binaryWriter.setUInt16.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.UNSIGNED_INT: {\r\n                writeBinaryFunc = binaryWriter.setUInt32.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.FLOAT: {\r\n                writeBinaryFunc = binaryWriter.setFloat32.bind(binaryWriter);\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Warn(\"Unsupported Attribute Component kind: \" + attributeComponentKind);\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (const vertexAttribute of vertexAttributes) {\r\n            for (const component of vertexAttribute) {\r\n                writeBinaryFunc(component);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes mesh attribute data to a data buffer\r\n     * Returns the bytelength of the data\r\n     * @param vertexBufferKind Indicates what kind of vertex data is being passed in\r\n     * @param attributeComponentKind attribute component type\r\n     * @param meshPrimitive the mesh primitive\r\n     * @param meshAttributeArray Array containing the attribute data\r\n     * @param morphTargetAttributeArray\r\n     * @param stride Specifies the space between data\r\n     * @param binaryWriter The buffer to write the binary data to\r\n     * @param minMax\r\n     */\r\n    public writeMorphTargetAttributeData(\r\n        vertexBufferKind: string,\r\n        attributeComponentKind: AccessorComponentType,\r\n        meshPrimitive: SubMesh,\r\n        meshAttributeArray: FloatArray,\r\n        morphTargetAttributeArray: FloatArray,\r\n        stride: number,\r\n        binaryWriter: _BinaryWriter,\r\n        minMax?: any\r\n    ) {\r\n        let vertexAttributes: number[][] = [];\r\n        let index: number;\r\n        let difference: Vector3 = new Vector3();\r\n        let difference4: Vector4 = new Vector4(0, 0, 0, 0);\r\n\r\n        switch (vertexBufferKind) {\r\n            case VertexBuffer.PositionKind: {\r\n                for (let k = meshPrimitive.verticesStart; k < meshPrimitive.verticesCount; ++k) {\r\n                    index = meshPrimitive.indexStart + k * stride;\r\n                    const vertexData = Vector3.FromArray(meshAttributeArray, index);\r\n                    const morphData = Vector3.FromArray(morphTargetAttributeArray, index);\r\n                    difference = morphData.subtractToRef(vertexData, difference);\r\n                    if (minMax) {\r\n                        minMax.min.copyFromFloats(Math.min(difference.x, minMax.min.x), Math.min(difference.y, minMax.min.y), Math.min(difference.z, minMax.min.z));\r\n                        minMax.max.copyFromFloats(Math.max(difference.x, minMax.max.x), Math.max(difference.y, minMax.max.y), Math.max(difference.z, minMax.max.z));\r\n                    }\r\n                    vertexAttributes.push(difference.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.NormalKind: {\r\n                for (let k = meshPrimitive.verticesStart; k < meshPrimitive.verticesCount; ++k) {\r\n                    index = meshPrimitive.indexStart + k * stride;\r\n                    const vertexData = Vector3.FromArray(meshAttributeArray, index).normalize();\r\n                    const morphData = Vector3.FromArray(morphTargetAttributeArray, index).normalize();\r\n                    difference = morphData.subtractToRef(vertexData, difference);\r\n                    vertexAttributes.push(difference.asArray());\r\n                }\r\n                break;\r\n            }\r\n            case VertexBuffer.TangentKind: {\r\n                for (let k = meshPrimitive.verticesStart; k < meshPrimitive.verticesCount; ++k) {\r\n                    index = meshPrimitive.indexStart + k * (stride + 1);\r\n                    const vertexData = Vector4.FromArray(meshAttributeArray, index);\r\n                    _GLTFUtilities._NormalizeTangentFromRef(vertexData);\r\n                    const morphData = Vector4.FromArray(morphTargetAttributeArray, index);\r\n                    _GLTFUtilities._NormalizeTangentFromRef(morphData);\r\n                    difference4 = morphData.subtractToRef(vertexData, difference4);\r\n                    vertexAttributes.push([difference4.x, difference4.y, difference4.z]);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Warn(\"Unsupported Vertex Buffer Type: \" + vertexBufferKind);\r\n                vertexAttributes = [];\r\n            }\r\n        }\r\n\r\n        let writeBinaryFunc;\r\n        switch (attributeComponentKind) {\r\n            case AccessorComponentType.UNSIGNED_BYTE: {\r\n                writeBinaryFunc = binaryWriter.setUInt8.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.UNSIGNED_SHORT: {\r\n                writeBinaryFunc = binaryWriter.setUInt16.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.UNSIGNED_INT: {\r\n                writeBinaryFunc = binaryWriter.setUInt32.bind(binaryWriter);\r\n                break;\r\n            }\r\n            case AccessorComponentType.FLOAT: {\r\n                writeBinaryFunc = binaryWriter.setFloat32.bind(binaryWriter);\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Warn(\"Unsupported Attribute Component kind: \" + attributeComponentKind);\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (const vertexAttribute of vertexAttributes) {\r\n            for (const component of vertexAttribute) {\r\n                writeBinaryFunc(component);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates glTF json data\r\n     * @param shouldUseGlb Indicates whether the json should be written for a glb file\r\n     * @param glTFPrefix Text to use when prefixing a glTF file\r\n     * @param prettyPrint Indicates whether the json file should be pretty printed (true) or not (false)\r\n     * @returns json data as string\r\n     */\r\n    private _generateJSON(shouldUseGlb: boolean, glTFPrefix?: string, prettyPrint?: boolean): string {\r\n        const buffer: IBuffer = { byteLength: this._totalByteLength };\r\n        let imageName: string;\r\n        let imageData: { data: ArrayBuffer; mimeType: ImageMimeType };\r\n        let bufferView: IBufferView;\r\n        let byteOffset: number = this._totalByteLength;\r\n\r\n        if (buffer.byteLength) {\r\n            this._glTF.buffers = [buffer];\r\n        }\r\n        if (this._nodes && this._nodes.length) {\r\n            this._glTF.nodes = this._nodes;\r\n        }\r\n        if (this._meshes && this._meshes.length) {\r\n            this._glTF.meshes = this._meshes;\r\n        }\r\n        if (this._scenes && this._scenes.length) {\r\n            this._glTF.scenes = this._scenes;\r\n            this._glTF.scene = 0;\r\n        }\r\n        if (this._cameras && this._cameras.length) {\r\n            this._glTF.cameras = this._cameras;\r\n        }\r\n        if (this._bufferViews && this._bufferViews.length) {\r\n            this._glTF.bufferViews = this._bufferViews;\r\n        }\r\n        if (this._accessors && this._accessors.length) {\r\n            this._glTF.accessors = this._accessors;\r\n        }\r\n        if (this._animations && this._animations.length) {\r\n            this._glTF.animations = this._animations;\r\n        }\r\n        if (this._materials && this._materials.length) {\r\n            this._glTF.materials = this._materials;\r\n        }\r\n        if (this._textures && this._textures.length) {\r\n            this._glTF.textures = this._textures;\r\n        }\r\n        if (this._samplers && this._samplers.length) {\r\n            this._glTF.samplers = this._samplers;\r\n        }\r\n        if (this._skins && this._skins.length) {\r\n            this._glTF.skins = this._skins;\r\n        }\r\n        if (this._images && this._images.length) {\r\n            if (!shouldUseGlb) {\r\n                this._glTF.images = this._images;\r\n            } else {\r\n                this._glTF.images = [];\r\n\r\n                this._images.forEach((image) => {\r\n                    if (image.uri) {\r\n                        imageData = this._imageData[image.uri];\r\n                        this._orderedImageData.push(imageData);\r\n                        imageName = image.uri.split(\".\")[0] + \" image\";\r\n                        bufferView = _GLTFUtilities._CreateBufferView(0, byteOffset, imageData.data.byteLength, undefined, imageName);\r\n                        byteOffset += imageData.data.byteLength;\r\n                        this._bufferViews.push(bufferView);\r\n                        image.bufferView = this._bufferViews.length - 1;\r\n                        image.name = imageName;\r\n                        image.mimeType = imageData.mimeType;\r\n                        image.uri = undefined;\r\n                        if (!this._glTF.images) {\r\n                            this._glTF.images = [];\r\n                        }\r\n                        this._glTF.images.push(image);\r\n                    }\r\n                });\r\n                // Replace uri with bufferview and mime type for glb\r\n                buffer.byteLength = byteOffset;\r\n            }\r\n        }\r\n\r\n        if (!shouldUseGlb) {\r\n            buffer.uri = glTFPrefix + \".bin\";\r\n        }\r\n\r\n        const jsonText = prettyPrint ? JSON.stringify(this._glTF, null, 2) : JSON.stringify(this._glTF);\r\n\r\n        return jsonText;\r\n    }\r\n\r\n    /**\r\n     * Generates data for .gltf and .bin files based on the glTF prefix string\r\n     * @param glTFPrefix Text to use when prefixing a glTF file\r\n     * @param dispose Dispose the exporter\r\n     * @returns GLTFData with glTF file data\r\n     */\r\n    public _generateGLTFAsync(glTFPrefix: string, dispose = true): Promise<GLTFData> {\r\n        return this._generateBinaryAsync().then((binaryBuffer) => {\r\n            this._extensionsOnExporting();\r\n            const jsonText = this._generateJSON(false, glTFPrefix, true);\r\n            const bin = new Blob([binaryBuffer], { type: \"application/octet-stream\" });\r\n\r\n            const glTFFileName = glTFPrefix + \".gltf\";\r\n            const glTFBinFile = glTFPrefix + \".bin\";\r\n\r\n            const container = new GLTFData();\r\n\r\n            container.glTFFiles[glTFFileName] = jsonText;\r\n            container.glTFFiles[glTFBinFile] = bin;\r\n\r\n            if (this._imageData) {\r\n                for (const image in this._imageData) {\r\n                    container.glTFFiles[image] = new Blob([this._imageData[image].data], { type: this._imageData[image].mimeType });\r\n                }\r\n            }\r\n\r\n            if (dispose) {\r\n                this.dispose();\r\n            }\r\n\r\n            return container;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a binary buffer for glTF\r\n     * @returns array buffer for binary data\r\n     */\r\n    private _generateBinaryAsync(): Promise<ArrayBuffer> {\r\n        const binaryWriter = new _BinaryWriter(4);\r\n        return this._createSceneAsync(binaryWriter).then(() => {\r\n            if (this._localEngine) {\r\n                this._localEngine.dispose();\r\n            }\r\n            return binaryWriter.getArrayBuffer();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Pads the number to a multiple of 4\r\n     * @param num number to pad\r\n     * @returns padded number\r\n     */\r\n    private _getPadding(num: number): number {\r\n        const remainder = num % 4;\r\n        const padding = remainder === 0 ? remainder : 4 - remainder;\r\n\r\n        return padding;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _generateGLBAsync(glTFPrefix: string, dispose = true): Promise<GLTFData> {\r\n        return this._generateBinaryAsync().then((binaryBuffer) => {\r\n            this._extensionsOnExporting();\r\n            const jsonText = this._generateJSON(true);\r\n            const glbFileName = glTFPrefix + \".glb\";\r\n            const headerLength = 12;\r\n            const chunkLengthPrefix = 8;\r\n            let jsonLength = jsonText.length;\r\n            let encodedJsonText;\r\n            let imageByteLength = 0;\r\n            // make use of TextEncoder when available\r\n            if (typeof TextEncoder !== \"undefined\") {\r\n                const encoder = new TextEncoder();\r\n                encodedJsonText = encoder.encode(jsonText);\r\n                jsonLength = encodedJsonText.length;\r\n            }\r\n            for (let i = 0; i < this._orderedImageData.length; ++i) {\r\n                imageByteLength += this._orderedImageData[i].data.byteLength;\r\n            }\r\n            const jsonPadding = this._getPadding(jsonLength);\r\n            const binPadding = this._getPadding(binaryBuffer.byteLength);\r\n            const imagePadding = this._getPadding(imageByteLength);\r\n\r\n            const byteLength = headerLength + 2 * chunkLengthPrefix + jsonLength + jsonPadding + binaryBuffer.byteLength + binPadding + imageByteLength + imagePadding;\r\n\r\n            //header\r\n            const headerBuffer = new ArrayBuffer(headerLength);\r\n            const headerBufferView = new DataView(headerBuffer);\r\n            headerBufferView.setUint32(0, 0x46546c67, true); //glTF\r\n            headerBufferView.setUint32(4, 2, true); // version\r\n            headerBufferView.setUint32(8, byteLength, true); // total bytes in file\r\n\r\n            //json chunk\r\n            const jsonChunkBuffer = new ArrayBuffer(chunkLengthPrefix + jsonLength + jsonPadding);\r\n            const jsonChunkBufferView = new DataView(jsonChunkBuffer);\r\n            jsonChunkBufferView.setUint32(0, jsonLength + jsonPadding, true);\r\n            jsonChunkBufferView.setUint32(4, 0x4e4f534a, true);\r\n\r\n            //json chunk bytes\r\n            const jsonData = new Uint8Array(jsonChunkBuffer, chunkLengthPrefix);\r\n            // if TextEncoder was available, we can simply copy the encoded array\r\n            if (encodedJsonText) {\r\n                jsonData.set(encodedJsonText);\r\n            } else {\r\n                const blankCharCode = \"_\".charCodeAt(0);\r\n                for (let i = 0; i < jsonLength; ++i) {\r\n                    const charCode = jsonText.charCodeAt(i);\r\n                    // if the character doesn't fit into a single UTF-16 code unit, just put a blank character\r\n                    if (charCode != jsonText.codePointAt(i)) {\r\n                        jsonData[i] = blankCharCode;\r\n                    } else {\r\n                        jsonData[i] = charCode;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //json padding\r\n            const jsonPaddingView = new Uint8Array(jsonChunkBuffer, chunkLengthPrefix + jsonLength);\r\n            for (let i = 0; i < jsonPadding; ++i) {\r\n                jsonPaddingView[i] = 0x20;\r\n            }\r\n\r\n            //binary chunk\r\n            const binaryChunkBuffer = new ArrayBuffer(chunkLengthPrefix);\r\n            const binaryChunkBufferView = new DataView(binaryChunkBuffer);\r\n            binaryChunkBufferView.setUint32(0, binaryBuffer.byteLength + imageByteLength + imagePadding, true);\r\n            binaryChunkBufferView.setUint32(4, 0x004e4942, true);\r\n\r\n            // binary padding\r\n            const binPaddingBuffer = new ArrayBuffer(binPadding);\r\n            const binPaddingView = new Uint8Array(binPaddingBuffer);\r\n            for (let i = 0; i < binPadding; ++i) {\r\n                binPaddingView[i] = 0;\r\n            }\r\n\r\n            const imagePaddingBuffer = new ArrayBuffer(imagePadding);\r\n            const imagePaddingView = new Uint8Array(imagePaddingBuffer);\r\n            for (let i = 0; i < imagePadding; ++i) {\r\n                imagePaddingView[i] = 0;\r\n            }\r\n\r\n            const glbData = [headerBuffer, jsonChunkBuffer, binaryChunkBuffer, binaryBuffer];\r\n\r\n            // binary data\r\n            for (let i = 0; i < this._orderedImageData.length; ++i) {\r\n                glbData.push(this._orderedImageData[i].data);\r\n            }\r\n\r\n            glbData.push(binPaddingBuffer);\r\n\r\n            glbData.push(imagePaddingBuffer);\r\n\r\n            const glbFile = new Blob(glbData, { type: \"application/octet-stream\" });\r\n\r\n            const container = new GLTFData();\r\n            container.glTFFiles[glbFileName] = glbFile;\r\n\r\n            if (this._localEngine != null) {\r\n                this._localEngine.dispose();\r\n            }\r\n\r\n            if (dispose) {\r\n                this.dispose();\r\n            }\r\n\r\n            return container;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the TRS for each node\r\n     * @param node glTF Node for storing the transformation data\r\n     * @param babylonTransformNode Babylon mesh used as the source for the transformation data\r\n     */\r\n    private _setNodeTransformation(node: INode, babylonTransformNode: TransformNode): void {\r\n        if (!babylonTransformNode.getPivotPoint().equalsToFloats(0, 0, 0)) {\r\n            Tools.Warn(\"Pivot points are not supported in the glTF serializer\");\r\n        }\r\n        if (!babylonTransformNode.position.equalsToFloats(0, 0, 0)) {\r\n            node.translation = babylonTransformNode.position.asArray();\r\n        }\r\n\r\n        if (!babylonTransformNode.scaling.equalsToFloats(1, 1, 1)) {\r\n            node.scale = babylonTransformNode.scaling.asArray();\r\n        }\r\n\r\n        const rotationQuaternion = Quaternion.FromEulerAngles(babylonTransformNode.rotation.x, babylonTransformNode.rotation.y, babylonTransformNode.rotation.z);\r\n        if (babylonTransformNode.rotationQuaternion) {\r\n            rotationQuaternion.multiplyInPlace(babylonTransformNode.rotationQuaternion);\r\n        }\r\n        if (!Quaternion.IsIdentity(rotationQuaternion)) {\r\n            node.rotation = rotationQuaternion.normalize().asArray();\r\n        }\r\n    }\r\n\r\n    private _setCameraTransformation(node: INode, babylonCamera: Camera): void {\r\n        const translation = TmpVectors.Vector3[0];\r\n        const rotation = TmpVectors.Quaternion[0];\r\n        babylonCamera.getWorldMatrix().decompose(undefined, rotation, translation);\r\n\r\n        if (!translation.equalsToFloats(0, 0, 0)) {\r\n            node.translation = translation.asArray();\r\n        }\r\n\r\n        // // Rotation by 180 as glTF has a different convention than Babylon.\r\n        rotation.multiplyInPlace(rotation180Y);\r\n\r\n        if (!Quaternion.IsIdentity(rotation)) {\r\n            node.rotation = rotation.asArray();\r\n        }\r\n    }\r\n\r\n    private _getVertexBufferFromMesh(attributeKind: string, bufferMesh: Mesh): Nullable<VertexBuffer> {\r\n        if (bufferMesh.isVerticesDataPresent(attributeKind, true)) {\r\n            const vertexBuffer = bufferMesh.getVertexBuffer(attributeKind, true);\r\n            if (vertexBuffer) {\r\n                return vertexBuffer;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates a bufferview based on the vertices type for the Babylon mesh\r\n     * @param kind Indicates the type of vertices data\r\n     * @param attributeComponentKind Indicates the numerical type used to store the data\r\n     * @param babylonTransformNode The Babylon mesh to get the vertices data from\r\n     * @param binaryWriter The buffer to write the bufferview data to\r\n     * @param byteStride\r\n     */\r\n    private _createBufferViewKind(\r\n        kind: string,\r\n        attributeComponentKind: AccessorComponentType,\r\n        babylonTransformNode: TransformNode,\r\n        binaryWriter: _BinaryWriter,\r\n        byteStride: number\r\n    ) {\r\n        const bufferMesh =\r\n            babylonTransformNode instanceof Mesh\r\n                ? (babylonTransformNode as Mesh)\r\n                : babylonTransformNode instanceof InstancedMesh\r\n                  ? (babylonTransformNode as InstancedMesh).sourceMesh\r\n                  : null;\r\n\r\n        if (bufferMesh) {\r\n            const vertexBuffer = bufferMesh.getVertexBuffer(kind, true);\r\n            const vertexData = bufferMesh.getVerticesData(kind, undefined, undefined, true);\r\n\r\n            if (vertexBuffer && vertexData) {\r\n                const typeByteLength = VertexBuffer.GetTypeByteLength(attributeComponentKind);\r\n                const byteLength = vertexData.length * typeByteLength;\r\n                const bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, byteStride, kind + \" - \" + bufferMesh.name);\r\n                this._bufferViews.push(bufferView);\r\n\r\n                this._writeAttributeData(kind, attributeComponentKind, vertexData, byteStride / typeByteLength, binaryWriter, babylonTransformNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a bufferview based on the vertices type for the Babylon mesh\r\n     * @param babylonSubMesh The Babylon submesh that the morph target is applied to\r\n     * @param meshPrimitive\r\n     * @param babylonMorphTarget the morph target to be exported\r\n     * @param binaryWriter The buffer to write the bufferview data to\r\n     */\r\n    private _setMorphTargetAttributes(babylonSubMesh: SubMesh, meshPrimitive: IMeshPrimitive, babylonMorphTarget: MorphTarget, binaryWriter: _BinaryWriter) {\r\n        if (babylonMorphTarget) {\r\n            if (!meshPrimitive.targets) {\r\n                meshPrimitive.targets = [];\r\n            }\r\n            const target: { [attribute: string]: number } = {};\r\n            const mesh = babylonSubMesh.getMesh() as Mesh;\r\n            if (babylonMorphTarget.hasNormals) {\r\n                const vertexNormals = mesh.getVerticesData(VertexBuffer.NormalKind, undefined, undefined, true)!;\r\n                const morphNormals = babylonMorphTarget.getNormals()!;\r\n                const count = babylonSubMesh.verticesCount;\r\n                const byteStride = 12; // 3 x 4 byte floats\r\n                const byteLength = count * byteStride;\r\n                const bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, byteStride, babylonMorphTarget.name + \"_NORMAL\");\r\n                this._bufferViews.push(bufferView);\r\n\r\n                const bufferViewIndex = this._bufferViews.length - 1;\r\n                const accessor = _GLTFUtilities._CreateAccessor(\r\n                    bufferViewIndex,\r\n                    babylonMorphTarget.name + \" - \" + \"NORMAL\",\r\n                    AccessorType.VEC3,\r\n                    AccessorComponentType.FLOAT,\r\n                    count,\r\n                    0,\r\n                    null,\r\n                    null\r\n                );\r\n                this._accessors.push(accessor);\r\n                target.NORMAL = this._accessors.length - 1;\r\n\r\n                this.writeMorphTargetAttributeData(VertexBuffer.NormalKind, AccessorComponentType.FLOAT, babylonSubMesh, vertexNormals, morphNormals, byteStride / 4, binaryWriter);\r\n            }\r\n            if (babylonMorphTarget.hasPositions) {\r\n                const vertexPositions = mesh.getVerticesData(VertexBuffer.PositionKind, undefined, undefined, true)!;\r\n                const morphPositions = babylonMorphTarget.getPositions()!;\r\n                const count = babylonSubMesh.verticesCount;\r\n                const byteStride = 12; // 3 x 4 byte floats\r\n                const byteLength = count * byteStride;\r\n                const bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, byteStride, babylonMorphTarget.name + \"_POSITION\");\r\n                this._bufferViews.push(bufferView);\r\n\r\n                const bufferViewIndex = this._bufferViews.length - 1;\r\n                const minMax = { min: new Vector3(Infinity, Infinity, Infinity), max: new Vector3(-Infinity, -Infinity, -Infinity) };\r\n                const accessor = _GLTFUtilities._CreateAccessor(\r\n                    bufferViewIndex,\r\n                    babylonMorphTarget.name + \" - \" + \"POSITION\",\r\n                    AccessorType.VEC3,\r\n                    AccessorComponentType.FLOAT,\r\n                    count,\r\n                    0,\r\n                    null,\r\n                    null\r\n                );\r\n                this._accessors.push(accessor);\r\n                target.POSITION = this._accessors.length - 1;\r\n\r\n                this.writeMorphTargetAttributeData(\r\n                    VertexBuffer.PositionKind,\r\n                    AccessorComponentType.FLOAT,\r\n                    babylonSubMesh,\r\n                    vertexPositions,\r\n                    morphPositions,\r\n                    byteStride / 4,\r\n                    binaryWriter,\r\n                    minMax\r\n                );\r\n                accessor.min = minMax.min!.asArray();\r\n                accessor.max = minMax.max!.asArray();\r\n            }\r\n            if (babylonMorphTarget.hasTangents) {\r\n                const vertexTangents = mesh.getVerticesData(VertexBuffer.TangentKind, undefined, undefined, true)!;\r\n                const morphTangents = babylonMorphTarget.getTangents()!;\r\n                const count = babylonSubMesh.verticesCount;\r\n                const byteStride = 12; // 3 x 4 byte floats\r\n                const byteLength = count * byteStride;\r\n                const bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, byteStride, babylonMorphTarget.name + \"_NORMAL\");\r\n                this._bufferViews.push(bufferView);\r\n\r\n                const bufferViewIndex = this._bufferViews.length - 1;\r\n                const accessor = _GLTFUtilities._CreateAccessor(\r\n                    bufferViewIndex,\r\n                    babylonMorphTarget.name + \" - \" + \"TANGENT\",\r\n                    AccessorType.VEC3,\r\n                    AccessorComponentType.FLOAT,\r\n                    count,\r\n                    0,\r\n                    null,\r\n                    null\r\n                );\r\n                this._accessors.push(accessor);\r\n                target.TANGENT = this._accessors.length - 1;\r\n\r\n                this.writeMorphTargetAttributeData(\r\n                    VertexBuffer.TangentKind,\r\n                    AccessorComponentType.FLOAT,\r\n                    babylonSubMesh,\r\n                    vertexTangents,\r\n                    morphTangents,\r\n                    byteStride / 4,\r\n                    binaryWriter\r\n                );\r\n            }\r\n            meshPrimitive.targets.push(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The primitive mode of the Babylon mesh\r\n     * @param babylonMesh The BabylonJS mesh\r\n     * @returns Unsigned integer of the primitive mode or null\r\n     */\r\n    private _getMeshPrimitiveMode(babylonMesh: AbstractMesh): number {\r\n        if (babylonMesh instanceof LinesMesh) {\r\n            return Material.LineListDrawMode;\r\n        }\r\n        if (babylonMesh instanceof InstancedMesh || babylonMesh instanceof Mesh) {\r\n            const baseMesh = babylonMesh instanceof Mesh ? babylonMesh : babylonMesh.sourceMesh;\r\n            if (typeof baseMesh.overrideRenderingFillMode === \"number\") {\r\n                return baseMesh.overrideRenderingFillMode;\r\n            }\r\n        }\r\n        return babylonMesh.material ? babylonMesh.material.fillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the primitive mode of the glTF mesh primitive\r\n     * @param meshPrimitive glTF mesh primitive\r\n     * @param primitiveMode The primitive mode\r\n     */\r\n    private _setPrimitiveMode(meshPrimitive: IMeshPrimitive, primitiveMode: number) {\r\n        switch (primitiveMode) {\r\n            case Material.TriangleFillMode: {\r\n                // glTF defaults to using Triangle Mode\r\n                break;\r\n            }\r\n            case Material.TriangleStripDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.TRIANGLE_STRIP;\r\n                break;\r\n            }\r\n            case Material.TriangleFanDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.TRIANGLE_FAN;\r\n                break;\r\n            }\r\n            case Material.PointListDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.POINTS;\r\n                break;\r\n            }\r\n            case Material.PointFillMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.POINTS;\r\n                break;\r\n            }\r\n            case Material.LineLoopDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.LINE_LOOP;\r\n                break;\r\n            }\r\n            case Material.LineListDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.LINES;\r\n                break;\r\n            }\r\n            case Material.LineStripDrawMode: {\r\n                meshPrimitive.mode = MeshPrimitiveMode.LINE_STRIP;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex attribute accessor based of the glTF mesh primitive\r\n     * @param meshPrimitive glTF mesh primitive\r\n     * @param attributeKind vertex attribute\r\n     */\r\n    private _setAttributeKind(meshPrimitive: IMeshPrimitive, attributeKind: string): void {\r\n        switch (attributeKind) {\r\n            case VertexBuffer.PositionKind: {\r\n                meshPrimitive.attributes.POSITION = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.NormalKind: {\r\n                meshPrimitive.attributes.NORMAL = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.ColorKind: {\r\n                meshPrimitive.attributes.COLOR_0 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.TangentKind: {\r\n                meshPrimitive.attributes.TANGENT = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.UVKind: {\r\n                meshPrimitive.attributes.TEXCOORD_0 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.UV2Kind: {\r\n                meshPrimitive.attributes.TEXCOORD_1 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesIndicesKind: {\r\n                meshPrimitive.attributes.JOINTS_0 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesIndicesExtraKind: {\r\n                meshPrimitive.attributes.JOINTS_1 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesWeightsKind: {\r\n                meshPrimitive.attributes.WEIGHTS_0 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            case VertexBuffer.MatricesWeightsExtraKind: {\r\n                meshPrimitive.attributes.WEIGHTS_1 = this._accessors.length - 1;\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Warn(\"Unsupported Vertex Buffer Type: \" + attributeKind);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets data for the primitive attributes of each submesh\r\n     * @param mesh glTF Mesh object to store the primitive attribute information\r\n     * @param babylonTransformNode Babylon mesh to get the primitive attribute data from\r\n     * @param binaryWriter Buffer to write the attribute data to\r\n     * @returns promise that resolves when done setting the primitive attributes\r\n     */\r\n    private _setPrimitiveAttributesAsync(mesh: IMesh, babylonTransformNode: TransformNode, binaryWriter: _BinaryWriter): Promise<void> {\r\n        const promises: Promise<IMeshPrimitive>[] = [];\r\n        let bufferMesh: Nullable<Mesh> = null;\r\n        let bufferView: IBufferView;\r\n        let minMax: { min: Nullable<number[]>; max: Nullable<number[]> };\r\n\r\n        if (babylonTransformNode instanceof Mesh) {\r\n            bufferMesh = babylonTransformNode as Mesh;\r\n        } else if (babylonTransformNode instanceof InstancedMesh) {\r\n            bufferMesh = (babylonTransformNode as InstancedMesh).sourceMesh;\r\n        }\r\n        const attributeData: _IVertexAttributeData[] = [\r\n            { kind: VertexBuffer.PositionKind, accessorType: AccessorType.VEC3, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 12 },\r\n            { kind: VertexBuffer.NormalKind, accessorType: AccessorType.VEC3, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 12 },\r\n            { kind: VertexBuffer.ColorKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 16 },\r\n            { kind: VertexBuffer.TangentKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 16 },\r\n            { kind: VertexBuffer.UVKind, accessorType: AccessorType.VEC2, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 8 },\r\n            { kind: VertexBuffer.UV2Kind, accessorType: AccessorType.VEC2, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 8 },\r\n            { kind: VertexBuffer.MatricesIndicesKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.UNSIGNED_SHORT, byteStride: 8 },\r\n            { kind: VertexBuffer.MatricesIndicesExtraKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.UNSIGNED_SHORT, byteStride: 8 },\r\n            { kind: VertexBuffer.MatricesWeightsKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 16 },\r\n            { kind: VertexBuffer.MatricesWeightsExtraKind, accessorType: AccessorType.VEC4, accessorComponentType: AccessorComponentType.FLOAT, byteStride: 16 },\r\n        ];\r\n\r\n        if (bufferMesh) {\r\n            let indexBufferViewIndex: Nullable<number> = null;\r\n            const primitiveMode = this._getMeshPrimitiveMode(bufferMesh);\r\n            const vertexAttributeBufferViews: { [attributeKind: string]: number } = {};\r\n            const morphTargetManager = bufferMesh.morphTargetManager;\r\n\r\n            // For each BabylonMesh, create bufferviews for each 'kind'\r\n            for (const attribute of attributeData) {\r\n                const attributeKind = attribute.kind;\r\n                const attributeComponentKind = attribute.accessorComponentType;\r\n                if (bufferMesh.isVerticesDataPresent(attributeKind, true)) {\r\n                    const vertexBuffer = this._getVertexBufferFromMesh(attributeKind, bufferMesh);\r\n                    attribute.byteStride = vertexBuffer\r\n                        ? vertexBuffer.getSize() * VertexBuffer.GetTypeByteLength(attribute.accessorComponentType)\r\n                        : VertexBuffer.DeduceStride(attributeKind) * 4;\r\n                    if (attribute.byteStride === 12) {\r\n                        attribute.accessorType = AccessorType.VEC3;\r\n                    }\r\n\r\n                    this._createBufferViewKind(attributeKind, attributeComponentKind, babylonTransformNode, binaryWriter, attribute.byteStride);\r\n                    attribute.bufferViewIndex = this._bufferViews.length - 1;\r\n                    vertexAttributeBufferViews[attributeKind] = attribute.bufferViewIndex;\r\n                }\r\n            }\r\n\r\n            if (bufferMesh.getTotalIndices()) {\r\n                const indices = bufferMesh.getIndices();\r\n                if (indices) {\r\n                    const byteLength = indices.length * 4;\r\n                    bufferView = _GLTFUtilities._CreateBufferView(0, binaryWriter.getByteOffset(), byteLength, undefined, \"Indices - \" + bufferMesh.name);\r\n                    this._bufferViews.push(bufferView);\r\n                    indexBufferViewIndex = this._bufferViews.length - 1;\r\n\r\n                    for (let k = 0, length = indices.length; k < length; ++k) {\r\n                        binaryWriter.setUInt32(indices[k]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (bufferMesh.subMeshes) {\r\n                // go through all mesh primitives (submeshes)\r\n                for (const submesh of bufferMesh.subMeshes) {\r\n                    let babylonMaterial = submesh.getMaterial() || bufferMesh.getScene().defaultMaterial;\r\n\r\n                    let materialIndex: Nullable<number> = null;\r\n                    if (babylonMaterial) {\r\n                        if (bufferMesh instanceof LinesMesh) {\r\n                            // get the color from the lines mesh and set it in the material\r\n                            const material: IMaterial = {\r\n                                name: bufferMesh.name + \" material\",\r\n                            };\r\n                            if (!bufferMesh.color.equals(Color3.White()) || bufferMesh.alpha < 1) {\r\n                                material.pbrMetallicRoughness = {\r\n                                    baseColorFactor: bufferMesh.color.asArray().concat([bufferMesh.alpha]),\r\n                                };\r\n                            }\r\n                            this._materials.push(material);\r\n                            materialIndex = this._materials.length - 1;\r\n                        } else if (babylonMaterial instanceof MultiMaterial) {\r\n                            const subMaterial = babylonMaterial.subMaterials[submesh.materialIndex];\r\n                            if (subMaterial) {\r\n                                babylonMaterial = subMaterial;\r\n                                materialIndex = this._materialMap[babylonMaterial.uniqueId];\r\n                            }\r\n                        } else {\r\n                            materialIndex = this._materialMap[babylonMaterial.uniqueId];\r\n                        }\r\n                    }\r\n\r\n                    const glTFMaterial: Nullable<IMaterial> = materialIndex != null ? this._materials[materialIndex] : null;\r\n\r\n                    const meshPrimitive: IMeshPrimitive = { attributes: {} };\r\n                    this._setPrimitiveMode(meshPrimitive, primitiveMode);\r\n\r\n                    for (const attribute of attributeData) {\r\n                        const attributeKind = attribute.kind;\r\n                        if ((attributeKind === VertexBuffer.UVKind || attributeKind === VertexBuffer.UV2Kind) && !this._options.exportUnusedUVs) {\r\n                            if (!glTFMaterial || !this._glTFMaterialExporter._hasTexturesPresent(glTFMaterial)) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                        const vertexData = bufferMesh.getVerticesData(attributeKind, undefined, undefined, true);\r\n                        if (vertexData) {\r\n                            const vertexBuffer = this._getVertexBufferFromMesh(attributeKind, bufferMesh);\r\n                            if (vertexBuffer) {\r\n                                const stride = vertexBuffer.getSize();\r\n                                const bufferViewIndex = attribute.bufferViewIndex;\r\n                                if (bufferViewIndex != undefined) {\r\n                                    // check to see if bufferviewindex has a numeric value assigned.\r\n                                    minMax = { min: null, max: null };\r\n                                    if (attributeKind == VertexBuffer.PositionKind) {\r\n                                        minMax = _GLTFUtilities._CalculateMinMaxPositions(vertexData, 0, vertexData.length / stride);\r\n                                    }\r\n                                    const accessor = _GLTFUtilities._CreateAccessor(\r\n                                        bufferViewIndex,\r\n                                        attributeKind + \" - \" + babylonTransformNode.name,\r\n                                        attribute.accessorType,\r\n                                        attribute.accessorComponentType,\r\n                                        vertexData.length / stride,\r\n                                        0,\r\n                                        minMax.min,\r\n                                        minMax.max\r\n                                    );\r\n                                    this._accessors.push(accessor);\r\n                                    this._setAttributeKind(meshPrimitive, attributeKind);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (indexBufferViewIndex) {\r\n                        // Create accessor\r\n                        const accessor = _GLTFUtilities._CreateAccessor(\r\n                            indexBufferViewIndex,\r\n                            \"indices - \" + babylonTransformNode.name,\r\n                            AccessorType.SCALAR,\r\n                            AccessorComponentType.UNSIGNED_INT,\r\n                            submesh.indexCount,\r\n                            submesh.indexStart * 4,\r\n                            null,\r\n                            null\r\n                        );\r\n                        this._accessors.push(accessor);\r\n                        meshPrimitive.indices = this._accessors.length - 1;\r\n                    }\r\n\r\n                    if (Object.keys(meshPrimitive.attributes).length > 0) {\r\n                        const sideOrientation = bufferMesh.overrideMaterialSideOrientation !== null ? bufferMesh.overrideMaterialSideOrientation : babylonMaterial.sideOrientation;\r\n\r\n                        if (sideOrientation === (this._babylonScene.useRightHandedSystem ? Material.ClockWiseSideOrientation : Material.CounterClockWiseSideOrientation)) {\r\n                            let byteOffset = indexBufferViewIndex != null ? this._bufferViews[indexBufferViewIndex].byteOffset : null;\r\n                            if (byteOffset == null) {\r\n                                byteOffset = 0;\r\n                            }\r\n                            let babylonIndices: Nullable<IndicesArray> = null;\r\n                            if (indexBufferViewIndex != null) {\r\n                                babylonIndices = bufferMesh.getIndices();\r\n                            }\r\n                            if (babylonIndices) {\r\n                                this._reorderIndicesBasedOnPrimitiveMode(submesh, primitiveMode, babylonIndices, byteOffset, binaryWriter);\r\n                            } else {\r\n                                for (const attribute of attributeData) {\r\n                                    const vertexData = bufferMesh.getVerticesData(attribute.kind, undefined, undefined, true);\r\n                                    if (vertexData) {\r\n                                        const byteOffset = this._bufferViews[vertexAttributeBufferViews[attribute.kind]].byteOffset || 0;\r\n                                        this._reorderVertexAttributeDataBasedOnPrimitiveMode(submesh, primitiveMode, attribute.kind, vertexData, byteOffset, binaryWriter);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (materialIndex != null) {\r\n                            meshPrimitive.material = materialIndex;\r\n                        }\r\n                    }\r\n                    if (morphTargetManager) {\r\n                        // By convention, morph target names are stored in the mesh extras.\r\n                        if (!mesh.extras) {\r\n                            mesh.extras = {};\r\n                        }\r\n                        mesh.extras.targetNames = [];\r\n\r\n                        for (let i = 0; i < morphTargetManager.numTargets; ++i) {\r\n                            const target = morphTargetManager.getTarget(i);\r\n                            this._setMorphTargetAttributes(submesh, meshPrimitive, target, binaryWriter);\r\n                            mesh.extras.targetNames.push(target.name);\r\n                        }\r\n                    }\r\n\r\n                    mesh.primitives.push(meshPrimitive);\r\n\r\n                    this._extensionsPostExportMeshPrimitiveAsync(\"postExport\", meshPrimitive, submesh, binaryWriter);\r\n                    promises.push();\r\n                }\r\n            }\r\n        }\r\n        return Promise.all(promises).then(() => {\r\n            /* do nothing */\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a glTF scene based on the array of meshes\r\n     * Returns the total byte offset\r\n     * @param binaryWriter Buffer to write binary data to\r\n     * @returns a promise that resolves when done\r\n     */\r\n    private _createSceneAsync(binaryWriter: _BinaryWriter): Promise<void> {\r\n        const scene: IScene = { nodes: [] };\r\n        let glTFNodeIndex: number;\r\n        let glTFNode: INode;\r\n        let directDescendents: Node[];\r\n        const nodes: Node[] = [...this._babylonScene.transformNodes, ...this._babylonScene.meshes, ...this._babylonScene.lights, ...this._babylonScene.cameras];\r\n        const removedRootNodes = new Set<Node>();\r\n\r\n        // Scene metadata\r\n        if (this._babylonScene.metadata) {\r\n            if (this._options.metadataSelector) {\r\n                scene.extras = this._options.metadataSelector(this._babylonScene.metadata);\r\n            } else if (this._babylonScene.metadata.gltf) {\r\n                scene.extras = this._babylonScene.metadata.gltf.extras;\r\n            }\r\n        }\r\n\r\n        // Remove no-op root nodes\r\n        if ((this._options.removeNoopRootNodes ?? true) && !this._options.includeCoordinateSystemConversionNodes) {\r\n            for (const rootNode of this._babylonScene.rootNodes) {\r\n                if (isNoopNode(rootNode, this._babylonScene.useRightHandedSystem)) {\r\n                    removedRootNodes.add(rootNode);\r\n\r\n                    // Exclude the node from list of nodes to export\r\n                    nodes.splice(nodes.indexOf(rootNode), 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Export babylon cameras to glTFCamera\r\n        const cameraMap = new Map<Camera, number>();\r\n        this._babylonScene.cameras.forEach((camera) => {\r\n            if (this._options.shouldExportNode && !this._options.shouldExportNode(camera)) {\r\n                return;\r\n            }\r\n\r\n            const glTFCamera: ICamera = {\r\n                type: camera.mode === Camera.PERSPECTIVE_CAMERA ? CameraType.PERSPECTIVE : CameraType.ORTHOGRAPHIC,\r\n            };\r\n\r\n            if (camera.name) {\r\n                glTFCamera.name = camera.name;\r\n            }\r\n\r\n            if (glTFCamera.type === CameraType.PERSPECTIVE) {\r\n                glTFCamera.perspective = {\r\n                    aspectRatio: camera.getEngine().getAspectRatio(camera),\r\n                    yfov: camera.fovMode === Camera.FOVMODE_VERTICAL_FIXED ? camera.fov : camera.fov * camera.getEngine().getAspectRatio(camera),\r\n                    znear: camera.minZ,\r\n                    zfar: camera.maxZ,\r\n                };\r\n            } else if (glTFCamera.type === CameraType.ORTHOGRAPHIC) {\r\n                const halfWidth = camera.orthoLeft && camera.orthoRight ? 0.5 * (camera.orthoRight - camera.orthoLeft) : camera.getEngine().getRenderWidth() * 0.5;\r\n                const halfHeight = camera.orthoBottom && camera.orthoTop ? 0.5 * (camera.orthoTop - camera.orthoBottom) : camera.getEngine().getRenderHeight() * 0.5;\r\n                glTFCamera.orthographic = {\r\n                    xmag: halfWidth,\r\n                    ymag: halfHeight,\r\n                    znear: camera.minZ,\r\n                    zfar: camera.maxZ,\r\n                };\r\n            }\r\n\r\n            cameraMap.set(camera, this._cameras.length);\r\n            this._cameras.push(glTFCamera);\r\n        });\r\n\r\n        const [exportNodes, exportMaterials] = this._getExportNodes(nodes);\r\n        return this._glTFMaterialExporter._convertMaterialsToGLTFAsync(exportMaterials, ImageMimeType.PNG, true).then(() => {\r\n            return this._createNodeMapAndAnimationsAsync(exportNodes, binaryWriter).then((nodeMap) => {\r\n                return this._createSkinsAsync(nodeMap, binaryWriter).then((skinMap) => {\r\n                    this._nodeMap = nodeMap;\r\n\r\n                    this._totalByteLength = binaryWriter.getByteOffset();\r\n                    if (this._totalByteLength == undefined) {\r\n                        throw new Error(\"undefined byte length!\");\r\n                    }\r\n\r\n                    // Build Hierarchy with the node map.\r\n                    for (const babylonNode of nodes) {\r\n                        glTFNodeIndex = this._nodeMap[babylonNode.uniqueId];\r\n                        if (glTFNodeIndex !== undefined) {\r\n                            glTFNode = this._nodes[glTFNodeIndex];\r\n\r\n                            if (babylonNode.metadata) {\r\n                                if (this._options.metadataSelector) {\r\n                                    glTFNode.extras = this._options.metadataSelector(babylonNode.metadata);\r\n                                } else if (babylonNode.metadata.gltf) {\r\n                                    glTFNode.extras = babylonNode.metadata.gltf.extras;\r\n                                }\r\n                            }\r\n\r\n                            if (babylonNode instanceof Camera) {\r\n                                glTFNode.camera = cameraMap.get(babylonNode);\r\n                            }\r\n\r\n                            if (this._options.shouldExportNode && !this._options.shouldExportNode(babylonNode)) {\r\n                                Tools.Log(\"Omitting \" + babylonNode.name + \" from scene.\");\r\n                            } else {\r\n                                if (!babylonNode.parent && !this._babylonScene.useRightHandedSystem) {\r\n                                    convertNodeHandedness(glTFNode);\r\n                                }\r\n\r\n                                if (!babylonNode.parent || removedRootNodes.has(babylonNode.parent)) {\r\n                                    scene.nodes.push(glTFNodeIndex);\r\n                                }\r\n                            }\r\n\r\n                            if (babylonNode instanceof Mesh) {\r\n                                if (babylonNode.skeleton) {\r\n                                    glTFNode.skin = skinMap[babylonNode.skeleton.uniqueId];\r\n                                }\r\n                            }\r\n\r\n                            directDescendents = babylonNode.getDescendants(true);\r\n                            if (!glTFNode.children && directDescendents && directDescendents.length) {\r\n                                const children: number[] = [];\r\n                                for (const descendent of directDescendents) {\r\n                                    if (this._nodeMap[descendent.uniqueId] != null) {\r\n                                        children.push(this._nodeMap[descendent.uniqueId]);\r\n                                    }\r\n                                }\r\n                                if (children.length) {\r\n                                    glTFNode.children = children;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (scene.nodes.length) {\r\n                        this._scenes.push(scene);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Getting the nodes and materials that would be exported.\r\n     * @param nodes Babylon transform nodes\r\n     * @returns Set of materials which would be exported.\r\n     */\r\n    private _getExportNodes(nodes: Node[]): [Node[], Set<Material>] {\r\n        const exportNodes: Node[] = [];\r\n        const exportMaterials: Set<Material> = new Set<Material>();\r\n\r\n        for (const babylonNode of nodes) {\r\n            if (!this._options.shouldExportNode || this._options.shouldExportNode(babylonNode)) {\r\n                exportNodes.push(babylonNode);\r\n\r\n                const babylonMesh = babylonNode as AbstractMesh;\r\n                if (babylonMesh.subMeshes && babylonMesh.subMeshes.length > 0) {\r\n                    const material = babylonMesh.material || babylonMesh.getScene().defaultMaterial;\r\n                    if (material instanceof MultiMaterial) {\r\n                        for (const subMaterial of material.subMaterials) {\r\n                            if (subMaterial) {\r\n                                exportMaterials.add(subMaterial);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        exportMaterials.add(material);\r\n                    }\r\n                }\r\n            } else {\r\n                `Excluding node ${babylonNode.name}`;\r\n            }\r\n        }\r\n\r\n        return [exportNodes, exportMaterials];\r\n    }\r\n\r\n    /**\r\n     * Creates a mapping of Node unique id to node index and handles animations\r\n     * @param nodes Babylon transform nodes\r\n     * @param binaryWriter Buffer to write binary data to\r\n     * @returns Node mapping of unique id to index\r\n     */\r\n    private _createNodeMapAndAnimationsAsync(nodes: Node[], binaryWriter: _BinaryWriter): Promise<{ [key: number]: number }> {\r\n        let promiseChain = Promise.resolve();\r\n        const nodeMap: { [key: number]: number } = {};\r\n        let nodeIndex: number;\r\n        const runtimeGLTFAnimation: IAnimation = {\r\n            name: \"runtime animations\",\r\n            channels: [],\r\n            samplers: [],\r\n        };\r\n        const idleGLTFAnimations: IAnimation[] = [];\r\n\r\n        for (const babylonNode of nodes) {\r\n            promiseChain = promiseChain.then(() => {\r\n                return this._createNodeAsync(babylonNode, binaryWriter).then((node) => {\r\n                    const promise = this._extensionsPostExportNodeAsync(\"createNodeAsync\", node, babylonNode, nodeMap, binaryWriter);\r\n                    if (promise == null) {\r\n                        Tools.Warn(`Not exporting node ${babylonNode.name}`);\r\n                        return Promise.resolve();\r\n                    } else {\r\n                        return promise.then((node) => {\r\n                            if (!node) {\r\n                                return;\r\n                            }\r\n                            this._nodes.push(node);\r\n                            nodeIndex = this._nodes.length - 1;\r\n                            nodeMap[babylonNode.uniqueId] = nodeIndex;\r\n\r\n                            if (!this._babylonScene.animationGroups.length) {\r\n                                _GLTFAnimation._CreateMorphTargetAnimationFromMorphTargetAnimations(\r\n                                    babylonNode,\r\n                                    runtimeGLTFAnimation,\r\n                                    idleGLTFAnimations,\r\n                                    nodeMap,\r\n                                    this._nodes,\r\n                                    binaryWriter,\r\n                                    this._bufferViews,\r\n                                    this._accessors,\r\n                                    this._animationSampleRate,\r\n                                    this._options.shouldExportAnimation\r\n                                );\r\n                                if (babylonNode.animations.length) {\r\n                                    _GLTFAnimation._CreateNodeAnimationFromNodeAnimations(\r\n                                        babylonNode,\r\n                                        runtimeGLTFAnimation,\r\n                                        idleGLTFAnimations,\r\n                                        nodeMap,\r\n                                        this._nodes,\r\n                                        binaryWriter,\r\n                                        this._bufferViews,\r\n                                        this._accessors,\r\n                                        this._animationSampleRate,\r\n                                        this._options.shouldExportAnimation\r\n                                    );\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        return promiseChain.then(() => {\r\n            if (runtimeGLTFAnimation.channels.length && runtimeGLTFAnimation.samplers.length) {\r\n                this._animations.push(runtimeGLTFAnimation);\r\n            }\r\n            idleGLTFAnimations.forEach((idleGLTFAnimation) => {\r\n                if (idleGLTFAnimation.channels.length && idleGLTFAnimation.samplers.length) {\r\n                    this._animations.push(idleGLTFAnimation);\r\n                }\r\n            });\r\n\r\n            if (this._babylonScene.animationGroups.length) {\r\n                _GLTFAnimation._CreateNodeAndMorphAnimationFromAnimationGroups(\r\n                    this._babylonScene,\r\n                    this._animations,\r\n                    nodeMap,\r\n                    binaryWriter,\r\n                    this._bufferViews,\r\n                    this._accessors,\r\n                    this._animationSampleRate,\r\n                    this._options.shouldExportAnimation\r\n                );\r\n            }\r\n\r\n            return nodeMap;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a glTF node from a Babylon mesh\r\n     * @param babylonNode Source Babylon mesh\r\n     * @param binaryWriter Buffer for storing geometry data\r\n     * @returns glTF node\r\n     */\r\n    private _createNodeAsync(babylonNode: Node, binaryWriter: _BinaryWriter): Promise<INode> {\r\n        return Promise.resolve().then(() => {\r\n            // create node to hold translation/rotation/scale and the mesh\r\n            const node: INode = {};\r\n            // create mesh\r\n            const mesh: IMesh = { primitives: [] };\r\n\r\n            if (babylonNode.name) {\r\n                node.name = babylonNode.name;\r\n            }\r\n\r\n            if (babylonNode instanceof TransformNode) {\r\n                // Set transformation\r\n                this._setNodeTransformation(node, babylonNode);\r\n                if (babylonNode instanceof Mesh) {\r\n                    const morphTargetManager = babylonNode.morphTargetManager;\r\n                    if (morphTargetManager && morphTargetManager.numTargets > 0) {\r\n                        mesh.weights = [];\r\n                        for (let i = 0; i < morphTargetManager.numTargets; ++i) {\r\n                            mesh.weights.push(morphTargetManager.getTarget(i).influence);\r\n                        }\r\n                    }\r\n                }\r\n                return this._setPrimitiveAttributesAsync(mesh, babylonNode, binaryWriter).then(() => {\r\n                    if (mesh.primitives.length) {\r\n                        this._meshes.push(mesh);\r\n                        node.mesh = this._meshes.length - 1;\r\n                    }\r\n                    return node;\r\n                });\r\n            } else if (babylonNode instanceof Camera) {\r\n                this._setCameraTransformation(node, babylonNode);\r\n                return node;\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a glTF skin from a Babylon skeleton\r\n     * @param nodeMap Babylon transform nodes\r\n     * @param binaryWriter Buffer to write binary data to\r\n     * @returns Node mapping of unique id to index\r\n     */\r\n    private _createSkinsAsync(nodeMap: { [key: number]: number }, binaryWriter: _BinaryWriter): Promise<{ [key: number]: number }> {\r\n        const promiseChain = Promise.resolve();\r\n        const skinMap: { [key: number]: number } = {};\r\n        for (const skeleton of this._babylonScene.skeletons) {\r\n            if (skeleton.bones.length <= 0) {\r\n                continue;\r\n            }\r\n            // create skin\r\n            const skin: ISkin = { joints: [] };\r\n            const inverseBindMatrices: Matrix[] = [];\r\n\r\n            const boneIndexMap: { [index: number]: Bone } = {};\r\n            let maxBoneIndex = -1;\r\n            for (let i = 0; i < skeleton.bones.length; ++i) {\r\n                const bone = skeleton.bones[i];\r\n                const boneIndex = bone.getIndex() ?? i;\r\n                if (boneIndex !== -1) {\r\n                    boneIndexMap[boneIndex] = bone;\r\n                    if (boneIndex > maxBoneIndex) {\r\n                        maxBoneIndex = boneIndex;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let boneIndex = 0; boneIndex <= maxBoneIndex; ++boneIndex) {\r\n                const bone = boneIndexMap[boneIndex];\r\n                inverseBindMatrices.push(bone.getInvertedAbsoluteTransform());\r\n\r\n                const transformNode = bone.getTransformNode();\r\n                if (transformNode && nodeMap[transformNode.uniqueId] !== null && nodeMap[transformNode.uniqueId] !== undefined) {\r\n                    skin.joints.push(nodeMap[transformNode.uniqueId]);\r\n                } else {\r\n                    Tools.Warn(\"Exporting a bone without a linked transform node is currently unsupported\");\r\n                }\r\n            }\r\n\r\n            if (skin.joints.length > 0) {\r\n                // create buffer view for inverse bind matrices\r\n                const byteStride = 64; // 4 x 4 matrix of 32 bit float\r\n                const byteLength = inverseBindMatrices.length * byteStride;\r\n                const bufferViewOffset = binaryWriter.getByteOffset();\r\n                const bufferView = _GLTFUtilities._CreateBufferView(0, bufferViewOffset, byteLength, undefined, \"InverseBindMatrices\" + \" - \" + skeleton.name);\r\n                this._bufferViews.push(bufferView);\r\n                const bufferViewIndex = this._bufferViews.length - 1;\r\n                const bindMatrixAccessor = _GLTFUtilities._CreateAccessor(\r\n                    bufferViewIndex,\r\n                    \"InverseBindMatrices\" + \" - \" + skeleton.name,\r\n                    AccessorType.MAT4,\r\n                    AccessorComponentType.FLOAT,\r\n                    inverseBindMatrices.length,\r\n                    null,\r\n                    null,\r\n                    null\r\n                );\r\n                const inverseBindAccessorIndex = this._accessors.push(bindMatrixAccessor) - 1;\r\n                skin.inverseBindMatrices = inverseBindAccessorIndex;\r\n                this._skins.push(skin);\r\n                skinMap[skeleton.uniqueId] = this._skins.length - 1;\r\n\r\n                inverseBindMatrices.forEach((mat) => {\r\n                    mat.m.forEach((cell: number) => {\r\n                        binaryWriter.setFloat32(cell);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        return promiseChain.then(() => {\r\n            return skinMap;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Stores glTF binary data.  If the array buffer byte length is exceeded, it doubles in size dynamically\r\n */\r\nexport class _BinaryWriter {\r\n    /**\r\n     * Array buffer which stores all binary data\r\n     */\r\n    private _arrayBuffer: ArrayBuffer;\r\n    /**\r\n     * View of the array buffer\r\n     */\r\n    private _dataView: DataView;\r\n    /**\r\n     * byte offset of data in array buffer\r\n     */\r\n    private _byteOffset: number;\r\n    /**\r\n     * Initialize binary writer with an initial byte length\r\n     * @param byteLength Initial byte length of the array buffer\r\n     */\r\n    constructor(byteLength: number) {\r\n        this._arrayBuffer = new ArrayBuffer(byteLength);\r\n        this._dataView = new DataView(this._arrayBuffer);\r\n        this._byteOffset = 0;\r\n    }\r\n    /**\r\n     * Resize the array buffer to the specified byte length\r\n     * @param byteLength The new byte length\r\n     * @returns The resized array buffer\r\n     */\r\n    private _resizeBuffer(byteLength: number): ArrayBuffer {\r\n        const newBuffer = new ArrayBuffer(byteLength);\r\n        const copyOldBufferSize = Math.min(this._arrayBuffer.byteLength, byteLength);\r\n        const oldUint8Array = new Uint8Array(this._arrayBuffer, 0, copyOldBufferSize);\r\n        const newUint8Array = new Uint8Array(newBuffer);\r\n        newUint8Array.set(oldUint8Array, 0);\r\n        this._arrayBuffer = newBuffer;\r\n        this._dataView = new DataView(this._arrayBuffer);\r\n\r\n        return newBuffer;\r\n    }\r\n    /**\r\n     * Get an array buffer with the length of the byte offset\r\n     * @returns ArrayBuffer resized to the byte offset\r\n     */\r\n    public getArrayBuffer(): ArrayBuffer {\r\n        return this._resizeBuffer(this.getByteOffset());\r\n    }\r\n    /**\r\n     * Get the byte offset of the array buffer\r\n     * @returns byte offset\r\n     */\r\n    public getByteOffset(): number {\r\n        if (this._byteOffset == undefined) {\r\n            throw new Error(\"Byte offset is undefined!\");\r\n        }\r\n        return this._byteOffset;\r\n    }\r\n    /**\r\n     * Stores an UInt8 in the array buffer\r\n     * @param entry\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     */\r\n    public setUInt8(entry: number, byteOffset?: number) {\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setUint8(byteOffset, entry);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            }\r\n        } else {\r\n            if (this._byteOffset + 1 > this._arrayBuffer.byteLength) {\r\n                this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n            }\r\n            this._dataView.setUint8(this._byteOffset, entry);\r\n            this._byteOffset += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores an UInt16 in the array buffer\r\n     * @param entry\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     */\r\n    public setUInt16(entry: number, byteOffset?: number) {\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setUint16(byteOffset, entry, true);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            }\r\n        } else {\r\n            if (this._byteOffset + 2 > this._arrayBuffer.byteLength) {\r\n                this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n            }\r\n            this._dataView.setUint16(this._byteOffset, entry, true);\r\n            this._byteOffset += 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets an UInt32 in the array buffer\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     * @returns entry\r\n     */\r\n    public getUInt32(byteOffset: number): number {\r\n        if (byteOffset < this._byteOffset) {\r\n            return this._dataView.getUint32(byteOffset, true);\r\n        } else {\r\n            Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            throw new Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n        }\r\n    }\r\n\r\n    public getVector3Float32FromRef(vector3: Vector3, byteOffset: number): void {\r\n        if (byteOffset + 8 > this._byteOffset) {\r\n            Tools.Error(`BinaryWriter: byteoffset is greater than the current binary buffer length!`);\r\n        } else {\r\n            vector3.x = this._dataView.getFloat32(byteOffset, true);\r\n            vector3.y = this._dataView.getFloat32(byteOffset + 4, true);\r\n            vector3.z = this._dataView.getFloat32(byteOffset + 8, true);\r\n        }\r\n    }\r\n\r\n    public setVector3Float32FromRef(vector3: Vector3, byteOffset: number): void {\r\n        if (byteOffset + 8 > this._byteOffset) {\r\n            Tools.Error(`BinaryWriter: byteoffset is greater than the current binary buffer length!`);\r\n        } else {\r\n            this._dataView.setFloat32(byteOffset, vector3.x, true);\r\n            this._dataView.setFloat32(byteOffset + 4, vector3.y, true);\r\n            this._dataView.setFloat32(byteOffset + 8, vector3.z, true);\r\n        }\r\n    }\r\n\r\n    public getVector4Float32FromRef(vector4: Vector4, byteOffset: number): void {\r\n        if (byteOffset + 12 > this._byteOffset) {\r\n            Tools.Error(`BinaryWriter: byteoffset is greater than the current binary buffer length!`);\r\n        } else {\r\n            vector4.x = this._dataView.getFloat32(byteOffset, true);\r\n            vector4.y = this._dataView.getFloat32(byteOffset + 4, true);\r\n            vector4.z = this._dataView.getFloat32(byteOffset + 8, true);\r\n            vector4.w = this._dataView.getFloat32(byteOffset + 12, true);\r\n        }\r\n    }\r\n\r\n    public setVector4Float32FromRef(vector4: Vector4, byteOffset: number): void {\r\n        if (byteOffset + 12 > this._byteOffset) {\r\n            Tools.Error(`BinaryWriter: byteoffset is greater than the current binary buffer length!`);\r\n        } else {\r\n            this._dataView.setFloat32(byteOffset, vector4.x, true);\r\n            this._dataView.setFloat32(byteOffset + 4, vector4.y, true);\r\n            this._dataView.setFloat32(byteOffset + 8, vector4.z, true);\r\n            this._dataView.setFloat32(byteOffset + 12, vector4.w, true);\r\n        }\r\n    }\r\n    /**\r\n     * Stores a Float32 in the array buffer\r\n     * @param entry\r\n     * @param byteOffset\r\n     */\r\n    public setFloat32(entry: number, byteOffset?: number) {\r\n        if (isNaN(entry)) {\r\n            Tools.Error(\"Invalid data being written!\");\r\n        }\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setFloat32(byteOffset, entry, true);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary length!\");\r\n            }\r\n        }\r\n        if (this._byteOffset + 4 > this._arrayBuffer.byteLength) {\r\n            this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n        }\r\n        this._dataView.setFloat32(this._byteOffset, entry, true);\r\n        this._byteOffset += 4;\r\n    }\r\n    /**\r\n     * Stores an UInt32 in the array buffer\r\n     * @param entry\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     */\r\n    public setUInt32(entry: number, byteOffset?: number) {\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setUint32(byteOffset, entry, true);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            }\r\n        } else {\r\n            if (this._byteOffset + 4 > this._arrayBuffer.byteLength) {\r\n                this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n            }\r\n            this._dataView.setUint32(this._byteOffset, entry, true);\r\n            this._byteOffset += 4;\r\n        }\r\n    }\r\n    /**\r\n     * Stores an Int16 in the array buffer\r\n     * @param entry\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     */\r\n    public setInt16(entry: number, byteOffset?: number) {\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setInt16(byteOffset, entry, true);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            }\r\n        } else {\r\n            if (this._byteOffset + 2 > this._arrayBuffer.byteLength) {\r\n                this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n            }\r\n            this._dataView.setInt16(this._byteOffset, entry, true);\r\n            this._byteOffset += 2;\r\n        }\r\n    }\r\n    /**\r\n     * Stores a byte in the array buffer\r\n     * @param entry\r\n     * @param byteOffset If defined, specifies where to set the value as an offset.\r\n     */\r\n    public setByte(entry: number, byteOffset?: number) {\r\n        if (byteOffset != null) {\r\n            if (byteOffset < this._byteOffset) {\r\n                this._dataView.setInt8(byteOffset, entry);\r\n            } else {\r\n                Tools.Error(\"BinaryWriter: byteoffset is greater than the current binary buffer length!\");\r\n            }\r\n        } else {\r\n            if (this._byteOffset + 1 > this._arrayBuffer.byteLength) {\r\n                this._resizeBuffer(this._arrayBuffer.byteLength * 2);\r\n            }\r\n            this._dataView.setInt8(this._byteOffset, entry);\r\n            this._byteOffset++;\r\n        }\r\n    }\r\n}\r\n","import type { ImageMimeType, IMeshPrimitive, INode, IMaterial, ITextureInfo } from \"babylonjs-gltf2interface\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { IDisposable } from \"core/scene\";\r\n\r\nimport type { _BinaryWriter } from \"./glTFExporter\";\r\nimport type { IGLTFExporterExtension } from \"../glTFFileExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\n/** @internal */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var __IGLTFExporterExtensionV2 = 0; // I am here to allow dts to be created\r\n\r\n/**\r\n * Interface for a glTF exporter extension\r\n * @internal\r\n */\r\nexport interface IGLTFExporterExtensionV2 extends IGLTFExporterExtension, IDisposable {\r\n    /**\r\n     * Define this method to modify the default behavior before exporting a texture\r\n     * @param context The context when loading the asset\r\n     * @param babylonTexture The Babylon.js texture\r\n     * @param mimeType The mime-type of the generated image\r\n     * @returns A promise that resolves with the exported texture\r\n     */\r\n    preExportTextureAsync?(context: string, babylonTexture: Nullable<Texture>, mimeType: ImageMimeType): Promise<Nullable<Texture>>;\r\n\r\n    /**\r\n     * Define this method to get notified when a texture info is created\r\n     * @param context The context when loading the asset\r\n     * @param textureInfo The glTF texture info\r\n     * @param babylonTexture The Babylon.js texture\r\n     */\r\n    postExportTexture?(context: string, textureInfo: ITextureInfo, babylonTexture: BaseTexture): void;\r\n\r\n    /**\r\n     * Define this method to modify the default behavior when exporting texture info\r\n     * @param context The context when loading the asset\r\n     * @param meshPrimitive glTF mesh primitive\r\n     * @param babylonSubMesh Babylon submesh\r\n     * @param binaryWriter glTF serializer binary writer instance\r\n     * @returns nullable IMeshPrimitive promise\r\n     */\r\n    postExportMeshPrimitiveAsync?(context: string, meshPrimitive: Nullable<IMeshPrimitive>, babylonSubMesh: SubMesh, binaryWriter: _BinaryWriter): Promise<IMeshPrimitive>;\r\n\r\n    /**\r\n     * Define this method to modify the default behavior when exporting a node\r\n     * @param context The context when exporting the node\r\n     * @param node glTF node\r\n     * @param babylonNode BabylonJS node\r\n     * @returns nullable INode promise\r\n     */\r\n    postExportNodeAsync?(context: string, node: Nullable<INode>, babylonNode: Node, nodeMap: { [key: number]: number }, binaryWriter: _BinaryWriter): Promise<Nullable<INode>>;\r\n\r\n    /**\r\n     * Define this method to modify the default behavior when exporting a material\r\n     * @param material glTF material\r\n     * @param babylonMaterial BabylonJS material\r\n     * @returns nullable IMaterial promise\r\n     */\r\n    postExportMaterialAsync?(context: string, node: Nullable<IMaterial>, babylonMaterial: Material): Promise<IMaterial>;\r\n\r\n    /**\r\n     * Define this method to return additional textures to export from a material\r\n     * @param material glTF material\r\n     * @param babylonMaterial BabylonJS material\r\n     * @returns List of textures\r\n     */\r\n    postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[];\r\n\r\n    /** Gets a boolean indicating that this extension was used */\r\n    wasUsed: boolean;\r\n\r\n    /** Gets a boolean indicating that this extension is required for the file to work */\r\n    required: boolean;\r\n\r\n    /**\r\n     * Called after the exporter state changes to EXPORTING\r\n     */\r\n    onExporting?(): void;\r\n}\r\n","import type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { GLTFData } from \"./glTFData\";\r\nimport { _Exporter } from \"./glTFExporter\";\r\n\r\n/**\r\n * Holds a collection of exporter options and parameters\r\n */\r\nexport interface IExportOptions {\r\n    /**\r\n     * Function which indicates whether a babylon node should be exported or not\r\n     * @param node source Babylon node. It is used to check whether it should be exported to glTF or not\r\n     * @returns boolean, which indicates whether the node should be exported (true) or not (false)\r\n     */\r\n    shouldExportNode?(node: Node): boolean;\r\n\r\n    /**\r\n     * Function which indicates whether an animation on the scene should be exported or not\r\n     * @param animation source animation\r\n     * @returns boolean, which indicates whether the animation should be exported (true) or not (false)\r\n     */\r\n    shouldExportAnimation?(animation: Animation): boolean;\r\n\r\n    /**\r\n     * Function used to extract the part of node's metadata that will be exported into glTF node extras\r\n     * @param metadata source metadata to read from\r\n     * @returns the data to store to glTF node extras\r\n     */\r\n    metadataSelector?(metadata: any): any;\r\n\r\n    /**\r\n     * The sample rate to bake animation curves. Defaults to 1 / 60.\r\n     */\r\n    animationSampleRate?: number;\r\n\r\n    /**\r\n     * Begin serialization without waiting for the scene to be ready. Defaults to false.\r\n     */\r\n    exportWithoutWaitingForScene?: boolean;\r\n\r\n    /**\r\n     * Indicates if unused vertex uv attributes should be included in export. Defaults to false.\r\n     */\r\n    exportUnusedUVs?: boolean;\r\n\r\n    /**\r\n     * Remove no-op root nodes when possible. Defaults to true.\r\n     */\r\n    removeNoopRootNodes?: boolean;\r\n\r\n    /**\r\n     * Indicates if coordinate system swapping root nodes should be included in export. Defaults to false.\r\n     * @deprecated Please use removeNoopRootNodes instead\r\n     */\r\n    includeCoordinateSystemConversionNodes?: boolean;\r\n}\r\n\r\n/**\r\n * Class for generating glTF data from a Babylon scene.\r\n */\r\nexport class GLTF2Export {\r\n    /**\r\n     * Exports the geometry of the scene to .gltf file format asynchronously\r\n     * @param scene Babylon scene with scene hierarchy information\r\n     * @param filePrefix File prefix to use when generating the glTF file\r\n     * @param options Exporter options\r\n     * @returns Returns an object with a .gltf file and associates texture names\r\n     * as keys and their data and paths as values\r\n     */\r\n    public static GLTFAsync(scene: Scene, filePrefix: string, options?: IExportOptions): Promise<GLTFData> {\r\n        return scene.whenReadyAsync().then(() => {\r\n            const glTFPrefix = filePrefix.replace(/\\.[^/.]+$/, \"\");\r\n            const gltfGenerator = new _Exporter(scene, options);\r\n            return gltfGenerator._generateGLTFAsync(glTFPrefix);\r\n        });\r\n    }\r\n\r\n    private static _PreExportAsync(scene: Scene, options?: IExportOptions): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            if (options && options.exportWithoutWaitingForScene) {\r\n                return Promise.resolve();\r\n            } else {\r\n                return scene.whenReadyAsync();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static _PostExportAsync(scene: Scene, glTFData: GLTFData, options?: IExportOptions): Promise<GLTFData> {\r\n        return Promise.resolve().then(() => {\r\n            if (options && options.exportWithoutWaitingForScene) {\r\n                return glTFData;\r\n            } else {\r\n                return glTFData;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Exports the geometry of the scene to .glb file format asychronously\r\n     * @param scene Babylon scene with scene hierarchy information\r\n     * @param filePrefix File prefix to use when generating glb file\r\n     * @param options Exporter options\r\n     * @returns Returns an object with a .glb filename as key and data as value\r\n     */\r\n    public static GLBAsync(scene: Scene, filePrefix: string, options?: IExportOptions): Promise<GLTFData> {\r\n        return this._PreExportAsync(scene, options).then(() => {\r\n            const glTFPrefix = filePrefix.replace(/\\.[^/.]+$/, \"\");\r\n            const gltfGenerator = new _Exporter(scene, options);\r\n            return gltfGenerator._generateGLBAsync(glTFPrefix).then((glTFData) => {\r\n                return this._PostExportAsync(scene, glTFData, options);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import type { ITextureInfo, IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_transform implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    /** Reference to the glTF exporter */\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportTexture?(context: string, textureInfo: ITextureInfo, babylonTexture: Texture): void {\r\n        const canUseExtension =\r\n            babylonTexture &&\r\n            ((babylonTexture.uAng === 0 && babylonTexture.wAng === 0 && babylonTexture.vAng === 0) ||\r\n                (babylonTexture.uRotationCenter === 0 && babylonTexture.vRotationCenter === 0));\r\n\r\n        if (canUseExtension) {\r\n            const textureTransform: IKHRTextureTransform = {};\r\n            let transformIsRequired = false;\r\n\r\n            if (babylonTexture.uOffset !== 0 || babylonTexture.vOffset !== 0) {\r\n                textureTransform.offset = [babylonTexture.uOffset, babylonTexture.vOffset];\r\n                transformIsRequired = true;\r\n            }\r\n\r\n            if (babylonTexture.uScale !== 1 || babylonTexture.vScale !== 1) {\r\n                textureTransform.scale = [babylonTexture.uScale, babylonTexture.vScale];\r\n                transformIsRequired = true;\r\n            }\r\n\r\n            if (babylonTexture.wAng !== 0) {\r\n                textureTransform.rotation = -babylonTexture.wAng;\r\n                transformIsRequired = true;\r\n            }\r\n\r\n            if (babylonTexture.coordinatesIndex !== 0) {\r\n                textureTransform.texCoord = babylonTexture.coordinatesIndex;\r\n                transformIsRequired = true;\r\n            }\r\n\r\n            if (!transformIsRequired) {\r\n                return;\r\n            }\r\n\r\n            this._wasUsed = true;\r\n            if (!textureInfo.extensions) {\r\n                textureInfo.extensions = {};\r\n            }\r\n            textureInfo.extensions[NAME] = textureTransform;\r\n        }\r\n    }\r\n\r\n    public preExportTextureAsync(context: string, babylonTexture: Texture): Promise<Nullable<Texture>> {\r\n        return new Promise((resolve, reject) => {\r\n            const scene = babylonTexture.getScene();\r\n            if (!scene) {\r\n                reject(`${context}: \"scene\" is not defined for Babylon texture ${babylonTexture.name}!`);\r\n                return;\r\n            }\r\n\r\n            /*\r\n             * The KHR_texture_transform schema only supports w rotation around the origin.\r\n             * See https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_transform#gltf-schema-updates.\r\n             */\r\n            if (babylonTexture.uAng !== 0 || babylonTexture.vAng !== 0) {\r\n                Tools.Warn(`${context}: Texture ${babylonTexture.name} with rotation in the u or v axis is not supported in glTF.`);\r\n                resolve(null);\r\n            } else if (babylonTexture.wAng !== 0 && (babylonTexture.uRotationCenter !== 0 || babylonTexture.vRotationCenter !== 0)) {\r\n                Tools.Warn(`${context}: Texture ${babylonTexture.name} with rotation not centered at the origin cannot be exported with ${NAME}`);\r\n                resolve(null);\r\n            } else {\r\n                resolve(babylonTexture);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, () => new KHR_texture_transform());\r\n","import type { SpotLight } from \"core/Lights/spotLight\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3, Quaternion, TmpVectors, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { Node } from \"core/node\";\r\nimport { ShadowLight } from \"core/Lights/shadowLight\";\r\nimport type { INode, IKHRLightsPunctual_LightReference, IKHRLightsPunctual_Light, IKHRLightsPunctual } from \"babylonjs-gltf2interface\";\r\nimport { KHRLightsPunctual_LightType } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { _GLTFUtilities } from \"../glTFUtilities\";\r\n\r\nconst NAME = \"KHR_lights_punctual\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_lights_punctual implements IGLTFExporterExtensionV2 {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    /** Reference to the glTF exporter */\r\n    private _exporter: _Exporter;\r\n\r\n    private _lights: IKHRLightsPunctual;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._lights as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return !!this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onExporting(): void {\r\n        this._exporter!._glTF.extensions![NAME] = this._lights;\r\n    }\r\n    /**\r\n     * Define this method to modify the default behavior when exporting a node\r\n     * @param context The context when exporting the node\r\n     * @param node glTF node\r\n     * @param babylonNode BabylonJS node\r\n     * @param nodeMap Node mapping of unique id to glTF node index\r\n     * @returns nullable INode promise\r\n     */\r\n    public postExportNodeAsync(context: string, node: Nullable<INode>, babylonNode: Node, nodeMap: { [key: number]: number }): Promise<Nullable<INode>> {\r\n        return new Promise((resolve) => {\r\n            if (node && babylonNode instanceof ShadowLight) {\r\n                let light: IKHRLightsPunctual_Light;\r\n\r\n                const lightType =\r\n                    babylonNode.getTypeID() == Light.LIGHTTYPEID_POINTLIGHT\r\n                        ? KHRLightsPunctual_LightType.POINT\r\n                        : babylonNode.getTypeID() == Light.LIGHTTYPEID_DIRECTIONALLIGHT\r\n                          ? KHRLightsPunctual_LightType.DIRECTIONAL\r\n                          : babylonNode.getTypeID() == Light.LIGHTTYPEID_SPOTLIGHT\r\n                            ? KHRLightsPunctual_LightType.SPOT\r\n                            : null;\r\n                if (lightType == null) {\r\n                    Logger.Warn(`${context}: Light ${babylonNode.name} is not supported in ${NAME}`);\r\n                } else {\r\n                    if (!babylonNode.position.equalsToFloats(0, 0, 0)) {\r\n                        node.translation = babylonNode.position.asArray();\r\n                    }\r\n                    if (lightType !== KHRLightsPunctual_LightType.POINT) {\r\n                        const localAxis = babylonNode.direction;\r\n                        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\r\n                        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\r\n                        const pitch = -Math.atan2(localAxis.y, len);\r\n                        const lightRotationQuaternion = Quaternion.RotationYawPitchRoll(yaw + Math.PI, pitch, 0);\r\n                        if (!Quaternion.IsIdentity(lightRotationQuaternion)) {\r\n                            node.rotation = lightRotationQuaternion.asArray();\r\n                        }\r\n                    }\r\n\r\n                    if (babylonNode.falloffType !== Light.FALLOFF_GLTF) {\r\n                        Logger.Warn(`${context}: Light falloff for ${babylonNode.name} does not match the ${NAME} specification!`);\r\n                    }\r\n                    light = {\r\n                        type: lightType,\r\n                    };\r\n                    if (!babylonNode.diffuse.equals(Color3.White())) {\r\n                        light.color = babylonNode.diffuse.asArray();\r\n                    }\r\n                    if (babylonNode.intensity !== 1.0) {\r\n                        light.intensity = babylonNode.intensity;\r\n                    }\r\n                    if (babylonNode.range !== Number.MAX_VALUE) {\r\n                        light.range = babylonNode.range;\r\n                    }\r\n\r\n                    if (lightType === KHRLightsPunctual_LightType.SPOT) {\r\n                        const babylonSpotLight = babylonNode as SpotLight;\r\n                        if (babylonSpotLight.angle !== Math.PI / 2.0) {\r\n                            if (light.spot == null) {\r\n                                light.spot = {};\r\n                            }\r\n                            light.spot.outerConeAngle = babylonSpotLight.angle / 2.0;\r\n                        }\r\n                        if (babylonSpotLight.innerAngle !== 0) {\r\n                            if (light.spot == null) {\r\n                                light.spot = {};\r\n                            }\r\n                            light.spot.innerConeAngle = babylonSpotLight.innerAngle / 2.0;\r\n                        }\r\n                    }\r\n\r\n                    this._lights ||= {\r\n                        lights: [],\r\n                    };\r\n\r\n                    this._lights.lights.push(light);\r\n\r\n                    const lightReference: IKHRLightsPunctual_LightReference = {\r\n                        light: this._lights.lights.length - 1,\r\n                    };\r\n\r\n                    // Avoid duplicating the Light's parent node if possible.\r\n                    const parentBabylonNode = babylonNode.parent;\r\n                    if (parentBabylonNode && parentBabylonNode.getChildren().length == 1) {\r\n                        const parentNode = this._exporter._nodes[nodeMap[parentBabylonNode.uniqueId]];\r\n                        if (parentNode) {\r\n                            const parentTranslation = Vector3.FromArrayToRef(parentNode.translation || [0, 0, 0], 0, TmpVectors.Vector3[0]);\r\n                            const parentRotation = Quaternion.FromArrayToRef(parentNode.rotation || [0, 0, 0, 1], 0, TmpVectors.Quaternion[0]);\r\n                            const parentScale = Vector3.FromArrayToRef(parentNode.scale || [1, 1, 1], 0, TmpVectors.Vector3[1]);\r\n                            const parentMatrix = Matrix.ComposeToRef(parentScale, parentRotation, parentTranslation, TmpVectors.Matrix[0]);\r\n\r\n                            const translation = Vector3.FromArrayToRef(node.translation || [0, 0, 0], 0, TmpVectors.Vector3[2]);\r\n                            const rotation = Quaternion.FromArrayToRef(node.rotation || [0, 0, 0, 1], 0, TmpVectors.Quaternion[1]);\r\n                            const matrix = Matrix.ComposeToRef(Vector3.OneReadOnly, rotation, translation, TmpVectors.Matrix[1]);\r\n\r\n                            parentMatrix.multiplyToRef(matrix, matrix);\r\n                            matrix.decompose(parentScale, parentRotation, parentTranslation);\r\n\r\n                            if (parentTranslation.equalsToFloats(0, 0, 0)) {\r\n                                delete parentNode.translation;\r\n                            } else {\r\n                                parentNode.translation = parentTranslation.asArray();\r\n                            }\r\n\r\n                            if (Quaternion.IsIdentity(parentRotation)) {\r\n                                delete parentNode.rotation;\r\n                            } else {\r\n                                parentNode.rotation = parentRotation.asArray();\r\n                            }\r\n\r\n                            if (parentScale.equalsToFloats(1, 1, 1)) {\r\n                                delete parentNode.scale;\r\n                            } else {\r\n                                parentNode.scale = parentScale.asArray();\r\n                            }\r\n\r\n                            parentNode.extensions ||= {};\r\n                            parentNode.extensions[NAME] = lightReference;\r\n\r\n                            // Do not export the original node\r\n                            resolve(null);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    node.extensions ||= {};\r\n                    node.extensions[NAME] = lightReference;\r\n                }\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_lights_punctual(exporter));\r\n","import type { IMaterial, IKHRMaterialsClearcoat } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_clearcoat implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.clearCoat.isEnabled) {\r\n                if (babylonMaterial.clearCoat.texture) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.texture);\r\n                }\r\n                if (!babylonMaterial.clearCoat.useRoughnessFromMainTexture && babylonMaterial.clearCoat.textureRoughness) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.textureRoughness);\r\n                }\r\n                if (babylonMaterial.clearCoat.bumpTexture) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.bumpTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.clearCoat.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const clearCoatTextureInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.clearCoat.texture);\r\n                let clearCoatTextureRoughnessInfo;\r\n                if (babylonMaterial.clearCoat.useRoughnessFromMainTexture) {\r\n                    clearCoatTextureRoughnessInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.clearCoat.texture);\r\n                } else {\r\n                    clearCoatTextureRoughnessInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.clearCoat.textureRoughness);\r\n                }\r\n\r\n                if (babylonMaterial.clearCoat.isTintEnabled) {\r\n                    Tools.Warn(`Clear Color tint is not supported for glTF export. Ignoring for: ${babylonMaterial.name}`);\r\n                }\r\n\r\n                if (babylonMaterial.clearCoat.remapF0OnInterfaceChange) {\r\n                    Tools.Warn(`Clear Color F0 remapping is not supported for glTF export. Ignoring for: ${babylonMaterial.name}`);\r\n                }\r\n\r\n                const clearCoatNormalTextureInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.clearCoat.bumpTexture);\r\n\r\n                const clearCoatInfo: IKHRMaterialsClearcoat = {\r\n                    clearcoatFactor: babylonMaterial.clearCoat.intensity,\r\n                    clearcoatTexture: clearCoatTextureInfo ?? undefined,\r\n                    clearcoatRoughnessFactor: babylonMaterial.clearCoat.roughness,\r\n                    clearcoatRoughnessTexture: clearCoatTextureRoughnessInfo ?? undefined,\r\n                    clearcoatNormalTexture: clearCoatNormalTextureInfo ?? undefined,\r\n                    hasTextures: () => {\r\n                        return clearCoatInfo.clearcoatTexture !== null || clearCoatInfo.clearcoatRoughnessTexture !== null || clearCoatInfo.clearcoatRoughnessTexture !== null;\r\n                    },\r\n                };\r\n\r\n                node.extensions[NAME] = clearCoatInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_clearcoat(exporter));\r\n","import type { IMaterial, IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_iridescence implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.iridescence.isEnabled) {\r\n                if (babylonMaterial.iridescence.texture) {\r\n                    additionalTextures.push(babylonMaterial.iridescence.texture);\r\n                }\r\n                if (babylonMaterial.iridescence.thicknessTexture && babylonMaterial.iridescence.thicknessTexture !== babylonMaterial.iridescence.texture) {\r\n                    additionalTextures.push(babylonMaterial.iridescence.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.iridescence.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const iridescenceTextureInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.iridescence.texture);\r\n                const iridescenceThicknessTextureInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.iridescence.thicknessTexture);\r\n\r\n                const iridescenceInfo: IKHRMaterialsIridescence = {\r\n                    iridescenceFactor: babylonMaterial.iridescence.intensity,\r\n                    iridescenceIor: babylonMaterial.iridescence.indexOfRefraction,\r\n                    iridescenceThicknessMinimum: babylonMaterial.iridescence.minimumThickness,\r\n                    iridescenceThicknessMaximum: babylonMaterial.iridescence.maximumThickness,\r\n\r\n                    iridescenceTexture: iridescenceTextureInfo ?? undefined,\r\n                    iridescenceThicknessTexture: iridescenceThicknessTextureInfo ?? undefined,\r\n                    hasTextures: () => {\r\n                        return iridescenceInfo.iridescenceTexture !== null || iridescenceInfo.iridescenceThicknessTexture !== null;\r\n                    },\r\n                };\r\n\r\n                node.extensions[NAME] = iridescenceInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_iridescence(exporter));\r\n","import type { IMaterial, IKHRMaterialsAnisotropy } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_anisotropy\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_anisotropy implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.anisotropy.isEnabled && !babylonMaterial.anisotropy.legacy) {\r\n                if (babylonMaterial.anisotropy.texture) {\r\n                    additionalTextures.push(babylonMaterial.anisotropy.texture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.anisotropy.isEnabled || babylonMaterial.anisotropy.legacy) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const anisotropyTextureInfo = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.anisotropy.texture);\r\n\r\n                const anisotropyInfo: IKHRMaterialsAnisotropy = {\r\n                    anisotropyStrength: babylonMaterial.anisotropy.intensity,\r\n                    anisotropyRotation: babylonMaterial.anisotropy.angle,\r\n                    anisotropyTexture: anisotropyTextureInfo ?? undefined,\r\n                    hasTextures: () => {\r\n                        return anisotropyInfo.anisotropyTexture !== null;\r\n                    },\r\n                };\r\n\r\n                node.extensions[NAME] = anisotropyInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_anisotropy(exporter));\r\n","import type { IMaterial, IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_sheen implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (babylonMaterial.sheen.isEnabled && babylonMaterial.sheen.texture) {\r\n                return [babylonMaterial.sheen.texture];\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public postExportMaterialAsync(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial) {\r\n                if (!babylonMaterial.sheen.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                if (node.extensions == null) {\r\n                    node.extensions = {};\r\n                }\r\n                const sheenInfo: IKHRMaterialsSheen = {\r\n                    sheenColorFactor: babylonMaterial.sheen.color.asArray(),\r\n                    sheenRoughnessFactor: babylonMaterial.sheen.roughness ?? 0,\r\n                    hasTextures: () => {\r\n                        return sheenInfo.sheenColorTexture !== null || sheenInfo.sheenRoughnessTexture !== null;\r\n                    },\r\n                };\r\n\r\n                if (babylonMaterial.sheen.texture) {\r\n                    sheenInfo.sheenColorTexture = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.sheen.texture) ?? undefined;\r\n                }\r\n\r\n                if (babylonMaterial.sheen.textureRoughness && !babylonMaterial.sheen.useRoughnessFromMainTexture) {\r\n                    sheenInfo.sheenRoughnessTexture = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.sheen.textureRoughness) ?? undefined;\r\n                } else if (babylonMaterial.sheen.texture && babylonMaterial.sheen.useRoughnessFromMainTexture) {\r\n                    sheenInfo.sheenRoughnessTexture = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.sheen.texture) ?? undefined;\r\n                }\r\n\r\n                node.extensions[NAME] = sheenInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_sheen(exporter));\r\n","import type { IMaterial } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_unlit implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            let unlitMaterial = false;\r\n\r\n            if (babylonMaterial instanceof PBRMaterial) {\r\n                unlitMaterial = babylonMaterial.unlit;\r\n            } else if (babylonMaterial instanceof StandardMaterial) {\r\n                unlitMaterial = babylonMaterial.disableLighting;\r\n            }\r\n\r\n            if (unlitMaterial) {\r\n                this._wasUsed = true;\r\n\r\n                if (node.extensions == null) {\r\n                    node.extensions = {};\r\n                }\r\n\r\n                node.extensions[NAME] = {};\r\n            }\r\n\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, () => new KHR_materials_unlit());\r\n","import type { IMaterial, IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_ior implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        return mat.indexOfRefraction != undefined && mat.indexOfRefraction != 1.5; // 1.5 is normative default value.\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const iorInfo: IKHRMaterialsIor = {\r\n                    ior: babylonMaterial.indexOfRefraction,\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = iorInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_ior());\r\n","import type { IMaterial, IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with the additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.metallicReflectanceTexture) {\r\n                    additionalTextures.push(babylonMaterial.metallicReflectanceTexture);\r\n                }\r\n                if (babylonMaterial.reflectanceTexture) {\r\n                    additionalTextures.push(babylonMaterial.reflectanceTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        return (\r\n            (mat.metallicF0Factor != undefined && mat.metallicF0Factor != 1.0) ||\r\n            (mat.metallicReflectanceColor != undefined && !mat.metallicReflectanceColor.equalsFloats(1.0, 1.0, 1.0)) ||\r\n            this._hasTexturesExtension(mat)\r\n        );\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.metallicReflectanceTexture != null || mat.reflectanceTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const metallicReflectanceTexture = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.metallicReflectanceTexture) ?? undefined;\r\n                const reflectanceTexture = this._exporter._glTFMaterialExporter._getTextureInfo(babylonMaterial.reflectanceTexture) ?? undefined;\r\n                const metallicF0Factor = babylonMaterial.metallicF0Factor == 1.0 ? undefined : babylonMaterial.metallicF0Factor;\r\n                const metallicReflectanceColor = babylonMaterial.metallicReflectanceColor.equalsFloats(1.0, 1.0, 1.0)\r\n                    ? undefined\r\n                    : babylonMaterial.metallicReflectanceColor.asArray();\r\n\r\n                const specularInfo: IKHRMaterialsSpecular = {\r\n                    specularFactor: metallicF0Factor,\r\n                    specularTexture: metallicReflectanceTexture,\r\n                    specularColorFactor: metallicReflectanceColor,\r\n                    specularColorTexture: reflectanceTexture,\r\n                    hasTextures: () => {\r\n                        return this._hasTexturesExtension(babylonMaterial);\r\n                    },\r\n                };\r\n                node.extensions[NAME] = specularInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_specular(exporter));\r\n","import type { IMaterial, IKHRMaterialsVolume } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nconst NAME = \"KHR_materials_volume\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_volume implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.subSurface.thicknessTexture) {\r\n                    additionalTextures.push(babylonMaterial.subSurface.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        // this extension requires either the KHR_materials_transmission or KHR_materials_translucency extensions.\r\n        if (!subs.isRefractionEnabled && !subs.isTranslucencyEnabled) {\r\n            return false;\r\n        }\r\n        return (\r\n            (subs.maximumThickness != undefined && subs.maximumThickness != 0) ||\r\n            (subs.tintColorAtDistance != undefined && subs.tintColorAtDistance != Number.POSITIVE_INFINITY) ||\r\n            (subs.tintColor != undefined && subs.tintColor != Color3.White()) ||\r\n            this._hasTexturesExtension(mat)\r\n        );\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.subSurface.thicknessTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise that resolves with the updated node\r\n     */\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const thicknessFactor = subs.maximumThickness == 0 ? undefined : subs.maximumThickness;\r\n                const thicknessTexture = this._exporter._glTFMaterialExporter._getTextureInfo(subs.thicknessTexture) ?? undefined;\r\n                const attenuationDistance = subs.tintColorAtDistance == Number.POSITIVE_INFINITY ? undefined : subs.tintColorAtDistance;\r\n                const attenuationColor = subs.tintColor.equalsFloats(1.0, 1.0, 1.0) ? undefined : subs.tintColor.asArray();\r\n\r\n                const volumeInfo: IKHRMaterialsVolume = {\r\n                    thicknessFactor: thicknessFactor,\r\n                    thicknessTexture: thicknessTexture,\r\n                    attenuationDistance: attenuationDistance,\r\n                    attenuationColor: attenuationColor,\r\n                    hasTextures: () => {\r\n                        return this._hasTexturesExtension(babylonMaterial);\r\n                    },\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = volumeInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_volume(exporter));\r\n","import type { IMaterial, IKHRMaterialsDispersion } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nconst NAME = \"KHR_materials_dispersion\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/87bd64a7f5e23c84b6aef2e6082069583ed0ddb4/extensions/2.0/Khronos/KHR_materials_dispersion/README.md)\r\n * @experimental\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_dispersion implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    /** Constructor */\r\n    constructor() {}\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        // this extension requires refraction to be enabled.\r\n        if (!subs.isRefractionEnabled && !subs.isDispersionEnabled) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const dispersion = subs.dispersion;\r\n\r\n                const dispersionInfo: IKHRMaterialsDispersion = {\r\n                    dispersion: dispersion,\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = dispersionInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, () => new KHR_materials_dispersion());\r\n","import type { IMaterial, IKHRMaterialsTransmission } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_transmission\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_transmission implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.subSurface.thicknessTexture) {\r\n                    additionalTextures.push(babylonMaterial.subSurface.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        return (subs.isRefractionEnabled && subs.refractionIntensity != undefined && subs.refractionIntensity != 0) || this._hasTexturesExtension(mat);\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.subSurface.refractionIntensityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns true if successful\r\n     */\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const transmissionFactor = subs.refractionIntensity === 0 ? undefined : subs.refractionIntensity;\r\n\r\n                const transmissionTexture = this._exporter._glTFMaterialExporter._getTextureInfo(subs.refractionIntensityTexture) ?? undefined;\r\n\r\n                const volumeInfo: IKHRMaterialsTransmission = {\r\n                    transmissionFactor: transmissionFactor,\r\n                    transmissionTexture: transmissionTexture,\r\n                    hasTextures: () => {\r\n                        return this._hasTexturesExtension(babylonMaterial);\r\n                    },\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = volumeInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_transmission(exporter));\r\n","import type { IBufferView, IAccessor, INode, IEXTMeshGpuInstancing } from \"babylonjs-gltf2interface\";\r\nimport { AccessorType, AccessorComponentType } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport type { _BinaryWriter } from \"../glTFExporter\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Node } from \"core/node\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport \"core/Meshes/thinInstanceMesh\";\r\nimport { TmpVectors, Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\n\r\nconst NAME = \"EXT_mesh_gpu_instancing\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_mesh_gpu_instancing implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: _Exporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: _Exporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After node is exported\r\n     * @param context the GLTF context when loading the asset\r\n     * @param node the node exported\r\n     * @param babylonNode the corresponding babylon node\r\n     * @param nodeMap map from babylon node id to node index\r\n     * @param binaryWriter binary writer\r\n     * @returns nullable promise, resolves with the node\r\n     */\r\n    public postExportNodeAsync(\r\n        context: string,\r\n        node: Nullable<INode>,\r\n        babylonNode: Node,\r\n        nodeMap: { [key: number]: number },\r\n        binaryWriter: _BinaryWriter\r\n    ): Promise<Nullable<INode>> {\r\n        return new Promise((resolve) => {\r\n            if (node && babylonNode instanceof Mesh) {\r\n                if (babylonNode.hasThinInstances && binaryWriter) {\r\n                    this._wasUsed = true;\r\n\r\n                    const noTranslation = Vector3.Zero();\r\n                    const noRotation = Quaternion.Identity();\r\n                    const noScale = Vector3.One();\r\n\r\n                    // retrieve all the instance world matrix\r\n                    const matrix = babylonNode.thinInstanceGetWorldMatrices();\r\n\r\n                    const iwt = TmpVectors.Vector3[2];\r\n                    const iwr = TmpVectors.Quaternion[1];\r\n                    const iws = TmpVectors.Vector3[3];\r\n\r\n                    let hasAnyInstanceWorldTranslation = false;\r\n                    let hasAnyInstanceWorldRotation = false;\r\n                    let hasAnyInstanceWorldScale = false;\r\n\r\n                    // prepare temp buffers\r\n                    const translationBuffer = new Float32Array(babylonNode.thinInstanceCount * 3);\r\n                    const rotationBuffer = new Float32Array(babylonNode.thinInstanceCount * 4);\r\n                    const scaleBuffer = new Float32Array(babylonNode.thinInstanceCount * 3);\r\n\r\n                    let i = 0;\r\n                    for (const m of matrix) {\r\n                        m.decompose(iws, iwr, iwt);\r\n\r\n                        // fill the temp buffer\r\n                        translationBuffer.set(iwt.asArray(), i * 3);\r\n                        rotationBuffer.set(iwr.normalize().asArray(), i * 4); // ensure the quaternion is normalized\r\n                        scaleBuffer.set(iws.asArray(), i * 3);\r\n\r\n                        // this is where we decide if there is any transformation\r\n                        hasAnyInstanceWorldTranslation = hasAnyInstanceWorldTranslation || !iwt.equalsWithEpsilon(noTranslation);\r\n                        hasAnyInstanceWorldRotation = hasAnyInstanceWorldRotation || !iwr.equalsWithEpsilon(noRotation);\r\n                        hasAnyInstanceWorldScale = hasAnyInstanceWorldScale || !iws.equalsWithEpsilon(noScale);\r\n\r\n                        i++;\r\n                    }\r\n\r\n                    const extension: IEXTMeshGpuInstancing = {\r\n                        attributes: {},\r\n                    };\r\n\r\n                    // do we need to write TRANSLATION ?\r\n                    if (hasAnyInstanceWorldTranslation) {\r\n                        extension.attributes[\"TRANSLATION\"] = this._buildAccessor(\r\n                            translationBuffer,\r\n                            AccessorType.VEC3,\r\n                            babylonNode.thinInstanceCount,\r\n                            binaryWriter,\r\n                            AccessorComponentType.FLOAT\r\n                        );\r\n                    }\r\n                    // do we need to write ROTATION ?\r\n                    if (hasAnyInstanceWorldRotation) {\r\n                        const componentType = AccessorComponentType.FLOAT; // we decided to stay on FLOAT for now see https://github.com/BabylonJS/Babylon.js/pull/12495\r\n                        extension.attributes[\"ROTATION\"] = this._buildAccessor(rotationBuffer, AccessorType.VEC4, babylonNode.thinInstanceCount, binaryWriter, componentType);\r\n                    }\r\n                    // do we need to write SCALE ?\r\n                    if (hasAnyInstanceWorldScale) {\r\n                        extension.attributes[\"SCALE\"] = this._buildAccessor(\r\n                            scaleBuffer,\r\n                            AccessorType.VEC3,\r\n                            babylonNode.thinInstanceCount,\r\n                            binaryWriter,\r\n                            AccessorComponentType.FLOAT\r\n                        );\r\n                    }\r\n\r\n                    /* eslint-enable @typescript-eslint/naming-convention*/\r\n                    node.extensions = node.extensions || {};\r\n                    node.extensions[NAME] = extension;\r\n                }\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n\r\n    private _buildAccessor(buffer: Float32Array, type: AccessorType, count: number, binaryWriter: _BinaryWriter, componentType: AccessorComponentType): number {\r\n        // write the buffer\r\n        const bufferOffset = binaryWriter.getByteOffset();\r\n        switch (componentType) {\r\n            case AccessorComponentType.FLOAT: {\r\n                for (let i = 0; i != buffer.length; i++) {\r\n                    binaryWriter.setFloat32(buffer[i]);\r\n                }\r\n                break;\r\n            }\r\n            case AccessorComponentType.BYTE: {\r\n                for (let i = 0; i != buffer.length; i++) {\r\n                    binaryWriter.setByte(buffer[i] * 127);\r\n                }\r\n                break;\r\n            }\r\n            case AccessorComponentType.SHORT: {\r\n                for (let i = 0; i != buffer.length; i++) {\r\n                    binaryWriter.setInt16(buffer[i] * 32767);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n        // build the buffer view\r\n        const bv: IBufferView = { buffer: 0, byteOffset: bufferOffset, byteLength: buffer.length * VertexBuffer.GetTypeByteLength(componentType) };\r\n        const bufferViewIndex = this._exporter._bufferViews.length;\r\n        this._exporter._bufferViews.push(bv);\r\n\r\n        // finally build the accessor\r\n        const accessorIndex = this._exporter._accessors.length;\r\n        const accessor: IAccessor = {\r\n            bufferView: bufferViewIndex,\r\n            componentType: componentType,\r\n            count: count,\r\n            type: type,\r\n            normalized: componentType == AccessorComponentType.BYTE || componentType == AccessorComponentType.SHORT,\r\n        };\r\n        this._exporter._accessors.push(accessor);\r\n        return accessorIndex;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n_Exporter.RegisterExtension(NAME, (exporter) => new EXT_mesh_gpu_instancing(exporter));\r\n","import type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { _Exporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { IMaterial, IKHRMaterialsEmissiveStrength } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_emissive_strength\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_emissive_strength implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    public postExportMaterialAsync(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                return resolve(node);\r\n            }\r\n\r\n            const emissiveColor = babylonMaterial.emissiveColor.asArray();\r\n            const tempEmissiveStrength = Math.max(...emissiveColor);\r\n\r\n            if (tempEmissiveStrength > 1) {\r\n                this._wasUsed = true;\r\n\r\n                node.extensions ||= {};\r\n\r\n                const emissiveStrengthInfo: IKHRMaterialsEmissiveStrength = {\r\n                    emissiveStrength: tempEmissiveStrength,\r\n                };\r\n\r\n                // Normalize each value of the emissive factor to have a max value of 1\r\n                const newEmissiveFactor = babylonMaterial.emissiveColor.scale(1 / emissiveStrengthInfo.emissiveStrength);\r\n\r\n                node.emissiveFactor = newEmissiveFactor.asArray();\r\n                node.extensions[NAME] = emissiveStrengthInfo;\r\n            }\r\n\r\n            return resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n_Exporter.RegisterExtension(NAME, (exporter) => new KHR_materials_emissive_strength());\r\n","import { Mesh } from \"core/Meshes/mesh\";\r\nimport { InstancedMesh } from \"core/Meshes/instancedMesh\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Class for generating STL data from a Babylon scene.\r\n */\r\nexport class STLExport {\r\n    /**\r\n     * Exports the geometry of a Mesh array in .STL file format (ASCII)\r\n     * @param meshes list defines the mesh to serialize\r\n     * @param download triggers the automatic download of the file.\r\n     * @param fileName changes the downloads fileName.\r\n     * @param binary changes the STL to a binary type.\r\n     * @param isLittleEndian toggle for binary type exporter.\r\n     * @param doNotBakeTransform toggle if meshes transforms should be baked or not.\r\n     * @param supportInstancedMeshes toggle to export instanced Meshes. Enabling support for instanced meshes will override doNoBakeTransform as true\r\n     * @param exportIndividualMeshes toggle to export each mesh as an independent mesh. By default, all the meshes are combined into one mesh. This property has no effect when exporting in binary format\r\n     * @returns the STL as UTF8 string\r\n     */\r\n    public static CreateSTL(\r\n        meshes: (Mesh | InstancedMesh)[],\r\n        download: boolean = true,\r\n        fileName: string = \"stlmesh\",\r\n        binary: boolean = false,\r\n        isLittleEndian: boolean = true,\r\n        doNotBakeTransform: boolean = false,\r\n        supportInstancedMeshes: boolean = false,\r\n        exportIndividualMeshes: boolean = false\r\n    ): any {\r\n        //Binary support adapted from https://gist.github.com/paulkaplan/6d5f0ab2c7e8fdc68a61\r\n\r\n        const getFaceData = function (indices: any, vertices: any, i: number) {\r\n            const id = [indices[i] * 3, indices[i + 1] * 3, indices[i + 2] * 3];\r\n            const v = [\r\n                new Vector3(vertices[id[0]], vertices[id[0] + 2], vertices[id[0] + 1]),\r\n                new Vector3(vertices[id[1]], vertices[id[1] + 2], vertices[id[1] + 1]),\r\n                new Vector3(vertices[id[2]], vertices[id[2] + 2], vertices[id[2] + 1]),\r\n            ];\r\n            const p1p2 = v[0].subtract(v[1]);\r\n            const p3p2 = v[2].subtract(v[1]);\r\n            const n = Vector3.Cross(p3p2, p1p2).normalize();\r\n\r\n            return { v, n };\r\n        };\r\n\r\n        const writeVector = function (dataview: any, offset: number, vector: Vector3, isLittleEndian: boolean) {\r\n            offset = writeFloat(dataview, offset, vector.x, isLittleEndian);\r\n            offset = writeFloat(dataview, offset, vector.y, isLittleEndian);\r\n            return writeFloat(dataview, offset, vector.z, isLittleEndian);\r\n        };\r\n\r\n        const writeFloat = function (dataview: any, offset: number, value: number, isLittleEndian: boolean) {\r\n            dataview.setFloat32(offset, value, isLittleEndian);\r\n            return offset + 4;\r\n        };\r\n\r\n        const getVerticesData = function (mesh: InstancedMesh | Mesh) {\r\n            if (supportInstancedMeshes) {\r\n                let sourceMesh = mesh;\r\n                if (mesh instanceof InstancedMesh) {\r\n                    sourceMesh = mesh.sourceMesh;\r\n                }\r\n                const data = sourceMesh.getVerticesData(VertexBuffer.PositionKind, true, true);\r\n                if (!data) return [];\r\n                const temp = Vector3.Zero();\r\n                let index;\r\n                for (index = 0; index < data.length; index += 3) {\r\n                    Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], mesh.computeWorldMatrix(true), temp).toArray(data, index);\r\n                }\r\n                return data;\r\n            } else {\r\n                return mesh.getVerticesData(VertexBuffer.PositionKind) || [];\r\n            }\r\n        };\r\n\r\n        if (supportInstancedMeshes) {\r\n            doNotBakeTransform = true;\r\n        }\r\n\r\n        let data: DataView | string = \"\";\r\n\r\n        let faceCount = 0;\r\n        let offset = 0;\r\n\r\n        if (binary) {\r\n            for (let i = 0; i < meshes.length; i++) {\r\n                const mesh = meshes[i];\r\n                const indices = mesh.getIndices();\r\n                faceCount += indices ? indices.length / 3 : 0;\r\n            }\r\n\r\n            const bufferSize = 84 + 50 * faceCount;\r\n            const buffer = new ArrayBuffer(bufferSize);\r\n            data = new DataView(buffer);\r\n\r\n            offset += 80;\r\n            data.setUint32(offset, faceCount, isLittleEndian);\r\n            offset += 4;\r\n        } else {\r\n            if (!exportIndividualMeshes) {\r\n                data = \"solid stlmesh\\r\\n\";\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            const mesh = meshes[i];\r\n            if (!binary && exportIndividualMeshes) {\r\n                data += \"solid \" + mesh.name + \"\\r\\n\";\r\n            }\r\n            if (!doNotBakeTransform && mesh instanceof Mesh) {\r\n                mesh.bakeCurrentTransformIntoVertices();\r\n            }\r\n            const vertices = getVerticesData(mesh);\r\n            const indices = mesh.getIndices() || [];\r\n\r\n            for (let i = 0; i < indices.length; i += 3) {\r\n                const fd = getFaceData(indices, vertices, i);\r\n\r\n                if (binary) {\r\n                    offset = writeVector(data, offset, fd.n, isLittleEndian);\r\n                    offset = writeVector(data, offset, fd.v[0], isLittleEndian);\r\n                    offset = writeVector(data, offset, fd.v[1], isLittleEndian);\r\n                    offset = writeVector(data, offset, fd.v[2], isLittleEndian);\r\n                    offset += 2;\r\n                } else {\r\n                    data += \"\\tfacet normal \" + fd.n.x + \" \" + fd.n.y + \" \" + fd.n.z + \"\\r\\n\";\r\n                    data += \"\\t\\touter loop\\r\\n\";\r\n                    data += \"\\t\\t\\tvertex \" + fd.v[0].x + \" \" + fd.v[0].y + \" \" + fd.v[0].z + \"\\r\\n\";\r\n                    data += \"\\t\\t\\tvertex \" + fd.v[1].x + \" \" + fd.v[1].y + \" \" + fd.v[1].z + \"\\r\\n\";\r\n                    data += \"\\t\\t\\tvertex \" + fd.v[2].x + \" \" + fd.v[2].y + \" \" + fd.v[2].z + \"\\r\\n\";\r\n                    data += \"\\t\\tendloop\\r\\n\";\r\n                    data += \"\\tendfacet\\r\\n\";\r\n                }\r\n            }\r\n            if (!binary && exportIndividualMeshes) {\r\n                data += \"endsolid \" + name + \"\\r\\n\";\r\n            }\r\n        }\r\n\r\n        if (!binary && !exportIndividualMeshes) {\r\n            data += \"endsolid stlmesh\";\r\n        }\r\n\r\n        if (download) {\r\n            const a = document.createElement(\"a\");\r\n            const blob = new Blob([data], { type: \"application/octet-stream\" });\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = fileName + \".stl\";\r\n            a.click();\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Exporters from \"serializers/glTF/glTFFileExporter\";\r\nimport * as Datas from \"serializers/glTF/2.0/glTFData\";\r\nimport * as Serializers from \"serializers/glTF/2.0/glTFSerializer\";\r\nimport * as Extensions from \"serializers/glTF/2.0/Extensions/index\";\r\nimport * as GLTF2 from \"serializers/glTF/2.0/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    const BABYLON = (<any>globalObject).BABYLON;\r\n    BABYLON.GLTF2 = BABYLON.GLTF2 || {};\r\n    BABYLON.GLTF2.Exporter = BABYLON.GLTF2.Exporter || {};\r\n    BABYLON.GLTF2.Exporter.Extensions = BABYLON.GLTF2.Exporter.Extensions || {};\r\n\r\n    const keys = [];\r\n    for (const key in Exporters) {\r\n        BABYLON[key] = (<any>Exporters)[key];\r\n        keys.push(key);\r\n    }\r\n    for (const key in Datas) {\r\n        BABYLON[key] = (<any>Datas)[key];\r\n        keys.push(key);\r\n    }\r\n    for (const key in Serializers) {\r\n        BABYLON[key] = (<any>Serializers)[key];\r\n        keys.push(key);\r\n    }\r\n\r\n    for (const key in Extensions) {\r\n        BABYLON.GLTF2.Exporter.Extensions[key] = (<any>Extensions)[key];\r\n        keys.push(key);\r\n    }\r\n\r\n    for (const key in GLTF2) {\r\n        // Prevent Reassignment.\r\n        if (keys.indexOf(key) > -1) {\r\n            continue;\r\n        }\r\n\r\n        BABYLON.GLTF2.Exporter[key] = (<any>GLTF2)[key];\r\n    }\r\n}\r\n\r\nexport * from \"serializers/glTF/glTFFileExporter\";\r\nexport * from \"serializers/glTF/2.0/index\";\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Serializers from \"serializers/OBJ/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (const serializer in Serializers) {\r\n        (<any>globalObject).BABYLON[serializer] = (<any>Serializers)[serializer];\r\n    }\r\n}\r\n\r\nexport * from \"serializers/OBJ/index\";\r\n","/* eslint-disable import/no-internal-modules */\r\nimport * as Serializers from \"serializers/stl/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    for (const serializer in Serializers) {\r\n        (<any>globalObject).BABYLON[serializer] = (<any>Serializers)[serializer];\r\n    }\r\n}\r\n\r\nexport * from \"serializers/stl/index\";\r\n","import * as serializers from \"@lts/serializers/legacy/legacy\";\r\nexport { serializers };\r\nexport default serializers;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","_TangentType","OBJ","meshes","materials","matlibname","globalposition","output","v","textureV","push","j","length","objectName","name","inverseTransform","transform","computeWorldMatrix","Matrix","invertToRef","bakeTransformIntoVertices","mat","material","id","geometry","trunkVerts","getVerticesData","trunkNormals","trunkUV","trunkFaces","getIndices","currentV","currentTextureV","useRightHandedSystem","getScene","handednessSign","i","blanks","offset1","offset2","indices","String","textureIndices","facePositions","faceUVs","faceNormals","Tools","Warn","join","MTL","mesh","m","specularPower","toFixed","alpha","ambientColor","b","diffuseColor","specularColor","emissiveColor","ambientTexture","diffuseTexture","specularTexture","bumpTexture","opacityTexture","__IGLTFExporterExtension","_CreateBufferView","bufferIndex","byteOffset","byteLength","byteStride","bufferview","buffer","_CreateAccessor","bufferviewIndex","type","componentType","count","min","max","accessor","bufferView","_CalculateMinMaxPositions","positions","vertexStart","vertexCount","indexOffset","vector","Infinity","Vector3","FromArray","asArray","num","_NormalizeTangentFromRef","tangent","Math","sqrt","x","y","z","_GetDataAccessorElementCount","accessorType","_IsTransformable","babylonNode","TransformNode","Camera","Light","_CreateNodeAnimation","babylonTransformNode","animation","animationChannelTargetPath","useQuaternion","animationSampleRate","inputs","outputs","keyFrames","getKeys","minMaxKeyFrames","_GLTFAnimation","_CalculateMinMaxKeyFrames","interpolationOrBake","_DeduceInterpolation","interpolation","interpolationType","shouldBakeAnimation","_CreateBakedAnimation","framePerSecond","_CreateLinearOrStepAnimation","_CreateCubicSplineAnimation","samplerInterpolation","inputsMin","FloatRound","inputsMax","_DeduceAnimationInfo","dataAccessorType","property","targetProperty","split","Error","_CreateNodeAnimationFromNodeAnimations","runtimeGLTFAnimation","idleGLTFAnimations","nodeMap","nodes","binaryWriter","bufferViews","accessors","shouldExportAnimation","glTFAnimation","animations","animationInfo","samplers","channels","_AddAnimation","hasRunningRuntimeAnimations","_CreateMorphTargetAnimationFromMorphTargetAnimations","Mesh","morphTargetManager","numTargets","getTarget","combinedAnimation","Animation","dataType","loopMode","enableBlending","combinedAnimationKeys","animationKeys","animationKey","k","frame","setKeys","_CreateNodeAndMorphAnimationFromAnimationGroups","babylonScene","glTFAnimations","animationGroups","animationGroup","morphAnimations","Map","sampleAnimations","morphAnimationMeshes","Set","animationGroupFrameDiff","to","from","targetAnimation","targetedAnimations","target","MorphTarget","morphTargetManagers","find","babylonMesh","has","set","add","forEach","combinedAnimationGroup","sampleAnimationKeys","numAnimationKeys","morphTarget","animationsByMorphTarget","morphTargetAnimation","ANIMATIONTYPE_FLOAT","influence","inTangent","outTangent","morphAnimationChannels","keyframeAccessorIndex","dataAccessorIndex","outputLength","animationSampler","animationChannel","animationData","index","currentInput","newInputs","shift","nodeIndex","uniqueId","_GLTFUtilities","getByteOffset","input","setFloat32","entry","sampler","node","path","minFrame","maxFrame","fps","sampleRate","minMaxFrames","time","quaternionCache","Quaternion","Identity","previousTime","maxUsedFrame","currKeyFrame","nextKeyFrame","prevKeyFrame","endFrame","equals","f","state","repeatCount","_interpolate","_SetInterpolatedValue","_ConvertFactorToVector3OrQuaternion","factor","basePositionRotationOrScale","_GetBasePositionRotationOrScale","componentName","normalize","w","cacheValue","RotationYawPitchRollToRef","keyFrame","_AddKeyframeValue","_AddSplineTangent","INTANGENT","OUTTANGENT","q","rotationQuaternion","rotation","Zero","p","position","s","scaling","One","newPositionRotationOrScale","animationType","ANIMATIONTYPE_VECTOR3","array","RotationYawPitchRoll","posRotScale","ANIMATIONTYPE_QUATERNION","AnimationKeyInterpolation","STEP","tangentType","tangentValue","glTFFiles","downloadFiles","endsWith","str","suffix","indexOf","link","document","createElement","body","appendChild","setAttribute","download","blob","mimeType","href","URL","createObjectURL","Blob","click","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","__generator","t","_","label","sent","trys","ops","verb","iterator","n","op","TypeError","pop","__spreadArray","pack","arguments","ar","l","Array","slice","concat","create","SuppressedError","exporter","_textureMap","_internalTextureToImage","_exporter","_FuzzyEquals","color1","color2","epsilon","Scalar","WithinEpsilon","_convertMaterialsToGLTFAsync","exportMaterials","hasTextureCoords","promises","getClassName","_convertStandardMaterialAsync","_convertPBRMaterialAsync","all","_stripTexturesFromMaterial","originalMaterial","newMaterial","doubleSided","alphaMode","alphaCutoff","emissiveFactor","originalPBRMetallicRoughness","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","_hasTexturesPresent","emissiveTexture","normalTexture","occlusionTexture","pbrMat","baseColorTexture","metallicRoughnessTexture","extensions","extension","extensionObject","hasTextures","_getTextureInfo","babylonTexture","textureUid","uid","_convertToGLTFPBRMetallicRoughness","babylonStandardMaterial","p0","p1","p2","p3","P0","Vector2","P1","P2","P3","diffuse","toLinearSpace","getEngine","useExactSrgbConversions","scale","opacity","roughness","Clamp","_GLTFMaterialExporter","_MaxSpecularPower","pow","_SolveMetallic","specular","oneMinusSpecularStrength","_DielectricSpecular","a","D","_SetAlphaMode","glTFMaterial","babylonMaterial","needAlphaBlending","needAlphaTesting","alphaCutOff","materialMap","_materialMap","_materials","backFaceCulling","twoSidedLighting","_exportTextureAsync","textureInfo","level","Constants","ALPHA_COMBINE","toString","Color3","Black","_Epsilon","_finishMaterial","tasks","_extensionsPostExportMaterialAdditionalTextures","texture","extensionWork","_extensionsPostExportMaterialAsync","_getImageDataAsync","width","height","textureType","TEXTURETYPE_UNSIGNED_INT","hostingScene","_babylonScene","engine","tempTexture","createRawTexture","TEXTUREFORMAT_RGBA","Texture","NEAREST_SAMPLINGMODE","TextureTools","ApplyPostProcess","TEXTURE_NEAREST_SAMPLINGMODE","_readTexturePixels","data","DumpTools","DumpDataAsync","_createWhiteTexture","scene","Uint8Array","RawTexture","CreateRGBATexture","_resizeTexturesToSameDimensions","texture1","texture2","resizedTexture1","resizedTexture2","texture1Size","getSize","texture2Size","CreateResizedCopy","_convertPixelArrayToFloat32","pixels","Float32Array","_convertSpecularGlossinessTexturesToMetallicRoughnessAsync","specularGlossinessTexture","factors","resizedTextures","diffuseSize","diffuseBuffer","specularGlossinessBuffer","readPixels","diffusePixels","specularPixels","metallicRoughnessBuffer","baseColorBuffer","maxBaseColor","maxMetallic","maxRoughness","h","offset","multiply","glossiness","specularGlossiness","metallicRoughness","_convertSpecularGlossinessToMetallicRoughness","baseColor","metallic","hasAlpha","writeOutMetallicRoughnessTexture","writeOutBaseColorTexture","destinationOffset","linearBaseColorPixel","FromInts","sRGBBaseColorPixel","toGammaSpace","White","metallicRoughnessPixel","metallicRoughnessTextureData","baseColorTextureData","diffusePerceivedBrightness","_getPerceivedBrightness","specularPerceivedBrightness","_getMaxComponent","baseColorFromDiffuse","baseColorFromSpecular","subtract","Lerp","clampToRef","color","_convertMetalRoughFactorsToMetallicRoughnessAsync","babylonPBRMaterial","glTFPbrMetallicRoughness","_albedoColor","_metallic","_roughness","_albedoTexture","glTFTexture","metallicTexture","_metallicTexture","_getTextureSampler","wrapS","_getGLTFTextureWrapMode","wrapU","wrapT","wrapV","samplingMode","LINEAR_LINEAR","magFilter","minFilter","LINEAR_NEAREST","NEAREST_LINEAR","NEAREST_LINEAR_MIPLINEAR","NEAREST_NEAREST","NEAREST_LINEAR_MIPNEAREST","LINEAR_NEAREST_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","NEAREST_NEAREST_MIPLINEAR","LINEAR_LINEAR_MIPLINEAR","LINEAR_LINEAR_MIPNEAREST","NEAREST_NEAREST_MIPNEAREST","wrapMode","WRAP_ADDRESSMODE","CLAMP_ADDRESSMODE","MIRROR_ADDRESSMODE","_convertSpecGlossFactorsToMetallicRoughnessAsync","specGloss","_reflectivityColor","_microSurface","albedoTexture","reflectivityTexture","_reflectivityTexture","useMicrosurfaceFromReflectivityMapAlpha","_useMicroSurfaceFromReflectivityMapAlpha","_exportTextureSampler","metallicRoughnessFactors","textures","_textures","imageIndex","_exportImage","_exportTextureInfo","coordinatesIndex","isMetallicWorkflow","albedoColor","_setMetallicRoughnessPbrMaterial","_twoSidedLighting","_bumpTexture","promise","_ambientTexture","texCoord","ambientTextureStrength","_ambientTextureStrength","strength","_emissiveTexture","_emissiveColor","_getPixelsFromTexture","extensionPromise","_extensionsPreExportTextureAsync","_exportTextureInfoAsync","samplerIndex","textureMimeType","internalTextureToImage","internalTextureUniqueId","getInternalTexture","imageIndexPromise","_extensionsPostExportTextures","imageData","_imageData","baseName","replace","getFileExtensionFromMimeType","fileName","RandomId","images","_images","uri","textureIndex","findIndex","source","_samplers","convertHandednessMatrix","Compose","rotation180Y","isNoopNode","getWorldMatrix","isIdentity","multiplyToRef","TmpVectors","InstancedMesh","sourceMesh","options","_extensions","_glTF","asset","Engine","Version","version","EngineStore","LastCreatedScene","_bufferViews","_accessors","_meshes","_scenes","_cameras","_nodes","_skins","_animations","_orderedImageData","_options","_animationSampleRate","_glTFMaterialExporter","_loadExtensions","_applyExtension","actionAsync","currentPromise","newNode","_applyExtensions","_Exporter","_ExtensionNames","context","preExportTextureAsync","_extensionsPostExportMeshPrimitiveAsync","meshPrimitive","babylonSubMesh","postExportMeshPrimitiveAsync","_extensionsPostExportNodeAsync","postExportNodeAsync","postExportMaterialAsync","postExportMaterialAdditionalTextures","postExportTexture","_forEachExtensions","action","enabled","_extensionsOnExporting","wasUsed","extensionsUsed","required","extensionsRequired","onExporting","_ExtensionFactories","dispose","extensionKey","RegisterExtension","UnregisterExtension","splice","_reorderIndicesBasedOnPrimitiveMode","submesh","primitiveMode","babylonIndices","Material","TriangleFillMode","indexStart","indexCount","secondIndex","getUInt32","thirdIndex","setUInt32","TriangleFanDrawMode","start","TriangleStripDrawMode","_reorderVertexAttributeDataBasedOnPrimitiveMode","vertexBufferKind","meshAttributeArray","_reorderTriangleFillMode","_reorderTriangleStripDrawMode","_reorderTriangleFanMode","vertexBuffer","_getVertexBufferFromMesh","getMesh","stride","VertexBuffer","GetTypeByteLength","verticesCount","vertexData","PositionKind","NormalKind","verticesStart","TangentKind","Vector4","ColorKind","size","UVKind","UV2Kind","_writeVertexAttributeData","vertices","vertexAttributeKind","vertex","component","_writeAttributeData","attributeComponentKind","writeBinaryFunc","vertexAttributes","meshMaterial","convertToLinear","Color4","FromArrayToRef","toLinearSpaceToRef","MatricesIndicesKind","MatricesIndicesExtraKind","MatricesWeightsKind","MatricesWeightsExtraKind","setUInt8","bind","setUInt16","writeMorphTargetAttributeData","morphTargetAttributeArray","minMax","difference","difference4","morphData","subtractToRef","copyFromFloats","_generateJSON","shouldUseGlb","glTFPrefix","prettyPrint","imageName","_totalByteLength","buffers","scenes","cameras","skins","image","JSON","stringify","_generateGLTFAsync","_generateBinaryAsync","binaryBuffer","jsonText","bin","glTFFileName","glTFBinFile","container","GLTFData","_BinaryWriter","_createSceneAsync","_localEngine","getArrayBuffer","_getPadding","remainder","_generateGLBAsync","encodedJsonText","glbFileName","jsonLength","imageByteLength","TextEncoder","encode","jsonPadding","binPadding","imagePadding","headerLength","headerBuffer","ArrayBuffer","headerBufferView","DataView","setUint32","jsonChunkBuffer","jsonChunkBufferView","jsonData","blankCharCode","charCodeAt","charCode","codePointAt","jsonPaddingView","binaryChunkBuffer","binaryChunkBufferView","binPaddingBuffer","binPaddingView","imagePaddingBuffer","imagePaddingView","glbData","glbFile","_setNodeTransformation","getPivotPoint","equalsToFloats","translation","FromEulerAngles","multiplyInPlace","IsIdentity","_setCameraTransformation","babylonCamera","decompose","attributeKind","bufferMesh","isVerticesDataPresent","getVertexBuffer","_createBufferViewKind","kind","typeByteLength","_setMorphTargetAttributes","babylonMorphTarget","targets","hasNormals","vertexNormals","morphNormals","getNormals","bufferViewIndex","NORMAL","hasPositions","vertexPositions","morphPositions","getPositions","POSITION","hasTangents","vertexTangents","morphTangents","getTangents","TANGENT","_getMeshPrimitiveMode","LinesMesh","LineListDrawMode","baseMesh","overrideRenderingFillMode","fillMode","_setPrimitiveMode","mode","PointListDrawMode","PointFillMode","LineLoopDrawMode","LineStripDrawMode","_setAttributeKind","attributes","COLOR_0","TEXCOORD_0","TEXCOORD_1","JOINTS_0","JOINTS_1","WEIGHTS_0","WEIGHTS_1","_setPrimitiveAttributesAsync","attributeData","accessorComponentType","indexBufferViewIndex","vertexAttributeBufferViews","attribute","DeduceStride","getTotalIndices","subMeshes","getMaterial","defaultMaterial","materialIndex","MultiMaterial","subMaterial","subMaterials","exportUnusedUVs","keys","overrideMaterialSideOrientation","sideOrientation","ClockWiseSideOrientation","CounterClockWiseSideOrientation","extras","targetNames","primitives","glTFNodeIndex","glTFNode","directDescendents","transformNodes","lights","removedRootNodes","metadata","metadataSelector","gltf","removeNoopRootNodes","includeCoordinateSystemConversionNodes","rootNodes","rootNode","cameraMap","camera","shouldExportNode","glTFCamera","PERSPECTIVE_CAMERA","perspective","aspectRatio","getAspectRatio","yfov","fovMode","FOVMODE_VERTICAL_FIXED","fov","znear","minZ","zfar","maxZ","halfWidth","orthoLeft","orthoRight","getRenderWidth","halfHeight","orthoBottom","orthoTop","getRenderHeight","orthographic","xmag","ymag","exportNodes","_getExportNodes","_createNodeMapAndAnimationsAsync","_createSkinsAsync","skinMap","_nodeMap","Log","parent","ComposeToRef","skeleton","skin","getDescendants","children","descendent","promiseChain","_createNodeAsync","idleGLTFAnimation","weights","skeletons","bones","joints","inverseBindMatrices","boneIndexMap","maxBoneIndex","boneIndex","bone","getIndex","getInvertedAbsoluteTransform","transformNode","getTransformNode","bufferViewOffset","bindMatrixAccessor","inverseBindAccessorIndex","cell","_arrayBuffer","_dataView","_byteOffset","_resizeBuffer","newBuffer","copyOldBufferSize","oldUint8Array","setUint8","setUint16","getUint32","getVector3Float32FromRef","vector3","getFloat32","setVector3Float32FromRef","getVector4Float32FromRef","vector4","setVector4Float32FromRef","isNaN","setInt16","setByte","setInt8","__IGLTFExporterExtensionV2","GLTFAsync","filePrefix","whenReadyAsync","_PreExportAsync","exportWithoutWaitingForScene","_PostExportAsync","glTFData","GLBAsync","NAME","_wasUsed","uAng","wAng","vAng","uRotationCenter","vRotationCenter","textureTransform","transformIsRequired","uOffset","vOffset","uScale","vScale","KHR_texture_transform","_lights","ShadowLight","light","lightType","getTypeID","LIGHTTYPEID_POINTLIGHT","LIGHTTYPEID_DIRECTIONALLIGHT","LIGHTTYPEID_SPOTLIGHT","Logger","localAxis","direction","yaw","atan2","PI","len","pitch","lightRotationQuaternion","falloffType","FALLOFF_GLTF","intensity","range","Number","MAX_VALUE","babylonSpotLight","angle","spot","outerConeAngle","innerAngle","innerConeAngle","lightReference","parentBabylonNode","getChildren","parentNode","parentTranslation","parentRotation","parentScale","parentMatrix","matrix","OneReadOnly","KHR_lights_punctual","additionalTextures","PBRBaseMaterial","clearCoat","isEnabled","useRoughnessFromMainTexture","textureRoughness","clearCoatTextureRoughnessInfo","clearCoatTextureInfo","isTintEnabled","remapF0OnInterfaceChange","clearCoatNormalTextureInfo","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","KHR_materials_clearcoat","iridescence","thicknessTexture","iridescenceTextureInfo","iridescenceThicknessTextureInfo","iridescenceFactor","iridescenceIor","indexOfRefraction","iridescenceThicknessMinimum","minimumThickness","iridescenceThicknessMaximum","maximumThickness","iridescenceTexture","iridescenceThicknessTexture","KHR_materials_iridescence","anisotropy","legacy","anisotropyTextureInfo","anisotropyStrength","anisotropyRotation","anisotropyTexture","KHR_materials_anisotropy","PBRMaterial","sheen","sheenColorFactor","sheenRoughnessFactor","sheenColorTexture","sheenRoughnessTexture","KHR_materials_sheen","unlitMaterial","unlit","StandardMaterial","disableLighting","KHR_materials_unlit","_isExtensionEnabled","iorInfo","ior","KHR_materials_ior","metallicReflectanceTexture","reflectanceTexture","metallicF0Factor","metallicReflectanceColor","equalsFloats","_hasTexturesExtension","specularInfo","specularFactor","specularColorFactor","specularColorTexture","KHR_materials_specular","subSurface","subs","isRefractionEnabled","isTranslucencyEnabled","tintColorAtDistance","POSITIVE_INFINITY","tintColor","volumeInfo","thicknessFactor","attenuationDistance","attenuationColor","KHR_materials_volume","isDispersionEnabled","dispersionInfo","dispersion","KHR_materials_dispersion","refractionIntensity","refractionIntensityTexture","transmissionFactor","transmissionTexture","KHR_materials_transmission","hasThinInstances","noTranslation","noRotation","noScale","thinInstanceGetWorldMatrices","iwt","iwr","iws","hasAnyInstanceWorldTranslation","hasAnyInstanceWorldRotation","hasAnyInstanceWorldScale","translationBuffer","thinInstanceCount","rotationBuffer","scaleBuffer","equalsWithEpsilon","_buildAccessor","bufferOffset","bv","accessorIndex","normalized","EXT_mesh_gpu_instancing","tempEmissiveStrength","emissiveStrengthInfo","emissiveStrength","newEmissiveFactor","KHR_materials_emissive_strength","CreateSTL","binary","isLittleEndian","doNotBakeTransform","supportInstancedMeshes","exportIndividualMeshes","getFaceData","p1p2","p3p2","Cross","writeVector","dataview","writeFloat","temp","TransformCoordinatesFromFloatsToRef","toArray","faceCount","bakeCurrentTransformIntoVertices","fd","globalObject","BABYLON","GLTF2","Exporter","Extensions","serializer"],"sourceRoot":""}